
TP_Final/AutoCompost/out/AutoCompost.elf:     file format elf32-littlearm
TP_Final/AutoCompost/out/AutoCompost.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001275

Program Header:
0x70000001 off    0x00014764 vaddr 0x1a004764 paddr 0x1a004764 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100b0 vaddr 0x100000b0 paddr 0x100000b0 align 2**16
         filesz 0x00000000 memsz 0x0000025c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000476c memsz 0x0000476c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00476c align 2**16
         filesz 0x000000ac memsz 0x000000ac flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004760  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  10000000  1a00476c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
  6 .bss          0000025c  100000b0  100000b0  000100b0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 11 .init_array   00000004  1a004760  1a004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004764  1a004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200ac  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 18 .noinit       00000000  1000030c  1000030c  000200ac  2**2
                  CONTENTS
 19 .debug_info   00023095  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004a6b  00000000  00000000  00043141  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a055  00000000  00000000  00047bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001040  00000000  00000000  00051c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000010e0  00000000  00000000  00052c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d7e8  00000000  00000000  00053d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012c82  00000000  00000000  00061509  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002bf82  00000000  00000000  0007418b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a010d  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a0175  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000030a8  00000000  00000000  000a01a8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004760 l    d  .init_array	00000000 .init_array
1a004764 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000030c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Compostera.c
1a000300 l     F .text	0000003c clearInEvents
1a00033c l     F .text	00000004 check_Sensor_Lid_CERRADO_tr0_tr0
1a000340 l     F .text	00000004 check_Sensor_Lid_ABIERTO_tr0_tr0
1a000344 l     F .text	00000004 check_Sensor_Lid_INICIO_tr0_tr0
1a000348 l     F .text	00000004 check_Sensor_Lid_INICIO_tr1_tr1
1a00034c l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr0_tr0
1a000350 l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr1_tr1
1a000354 l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr2_tr2
1a000358 l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr3_tr3
1a00035c l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr4_tr4
1a000360 l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr5_tr5
1a000364 l     F .text	00000004 check_Sensor_Humedad_LEYENDO_tr6_tr6
1a000368 l     F .text	00000004 check_Sensor_Humedad_HUM_SUPERIOR_tr0_tr0
1a00036c l     F .text	00000004 check_Sensor_Humedad_ESTABLE_tr0_tr0
1a000370 l     F .text	00000004 check_Sensor_Humedad_HUM_INFERIOR_tr0_tr0
1a000374 l     F .text	00000004 check_Sensor_Humedad_TEMP_SUPERIOR_tr0_tr0
1a000378 l     F .text	00000006 check_Sensor_Humedad_SUPERIOR_tr0_tr0
1a00037e l     F .text	00000006 check_Sensor_Humedad_ERROR_tr0_tr0
1a000384 l     F .text	00000004 check_Humedad_HUMEDECIENDO_tr0_tr0
1a000388 l     F .text	00000004 check_Humedad_DESHUMEDECIENDO_tr0_tr0
1a00038c l     F .text	00000004 check_Humedad_ESPERANDO_tr0_tr0
1a000390 l     F .text	00000004 check_Humedad_ESPERANDO_tr1_tr1
1a000394 l     F .text	00000004 check_Temperatura_ENFRIANDO_tr0_tr0
1a000398 l     F .text	00000004 check_Temperatura_ENFRIANDO_tr1_tr1
1a00039c l     F .text	00000004 check_Temperatura_ESPERANDO_tr0_tr0
1a0003a0 l     F .text	00000006 check_Compostar_RELLENANDO_tr0_tr0
1a0003a6 l     F .text	00000004 check_Compostar_RELLENANDO_tr1_tr1
1a0003aa l     F .text	00000004 check_Compostar_ESPERANDO_tr0_tr0
1a0003ae l     F .text	00000004 check_Compostar_SONANDO_tr0_tr0
1a0003b2 l     F .text	00000006 check_Compostar_MEZCLANDO_tr0_tr0
1a0003b8 l     F .text	00000004 check_Compostar_MEZCLANDO_tr1_tr1
1a0003bc l     F .text	00000006 enact_Sensor_Lid_CERRADO
1a0003c2 l     F .text	00000006 enact_Sensor_Lid_ABIERTO
1a0003c8 l     F .text	00000012 enseq_Sensor_Lid_CERRADO_default
1a0003da l     F .text	00000012 enseq_Sensor_Lid_ABIERTO_default
1a0003ec l     F .text	0000000a enseq_Sensor_Lid_INICIO_default
1a0003f6 l     F .text	00000008 exseq_Sensor_Lid_CERRADO
1a0003fe l     F .text	00000010 effect_Sensor_Lid_CERRADO_tr0
1a00040e l     F .text	00000008 exseq_Sensor_Lid_ABIERTO
1a000416 l     F .text	00000010 effect_Sensor_Lid_ABIERTO_tr0
1a000426 l     F .text	00000008 exseq_Sensor_Lid_INICIO
1a00042e l     F .text	00000010 effect_Sensor_Lid_INICIO_tr0
1a00043e l     F .text	00000010 effect_Sensor_Lid_INICIO_tr1
1a00044e l     F .text	0000000a exseq_Humedad_HUMEDECIENDO
1a000458 l     F .text	0000000a exseq_Humedad_DESHUMEDECIENDO
1a000462 l     F .text	0000000a exseq_Humedad_ESPERANDO
1a00046c l     F .text	0000000a exseq_Temperatura_ENFRIANDO
1a000476 l     F .text	0000000a exseq_Temperatura_ESPERANDO
1a000480 l     F .text	0000000a exseq_Compostar_ESPERANDO
1a00048a l     F .text	0000000a exseq_Compostar_SONANDO
1a000494 l     F .text	00000014 react_Sensor_Lid_CERRADO
1a0004a8 l     F .text	00000014 react_Sensor_Lid_ABIERTO
1a0004bc l     F .text	00000024 react_Sensor_Lid_INICIO
1a0004e0 l     F .text	00000008 react_Sensor_Lid__entry_Default
1a0004e8 l     F .text	00000008 enseq_Sensor_Lid_default
1a0004f0 l     F .text	00000018 enact_Sensor_Humedad_HUM_SUPERIOR
1a000508 l     F .text	00000012 enseq_Sensor_Humedad_HUM_SUPERIOR_default
1a00051a l     F .text	00000018 enact_Sensor_Humedad_HUM_INFERIOR
1a000532 l     F .text	00000012 enseq_Sensor_Humedad_HUM_INFERIOR_default
1a000544 l     F .text	00000018 enact_Sensor_Humedad_ESTABLE
1a00055c l     F .text	00000012 enseq_Sensor_Humedad_ESTABLE_default
1a00056e l     F .text	00000018 enact_Sensor_Humedad_TEMP_SUPERIOR
1a000586 l     F .text	00000012 enseq_Sensor_Humedad_TEMP_SUPERIOR_default
1a000598 l     F .text	0000001a enact_Sensor_Humedad_SUPERIOR
1a0005b2 l     F .text	00000012 enseq_Sensor_Humedad_SUPERIOR_default
1a0005c4 l     F .text	0000001a enact_Sensor_Humedad_LEYENDO
1a0005de l     F .text	00000012 enseq_Sensor_Humedad_LEYENDO_default
1a0005f0 l     F .text	00000008 react_Sensor_Humedad__entry_Default
1a0005f8 l     F .text	00000008 enseq_Sensor_Humedad_default
1a000600 l     F .text	0000000c enact_Compostar_ESPERANDO
1a00060c l     F .text	00000012 enseq_Compostar_ESPERANDO_default
1a00061e l     F .text	00000008 react_Compostar__entry_Default
1a000626 l     F .text	00000008 enseq_Compostar_default
1a00062e l     F .text	0000001e enact_Sensor_Humedad_ERROR
1a00064c l     F .text	00000012 enseq_Sensor_Humedad_ERROR_default
1a00065e l     F .text	00000018 enact_Compostar_SONANDO
1a000676 l     F .text	00000012 enseq_Compostar_SONANDO_default
1a000688 l     F .text	00000032 enact_Compostar_MEZCLANDO
1a0006ba l     F .text	00000012 enseq_Compostar_MEZCLANDO_default
1a0006cc l     F .text	00000010 effect_Compostar_SONANDO_tr0
1a0006dc l     F .text	00000014 react_Compostar_SONANDO
1a0006f0 l     F .text	00000028 enact_Compostar_RELLENANDO
1a000718 l     F .text	00000012 enseq_Compostar_RELLENANDO_default
1a00072a l     F .text	00000010 effect_Compostar_ESPERANDO_tr0
1a00073a l     F .text	00000014 react_Compostar_ESPERANDO
1a00074e l     F .text	00000024 enact_Humedad_ESPERANDO
1a000772 l     F .text	00000012 enseq_Humedad_ESPERANDO_default
1a000784 l     F .text	00000008 react_Humedad__entry_Default
1a00078c l     F .text	00000008 enseq_Humedad_default
1a000794 l     F .text	00000010 effect_Humedad_HUMEDECIENDO_tr0
1a0007a4 l     F .text	00000014 react_Humedad_HUMEDECIENDO
1a0007b8 l     F .text	00000010 effect_Humedad_DESHUMEDECIENDO_tr0
1a0007c8 l     F .text	00000014 react_Humedad_DESHUMEDECIENDO
1a0007dc l     F .text	00000014 enact_Temperatura_ESPERANDO
1a0007f0 l     F .text	00000012 enseq_Temperatura_ESPERANDO_default
1a000802 l     F .text	00000008 react_Temperatura__entry_Default
1a00080a l     F .text	00000008 enseq_Temperatura_default
1a000812 l     F .text	00000010 effect_Temperatura_ENFRIANDO_tr0
1a000822 l     F .text	00000010 effect_Temperatura_ENFRIANDO_tr1
1a000832 l     F .text	00000024 react_Temperatura_ENFRIANDO
1a000856 l     F .text	0000000c exact_Sensor_Humedad_LEYENDO
1a000862 l     F .text	00000010 exseq_Sensor_Humedad_LEYENDO
1a000872 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr0
1a000882 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr1
1a000892 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr2
1a0008a2 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr3
1a0008b2 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr4
1a0008c2 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr5
1a0008d2 l     F .text	00000010 effect_Sensor_Humedad_LEYENDO_tr6
1a0008e2 l     F .text	00000072 react_Sensor_Humedad_LEYENDO
1a000954 l     F .text	0000000c exact_Sensor_Humedad_HUM_SUPERIOR
1a000960 l     F .text	00000010 exseq_Sensor_Humedad_HUM_SUPERIOR
1a000970 l     F .text	00000010 effect_Sensor_Humedad_HUM_SUPERIOR_tr0
1a000980 l     F .text	00000014 react_Sensor_Humedad_HUM_SUPERIOR
1a000994 l     F .text	0000000c exact_Sensor_Humedad_ESTABLE
1a0009a0 l     F .text	00000010 exseq_Sensor_Humedad_ESTABLE
1a0009b0 l     F .text	00000010 effect_Sensor_Humedad_ESTABLE_tr0
1a0009c0 l     F .text	00000014 react_Sensor_Humedad_ESTABLE
1a0009d4 l     F .text	0000000c exact_Sensor_Humedad_HUM_INFERIOR
1a0009e0 l     F .text	00000010 exseq_Sensor_Humedad_HUM_INFERIOR
1a0009f0 l     F .text	00000010 effect_Sensor_Humedad_HUM_INFERIOR_tr0
1a000a00 l     F .text	00000014 react_Sensor_Humedad_HUM_INFERIOR
1a000a14 l     F .text	0000000c exact_Sensor_Humedad_TEMP_SUPERIOR
1a000a20 l     F .text	00000010 exseq_Sensor_Humedad_TEMP_SUPERIOR
1a000a30 l     F .text	00000010 effect_Sensor_Humedad_TEMP_SUPERIOR_tr0
1a000a40 l     F .text	00000014 react_Sensor_Humedad_TEMP_SUPERIOR
1a000a54 l     F .text	0000000c exact_Sensor_Humedad_SUPERIOR
1a000a60 l     F .text	00000010 exseq_Sensor_Humedad_SUPERIOR
1a000a70 l     F .text	00000010 effect_Sensor_Humedad_SUPERIOR_tr0
1a000a80 l     F .text	00000014 react_Sensor_Humedad_SUPERIOR
1a000a94 l     F .text	0000000c exact_Sensor_Humedad_ERROR
1a000aa0 l     F .text	00000010 exseq_Sensor_Humedad_ERROR
1a000ab0 l     F .text	00000010 effect_Sensor_Humedad_ERROR_tr0
1a000ac0 l     F .text	00000014 react_Sensor_Humedad_ERROR
1a000ad4 l     F .text	0000000c exact_Compostar_RELLENANDO
1a000ae0 l     F .text	00000010 exseq_Compostar_RELLENANDO
1a000af0 l     F .text	00000010 effect_Compostar_RELLENANDO_tr0
1a000b00 l     F .text	00000010 effect_Compostar_RELLENANDO_tr1
1a000b10 l     F .text	00000024 react_Compostar_RELLENANDO
1a000b34 l     F .text	0000000c exact_Compostar_MEZCLANDO
1a000b40 l     F .text	00000010 exseq_Compostar_MEZCLANDO
1a000b50 l     F .text	00000010 effect_Compostar_MEZCLANDO_tr0
1a000b60 l     F .text	00000010 effect_Compostar_MEZCLANDO_tr1
1a000b70 l     F .text	00000024 react_Compostar_MEZCLANDO
1a000b94 l     F .text	00000014 enact_Humedad_DESHUMEDECIENDO
1a000ba8 l     F .text	00000012 enseq_Humedad_DESHUMEDECIENDO_default
1a000bba l     F .text	00000010 effect_Humedad_ESPERANDO_tr0
1a000bca l     F .text	00000014 enact_Humedad_HUMEDECIENDO
1a000bde l     F .text	00000012 enseq_Humedad_HUMEDECIENDO_default
1a000bf0 l     F .text	00000010 effect_Humedad_ESPERANDO_tr1
1a000c00 l     F .text	00000024 react_Humedad_ESPERANDO
1a000c24 l     F .text	00000014 enact_Temperatura_ENFRIANDO
1a000c38 l     F .text	00000012 enseq_Temperatura_ENFRIANDO_default
1a000c4a l     F .text	00000010 effect_Temperatura_ESPERANDO_tr0
1a000c5a l     F .text	00000014 react_Temperatura_ESPERANDO
00000000 l    df *ABS*	00000000 main.c
100000b4 l     O .bss	00000004 humidity
100000b8 l     O .bss	00000024 statechart
100000dc l     O .bss	00000004 temperature
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 system.c
100000e0 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004410 l     O .text	00000004 InitClkStates
1a004414 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a001478 l     F .text	00000044 Board_LED_Init
1a0014bc l     F .text	00000040 Board_TEC_Init
1a0014fc l     F .text	00000040 Board_GPIO_Init
1a00153c l     F .text	00000030 Board_ADC_Init
1a00156c l     F .text	00000038 Board_SPI_Init
1a0015a4 l     F .text	00000024 Board_I2C_Init
1a00448c l     O .text	00000008 GpioButtons
1a004494 l     O .text	0000000c GpioLeds
1a0044a0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001668 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00167c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00179c l     F .text	00000014 Chip_ADC_GetClockIndex
1a0017b0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0044b8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0019d0 l     F .text	000000a0 pll_calc_divs
1a001a70 l     F .text	0000010c pll_get_frac
1a001b7c l     F .text	0000004c Chip_Clock_FindBaseClock
1a001df0 l     F .text	00000022 Chip_Clock_GetDivRate
100000e4 l     O .bss	00000008 audio_usb_pll_freq
1a00450c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001f5c l     F .text	0000002c Chip_UART_GetIndex
1a004578 l     O .text	00000008 UART_BClock
1a004580 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00214c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
100000ec l     O .bss	00000004 callBackFuncParams
100000f0 l     O .bss	00000008 tickCounter
100000f8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004670 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000fc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_dht11.c
1a002648 l     F .text	00000024 dht11_TimeOutReset
1a00266c l     F .text	00000020 dht11_TimeOutCheck
1a00268c l     F .text	000000a0 dht11_ProcessData
1a00272c l     F .text	00000014 dht11_GPIO_High
1a002740 l     F .text	00000020 dht11_GPIO_Low
1a002760 l     F .text	00000014 dht11_GPIO_Read
1a002774 l     F .text	000000e8 dht11_StartRead
10000100 l     O .bss	00000004 dht11Pin
10000104 l     O .bss	00000005 dht11_byte
1000010c l     O .bss	00000148 dht11_ticks_array
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0035d0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003968 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
1000004c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004764 l       .init_array	00000000 __init_array_end
1a004760 l       .bss_RAM5	00000000 __preinit_array_end
1a004760 l       .init_array	00000000 __init_array_start
1a004760 l       .bss_RAM5	00000000 __preinit_array_start
1a001c14 g     F .text	0000001c Chip_Clock_GetDividerSource
100000b0 g     O .bss	00000001 SysTick_Time_Flag
1a001314 g     F .text	00000012 _isatty_r
1a003f50 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001326 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
100002f8 g     O .bss	00000004 dht11_timeout
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
100002fc g     O .bss	00000004 dht11_timeout_max
1a002c28 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003f20 g     F .text	00000030 printf
1a00165e g     F .text	00000008 __stdio_init
10000300 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a004096 g     F .text	00000024 __sseek
1a003680 g     F .text	00000070 __sinit
1a0040c4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a003624 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a001856 g     F .text	0000000c Chip_ADC_SetResolution
1a0043bc g     F .text	0000000c __malloc_unlock
1a0024b4 g     F .text	0000002c SysTick_Handler
1a001fdc g     F .text	00000040 Chip_UART_SetBaud
10000301 g     O .bss	00000001 __lock___arc4random_mutex
1a001272  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001600 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00476c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a000de6 g     F .text	00000006 composteraIface_raise_evCerradoTapa
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00130a g     F .text	0000000a _fstat_r
53ff661a g       *ABS*	00000000 __valid_user_code_checksum
1a00476c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00122e g     F .text	00000044 UpdateTimers
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001e92 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0011dc g     F .text	0000002e IsPendEvent
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00120a g     F .text	00000024 MarkAsAttEvent
1a003618 g     F .text	0000000c _cleanup_r
1a002bb0 g     F .text	00000022 .hidden __floatsidf
1a003148 g     F .text	00000000 .hidden __aeabi_uldivmod
1000030c g       .noinit	00000000 _noinit
1a00402c g     F .text	00000010 puts
1a000fd0 g     F .text	0000000c composteraIface_stop_drying
100002f0 g     O .bss	00000004 SystemCoreClock
1a001f88 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002870 g     F .text	0000009c dht11Read
1a000c6e g     F .text	0000001a compostera_init
1a000180  w    F .text	00000002 UsageFault_Handler
1a001f10 g     F .text	0000004c Chip_Clock_GetRate
1a000e00 g     F .text	0000000c myTickHook
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a001400 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002b90 g     F .text	0000001e .hidden __aeabi_ui2d
1a003178 g     F .text	000002d0 .hidden __udivmoddi4
1a00290c g     F .text	00000000 .hidden __aeabi_drsub
1a0013a8 g     F .text	00000020 _sbrk_r
1a004488 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001330 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a002bd4 g     F .text	00000042 .hidden __extendsfdf2
1a002ed8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002918 g     F .text	00000276 .hidden __adddf3
1a000fac g     F .text	0000000c composteraIface_start_wetting
1a004764 g       .ARM.exidx	00000000 __exidx_start
10000302 g     O .bss	00000001 __lock___env_recursive_mutex
1a002c84 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000303 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004728 g     O .text	00000004 _global_impure_ptr
1a0037b8 g     F .text	00000048 __libc_init_array
1a002b90 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00161c g     F .text	00000030 Board_Init
1a0012fe  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0030a8 g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000030c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a001274 g     F .text	00000088 Reset_Handler
1a002438 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001760 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001bc8 g     F .text	0000004c Chip_Clock_EnableCrystal
10000304 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000df2 g     F .text	00000006 composteraIface_raise_evParametrosExcedidos
1a002918 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a000dec g     F .text	00000006 composteraIface_raise_evAberturaTapa
1a002c18 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0046c8 g     O .text	00000020 __sf_fake_stderr
1a00173c g     F .text	00000024 Chip_I2C_Init
1a001176 g     F .text	00000032 SetNewTimerTick
1a003804 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001d84 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004588 g     O .text	000000e6 gpioPinsInit
1a001694 g     F .text	00000012 Chip_SSP_SetClockRate
1a003996 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003650 g     F .text	0000000c __sfp_lock_acquire
1a004310 g     F .text	00000000 memchr
1a003818 g     F .text	0000009c _free_r
1a001e6c g     F .text	00000026 Chip_Clock_GetBaseClock
1a000cac g     F .text	00000110 compostera_runCycle
1a00285c g     F .text	00000010 dht11Init
100000b0 g       .bss	00000000 _bss
1a001824 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002914 g     F .text	0000027a .hidden __aeabi_dsub
1a002c18 g     F .text	0000006a .hidden __floatundidf
1a000fa0 g     F .text	0000000c composteraIface_start_cooling
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0016a6 g     F .text	0000003e Chip_SSP_SetBitRate
1a001798 g     F .text	00000002 Chip_GPIO_Init
1a0044b4 g     O .text	00000004 OscRateIn
1a0024e0 g     F .text	0000007c uartInit
1000030c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001300 g     F .text	0000000a _close_r
1a002bb0 g     F .text	00000022 .hidden __aeabi_i2d
1a002180 g     F .text	000001ac gpioInit
1a004168 g     F .text	000000dc __swsetup_r
1a003448  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002ed8 g     F .text	000001d0 .hidden __divdf3
1a0036f0 g     F .text	0000008c __sfp
1a003674 g     F .text	0000000c __sinit_lock_release
1a002c84 g     F .text	00000254 .hidden __muldf3
1a00403c g     F .text	00000022 __sread
1a00255c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0043b0 g     F .text	0000000c __malloc_lock
1a0015ec g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003558 g     F .text	00000078 _fflush_r
1a0046e8 g     O .text	00000020 __sf_fake_stdin
1a001c30 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003802 g     F .text	00000002 __retarget_lock_acquire_recursive
1a000dce g     F .text	00000006 composteraIface_raise_evHumedadMenor40
1a003806 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000fdc g     F .text	00000178 main
1a000df8 g     F .text	00000006 composteraIface_raise_evLecturaErronea
1a003800 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0011a8 g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0040ba g     F .text	00000008 __sclose
1a0030a8 g     F .text	0000009e .hidden __truncdfsf2
1a0038b4 g     F .text	000000b4 _malloc_r
1a002c28 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001ea0 g     F .text	0000003c Chip_Clock_EnableOpts
1a000e0c g     F .text	00000010 composteraIface_opLED
1a001656 g     F .text	00000008 __stdio_getchar
1a001c4c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001d04 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0020f8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00232c g     F .text	0000006a gpioWrite
1a0012fc  w    F .text	00000002 _fini
1a003f20 g     F .text	00000030 iprintf
1a000c88 g     F .text	00000022 compostera_enter
1a0017e4 g     F .text	00000040 Chip_ADC_Init
100002f4 g     O .bss	00000004 g_pUsbApi
1a0013c8 g     F .text	00000038 Board_SetupMuxing
1a00201c g     F .text	000000dc Chip_UART_SetBaudFDR
1a00137e g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a000dd4 g     F .text	00000006 composteraIface_raise_evHumedadMayor60
1a000e38 g     F .text	00000014 compostera_unsetTimer
1a000fb8 g     F .text	0000000c composteraIface_stop_wetting
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003c0c g     F .text	000000ea _printf_common
10000048 g     O .data	00000004 _impure_ptr
1a00344c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000f94 g     F .text	0000000c composteraIface_start_drying
1000025c g     O .bss	00000090 ticks
1b000000 g       .text	00000000 __core_m0app_START__
1a000f78 g     F .text	0000001c stop_automatic_control
1a000de0 g     F .text	00000006 composteraIface_raise_evTemperaturaMayor60
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001154 g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a002400 g     F .text	00000020 tickCallbackSet
1000030c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0016e4 g     F .text	00000038 Chip_SSP_Init
1a000e78 g     F .text	00000100 composteraIface_readParameters
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a004244 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0015c8 g     F .text	00000024 Board_Debug_Init
1a00164c g     F .text	0000000a __stdio_putchar
100000ac g       .data	00000000 _edata
1a00171c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000305 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001864 g     F .text	00000158 Chip_SetupCoreClock
1a00405e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0039bc g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a000dda g     F .text	00000006 composteraIface_raise_evParametrosEstable
1a000e1c g     F .text	0000001c compostera_setTimer
1a00377c g     F .text	0000003c _fwalk_reent
1a0019bc g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00365c g     F .text	0000000c __sfp_lock_release
1a004708 g     O .text	00000020 __sf_fake_stdout
1a0025ec g     F .text	0000005c delayInaccurateUs
1a003448  w    F .text	00000002 .hidden __aeabi_idiv0
1a000dbc g     F .text	00000012 compostera_raiseTimeEvent
1a00017e  w    F .text	00000002 BusFault_Handler
10000306 g     O .bss	00000001 __lock___dd_hash_mutex
1a00428c g     F .text	00000080 __smakebuf_r
10000307 g     O .bss	00000001 __lock___tz_mutex
1a003cf8 g     F .text	00000228 _printf_i
1a001edc g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10000258 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002396 g     F .text	00000068 gpioRead
1a002bd4 g     F .text	00000042 .hidden __aeabi_f2d
1a002578 g     F .text	00000074 boardInit
1a000e4c g     F .text	0000002c gpio_init
10000254 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002914 g     F .text	0000027a .hidden __subdf3
1a0039bc g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002420 g     F .text	00000018 tickPowerSet
1a000fc4 g     F .text	0000000c composteraIface_stop_cooling
100002ec g     O .bss	00000001 status
1a001e14 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002130 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000308 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a003668 g     F .text	0000000c __sinit_lock_acquire
1a00146c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 75 12 00 1a 79 01 00 1a 7b 01 00 1a     ....u...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 1a 66 ff 53     }............f.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	b5 24 00 1a                                         .$..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	5d 25 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ]%..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00476c 	.word	0x1a00476c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000ac 	.word	0x000000ac
1a000120:	1a00476c 	.word	0x1a00476c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00476c 	.word	0x1a00476c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00476c 	.word	0x1a00476c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00476c 	.word	0x1a00476c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b0 	.word	0x100000b0
1a000154:	0000025c 	.word	0x0000025c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(Compostera* handle)
{
	handle->iface.evHumedadMenor40_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7303      	strb	r3, [r0, #12]
	handle->iface.evHumedadMayor60_raised = bool_false;
1a000304:	7343      	strb	r3, [r0, #13]
	handle->iface.evParametrosEstable_raised = bool_false;
1a000306:	7383      	strb	r3, [r0, #14]
	handle->iface.evTemperaturaMayor60_raised = bool_false;
1a000308:	73c3      	strb	r3, [r0, #15]
	handle->iface.evCerradoTapa_raised = bool_false;
1a00030a:	7403      	strb	r3, [r0, #16]
	handle->iface.evAberturaTapa_raised = bool_false;
1a00030c:	7443      	strb	r3, [r0, #17]
	handle->iface.evParametrosExcedidos_raised = bool_false;
1a00030e:	7483      	strb	r3, [r0, #18]
	handle->iface.evLecturaErronea_raised = bool_false;
1a000310:	74c3      	strb	r3, [r0, #19]
	handle->internal.siTemperaturaMayor60_raised = bool_false;
1a000312:	7503      	strb	r3, [r0, #20]
	handle->internal.siTemperaturaEstable_raised = bool_false;
1a000314:	7543      	strb	r3, [r0, #21]
	handle->internal.siHumedadMenor40_raised = bool_false;
1a000316:	7583      	strb	r3, [r0, #22]
	handle->internal.siHumedadEstable_raised = bool_false;
1a000318:	75c3      	strb	r3, [r0, #23]
	handle->internal.siHumedadMayor60_raised = bool_false;
1a00031a:	7603      	strb	r3, [r0, #24]
	handle->internal.siAberturaTapa_raised = bool_false;
1a00031c:	7643      	strb	r3, [r0, #25]
	handle->internal.siCerradoTapa_raised = bool_false;
1a00031e:	7683      	strb	r3, [r0, #26]
	handle->timeEvents.compostera_Sensor_Humedad_LEYENDO_tev0_raised = bool_false;
1a000320:	76c3      	strb	r3, [r0, #27]
	handle->timeEvents.compostera_Sensor_Humedad_HUM_SUPERIOR_tev0_raised = bool_false;
1a000322:	7703      	strb	r3, [r0, #28]
	handle->timeEvents.compostera_Sensor_Humedad_ESTABLE_tev0_raised = bool_false;
1a000324:	7743      	strb	r3, [r0, #29]
	handle->timeEvents.compostera_Sensor_Humedad_HUM_INFERIOR_tev0_raised = bool_false;
1a000326:	7783      	strb	r3, [r0, #30]
	handle->timeEvents.compostera_Sensor_Humedad_TEMP_SUPERIOR_tev0_raised = bool_false;
1a000328:	77c3      	strb	r3, [r0, #31]
	handle->timeEvents.compostera_Sensor_Humedad_SUPERIOR_tev0_raised = bool_false;
1a00032a:	f880 3020 	strb.w	r3, [r0, #32]
	handle->timeEvents.compostera_Sensor_Humedad_ERROR_tev0_raised = bool_false;
1a00032e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	handle->timeEvents.compostera_Compostar_RELLENANDO_tev0_raised = bool_false;
1a000332:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	handle->timeEvents.compostera_Compostar_MEZCLANDO_tev0_raised = bool_false;
1a000336:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
1a00033a:	4770      	bx	lr

1a00033c <check_Sensor_Lid_CERRADO_tr0_tr0>:
/* implementations of all internal functions */

static sc_boolean check_Sensor_Lid_CERRADO_tr0_tr0(const Compostera* handle)
{
	return handle->iface.evAberturaTapa_raised;
}
1a00033c:	7c40      	ldrb	r0, [r0, #17]
1a00033e:	4770      	bx	lr

1a000340 <check_Sensor_Lid_ABIERTO_tr0_tr0>:

static sc_boolean check_Sensor_Lid_ABIERTO_tr0_tr0(const Compostera* handle)
{
	return handle->iface.evCerradoTapa_raised;
}
1a000340:	7c00      	ldrb	r0, [r0, #16]
1a000342:	4770      	bx	lr

1a000344 <check_Sensor_Lid_INICIO_tr0_tr0>:

static sc_boolean check_Sensor_Lid_INICIO_tr0_tr0(const Compostera* handle)
{
	return handle->iface.evCerradoTapa_raised;
}
1a000344:	7c00      	ldrb	r0, [r0, #16]
1a000346:	4770      	bx	lr

1a000348 <check_Sensor_Lid_INICIO_tr1_tr1>:

static sc_boolean check_Sensor_Lid_INICIO_tr1_tr1(const Compostera* handle)
{
	return handle->iface.evAberturaTapa_raised;
}
1a000348:	7c40      	ldrb	r0, [r0, #17]
1a00034a:	4770      	bx	lr

1a00034c <check_Sensor_Humedad_LEYENDO_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr0_tr0(const Compostera* handle)
{
	return handle->iface.evHumedadMayor60_raised;
}
1a00034c:	7b40      	ldrb	r0, [r0, #13]
1a00034e:	4770      	bx	lr

1a000350 <check_Sensor_Humedad_LEYENDO_tr1_tr1>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr1_tr1(const Compostera* handle)
{
	return handle->iface.evHumedadMenor40_raised;
}
1a000350:	7b00      	ldrb	r0, [r0, #12]
1a000352:	4770      	bx	lr

1a000354 <check_Sensor_Humedad_LEYENDO_tr2_tr2>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr2_tr2(const Compostera* handle)
{
	return handle->iface.evParametrosEstable_raised;
}
1a000354:	7b80      	ldrb	r0, [r0, #14]
1a000356:	4770      	bx	lr

1a000358 <check_Sensor_Humedad_LEYENDO_tr3_tr3>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr3_tr3(const Compostera* handle)
{
	return handle->iface.evTemperaturaMayor60_raised;
}
1a000358:	7bc0      	ldrb	r0, [r0, #15]
1a00035a:	4770      	bx	lr

1a00035c <check_Sensor_Humedad_LEYENDO_tr4_tr4>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr4_tr4(const Compostera* handle)
{
	return handle->iface.evParametrosExcedidos_raised;
}
1a00035c:	7c80      	ldrb	r0, [r0, #18]
1a00035e:	4770      	bx	lr

1a000360 <check_Sensor_Humedad_LEYENDO_tr5_tr5>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr5_tr5(const Compostera* handle)
{
	return handle->iface.evLecturaErronea_raised;
}
1a000360:	7cc0      	ldrb	r0, [r0, #19]
1a000362:	4770      	bx	lr

1a000364 <check_Sensor_Humedad_LEYENDO_tr6_tr6>:

static sc_boolean check_Sensor_Humedad_LEYENDO_tr6_tr6(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_LEYENDO_tev0_raised;
}
1a000364:	7ec0      	ldrb	r0, [r0, #27]
1a000366:	4770      	bx	lr

1a000368 <check_Sensor_Humedad_HUM_SUPERIOR_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_HUM_SUPERIOR_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_HUM_SUPERIOR_tev0_raised;
}
1a000368:	7f00      	ldrb	r0, [r0, #28]
1a00036a:	4770      	bx	lr

1a00036c <check_Sensor_Humedad_ESTABLE_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_ESTABLE_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_ESTABLE_tev0_raised;
}
1a00036c:	7f40      	ldrb	r0, [r0, #29]
1a00036e:	4770      	bx	lr

1a000370 <check_Sensor_Humedad_HUM_INFERIOR_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_HUM_INFERIOR_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_HUM_INFERIOR_tev0_raised;
}
1a000370:	7f80      	ldrb	r0, [r0, #30]
1a000372:	4770      	bx	lr

1a000374 <check_Sensor_Humedad_TEMP_SUPERIOR_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_TEMP_SUPERIOR_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_TEMP_SUPERIOR_tev0_raised;
}
1a000374:	7fc0      	ldrb	r0, [r0, #31]
1a000376:	4770      	bx	lr

1a000378 <check_Sensor_Humedad_SUPERIOR_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_SUPERIOR_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_SUPERIOR_tev0_raised;
}
1a000378:	f890 0020 	ldrb.w	r0, [r0, #32]
1a00037c:	4770      	bx	lr

1a00037e <check_Sensor_Humedad_ERROR_tr0_tr0>:

static sc_boolean check_Sensor_Humedad_ERROR_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Sensor_Humedad_ERROR_tev0_raised;
}
1a00037e:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
1a000382:	4770      	bx	lr

1a000384 <check_Humedad_HUMEDECIENDO_tr0_tr0>:

static sc_boolean check_Humedad_HUMEDECIENDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siHumedadEstable_raised;
}
1a000384:	7dc0      	ldrb	r0, [r0, #23]
1a000386:	4770      	bx	lr

1a000388 <check_Humedad_DESHUMEDECIENDO_tr0_tr0>:

static sc_boolean check_Humedad_DESHUMEDECIENDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siHumedadEstable_raised;
}
1a000388:	7dc0      	ldrb	r0, [r0, #23]
1a00038a:	4770      	bx	lr

1a00038c <check_Humedad_ESPERANDO_tr0_tr0>:

static sc_boolean check_Humedad_ESPERANDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siHumedadMayor60_raised;
}
1a00038c:	7e00      	ldrb	r0, [r0, #24]
1a00038e:	4770      	bx	lr

1a000390 <check_Humedad_ESPERANDO_tr1_tr1>:

static sc_boolean check_Humedad_ESPERANDO_tr1_tr1(const Compostera* handle)
{
	return handle->internal.siHumedadMenor40_raised;
}
1a000390:	7d80      	ldrb	r0, [r0, #22]
1a000392:	4770      	bx	lr

1a000394 <check_Temperatura_ENFRIANDO_tr0_tr0>:

static sc_boolean check_Temperatura_ENFRIANDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siTemperaturaEstable_raised;
}
1a000394:	7d40      	ldrb	r0, [r0, #21]
1a000396:	4770      	bx	lr

1a000398 <check_Temperatura_ENFRIANDO_tr1_tr1>:

static sc_boolean check_Temperatura_ENFRIANDO_tr1_tr1(const Compostera* handle)
{
	return handle->internal.siAberturaTapa_raised;
}
1a000398:	7e40      	ldrb	r0, [r0, #25]
1a00039a:	4770      	bx	lr

1a00039c <check_Temperatura_ESPERANDO_tr0_tr0>:

static sc_boolean check_Temperatura_ESPERANDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siTemperaturaMayor60_raised;
}
1a00039c:	7d00      	ldrb	r0, [r0, #20]
1a00039e:	4770      	bx	lr

1a0003a0 <check_Compostar_RELLENANDO_tr0_tr0>:

static sc_boolean check_Compostar_RELLENANDO_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Compostar_RELLENANDO_tev0_raised;
}
1a0003a0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
1a0003a4:	4770      	bx	lr

1a0003a6 <check_Compostar_RELLENANDO_tr1_tr1>:

static sc_boolean check_Compostar_RELLENANDO_tr1_tr1(const Compostera* handle)
{
	return handle->internal.siCerradoTapa_raised;
}
1a0003a6:	7e80      	ldrb	r0, [r0, #26]
1a0003a8:	4770      	bx	lr

1a0003aa <check_Compostar_ESPERANDO_tr0_tr0>:

static sc_boolean check_Compostar_ESPERANDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siAberturaTapa_raised;
}
1a0003aa:	7e40      	ldrb	r0, [r0, #25]
1a0003ac:	4770      	bx	lr

1a0003ae <check_Compostar_SONANDO_tr0_tr0>:

static sc_boolean check_Compostar_SONANDO_tr0_tr0(const Compostera* handle)
{
	return handle->internal.siCerradoTapa_raised;
}
1a0003ae:	7e80      	ldrb	r0, [r0, #26]
1a0003b0:	4770      	bx	lr

1a0003b2 <check_Compostar_MEZCLANDO_tr0_tr0>:

static sc_boolean check_Compostar_MEZCLANDO_tr0_tr0(const Compostera* handle)
{
	return handle->timeEvents.compostera_Compostar_MEZCLANDO_tev0_raised;
}
1a0003b2:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
1a0003b6:	4770      	bx	lr

1a0003b8 <check_Compostar_MEZCLANDO_tr1_tr1>:

static sc_boolean check_Compostar_MEZCLANDO_tr1_tr1(const Compostera* handle)
{
	return handle->internal.siAberturaTapa_raised;
}
1a0003b8:	7e40      	ldrb	r0, [r0, #25]
1a0003ba:	4770      	bx	lr

1a0003bc <enact_Sensor_Lid_CERRADO>:

/* Entry action for state 'CERRADO'. */
static void enact_Sensor_Lid_CERRADO(Compostera* handle)
{
	/* Entry action for state 'CERRADO'. */
	handle->internal.siCerradoTapa_raised = bool_true;
1a0003bc:	2301      	movs	r3, #1
1a0003be:	7683      	strb	r3, [r0, #26]
}
1a0003c0:	4770      	bx	lr

1a0003c2 <enact_Sensor_Lid_ABIERTO>:

/* Entry action for state 'ABIERTO'. */
static void enact_Sensor_Lid_ABIERTO(Compostera* handle)
{
	/* Entry action for state 'ABIERTO'. */
	handle->internal.siAberturaTapa_raised = bool_true;
1a0003c2:	2301      	movs	r3, #1
1a0003c4:	7643      	strb	r3, [r0, #25]
}
1a0003c6:	4770      	bx	lr

1a0003c8 <enseq_Sensor_Lid_CERRADO_default>:
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Compostar_MEZCLANDO_tev0_raised) );		
}

/* 'default' enter sequence for state CERRADO */
static void enseq_Sensor_Lid_CERRADO_default(Compostera* handle)
{
1a0003c8:	b510      	push	{r4, lr}
1a0003ca:	4604      	mov	r4, r0
	/* 'default' enter sequence for state CERRADO */
	enact_Sensor_Lid_CERRADO(handle);
1a0003cc:	f7ff fff6 	bl	1a0003bc <enact_Sensor_Lid_CERRADO>
	handle->stateConfVector[0] = Compostera_Sensor_Lid_CERRADO;
1a0003d0:	2301      	movs	r3, #1
1a0003d2:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0003d4:	2300      	movs	r3, #0
1a0003d6:	60a3      	str	r3, [r4, #8]
}
1a0003d8:	bd10      	pop	{r4, pc}

1a0003da <enseq_Sensor_Lid_ABIERTO_default>:

/* 'default' enter sequence for state ABIERTO */
static void enseq_Sensor_Lid_ABIERTO_default(Compostera* handle)
{
1a0003da:	b510      	push	{r4, lr}
1a0003dc:	4604      	mov	r4, r0
	/* 'default' enter sequence for state ABIERTO */
	enact_Sensor_Lid_ABIERTO(handle);
1a0003de:	f7ff fff0 	bl	1a0003c2 <enact_Sensor_Lid_ABIERTO>
	handle->stateConfVector[0] = Compostera_Sensor_Lid_ABIERTO;
1a0003e2:	2302      	movs	r3, #2
1a0003e4:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0003e6:	2300      	movs	r3, #0
1a0003e8:	60a3      	str	r3, [r4, #8]
}
1a0003ea:	bd10      	pop	{r4, pc}

1a0003ec <enseq_Sensor_Lid_INICIO_default>:

/* 'default' enter sequence for state INICIO */
static void enseq_Sensor_Lid_INICIO_default(Compostera* handle)
{
	/* 'default' enter sequence for state INICIO */
	handle->stateConfVector[0] = Compostera_Sensor_Lid_INICIO;
1a0003ec:	2303      	movs	r3, #3
1a0003ee:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003f0:	2300      	movs	r3, #0
1a0003f2:	6083      	str	r3, [r0, #8]
}
1a0003f4:	4770      	bx	lr

1a0003f6 <exseq_Sensor_Lid_CERRADO>:

/* Default exit sequence for state CERRADO */
static void exseq_Sensor_Lid_CERRADO(Compostera* handle)
{
	/* Default exit sequence for state CERRADO */
	handle->stateConfVector[0] = Compostera_last_state;
1a0003f6:	2300      	movs	r3, #0
1a0003f8:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003fa:	6083      	str	r3, [r0, #8]
}
1a0003fc:	4770      	bx	lr

1a0003fe <effect_Sensor_Lid_CERRADO_tr0>:
{
1a0003fe:	b510      	push	{r4, lr}
1a000400:	4604      	mov	r4, r0
	exseq_Sensor_Lid_CERRADO(handle);
1a000402:	f7ff fff8 	bl	1a0003f6 <exseq_Sensor_Lid_CERRADO>
	enseq_Sensor_Lid_ABIERTO_default(handle);
1a000406:	4620      	mov	r0, r4
1a000408:	f7ff ffe7 	bl	1a0003da <enseq_Sensor_Lid_ABIERTO_default>
}
1a00040c:	bd10      	pop	{r4, pc}

1a00040e <exseq_Sensor_Lid_ABIERTO>:

/* Default exit sequence for state ABIERTO */
static void exseq_Sensor_Lid_ABIERTO(Compostera* handle)
{
	/* Default exit sequence for state ABIERTO */
	handle->stateConfVector[0] = Compostera_last_state;
1a00040e:	2300      	movs	r3, #0
1a000410:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000412:	6083      	str	r3, [r0, #8]
}
1a000414:	4770      	bx	lr

1a000416 <effect_Sensor_Lid_ABIERTO_tr0>:
{
1a000416:	b510      	push	{r4, lr}
1a000418:	4604      	mov	r4, r0
	exseq_Sensor_Lid_ABIERTO(handle);
1a00041a:	f7ff fff8 	bl	1a00040e <exseq_Sensor_Lid_ABIERTO>
	enseq_Sensor_Lid_CERRADO_default(handle);
1a00041e:	4620      	mov	r0, r4
1a000420:	f7ff ffd2 	bl	1a0003c8 <enseq_Sensor_Lid_CERRADO_default>
}
1a000424:	bd10      	pop	{r4, pc}

1a000426 <exseq_Sensor_Lid_INICIO>:

/* Default exit sequence for state INICIO */
static void exseq_Sensor_Lid_INICIO(Compostera* handle)
{
	/* Default exit sequence for state INICIO */
	handle->stateConfVector[0] = Compostera_last_state;
1a000426:	2300      	movs	r3, #0
1a000428:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00042a:	6083      	str	r3, [r0, #8]
}
1a00042c:	4770      	bx	lr

1a00042e <effect_Sensor_Lid_INICIO_tr0>:
{
1a00042e:	b510      	push	{r4, lr}
1a000430:	4604      	mov	r4, r0
	exseq_Sensor_Lid_INICIO(handle);
1a000432:	f7ff fff8 	bl	1a000426 <exseq_Sensor_Lid_INICIO>
	enseq_Sensor_Lid_CERRADO_default(handle);
1a000436:	4620      	mov	r0, r4
1a000438:	f7ff ffc6 	bl	1a0003c8 <enseq_Sensor_Lid_CERRADO_default>
}
1a00043c:	bd10      	pop	{r4, pc}

1a00043e <effect_Sensor_Lid_INICIO_tr1>:
{
1a00043e:	b510      	push	{r4, lr}
1a000440:	4604      	mov	r4, r0
	exseq_Sensor_Lid_INICIO(handle);
1a000442:	f7ff fff0 	bl	1a000426 <exseq_Sensor_Lid_INICIO>
	enseq_Sensor_Lid_ABIERTO_default(handle);
1a000446:	4620      	mov	r0, r4
1a000448:	f7ff ffc7 	bl	1a0003da <enseq_Sensor_Lid_ABIERTO_default>
}
1a00044c:	bd10      	pop	{r4, pc}

1a00044e <exseq_Humedad_HUMEDECIENDO>:

/* Default exit sequence for state HUMEDECIENDO */
static void exseq_Humedad_HUMEDECIENDO(Compostera* handle)
{
	/* Default exit sequence for state HUMEDECIENDO */
	handle->stateConfVector[2] = Compostera_last_state;
1a00044e:	2300      	movs	r3, #0
1a000450:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000452:	2302      	movs	r3, #2
1a000454:	6083      	str	r3, [r0, #8]
}
1a000456:	4770      	bx	lr

1a000458 <exseq_Humedad_DESHUMEDECIENDO>:

/* Default exit sequence for state DESHUMEDECIENDO */
static void exseq_Humedad_DESHUMEDECIENDO(Compostera* handle)
{
	/* Default exit sequence for state DESHUMEDECIENDO */
	handle->stateConfVector[2] = Compostera_last_state;
1a000458:	2300      	movs	r3, #0
1a00045a:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a00045c:	2302      	movs	r3, #2
1a00045e:	6083      	str	r3, [r0, #8]
}
1a000460:	4770      	bx	lr

1a000462 <exseq_Humedad_ESPERANDO>:

/* Default exit sequence for state ESPERANDO */
static void exseq_Humedad_ESPERANDO(Compostera* handle)
{
	/* Default exit sequence for state ESPERANDO */
	handle->stateConfVector[2] = Compostera_last_state;
1a000462:	2300      	movs	r3, #0
1a000464:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000466:	2302      	movs	r3, #2
1a000468:	6083      	str	r3, [r0, #8]
}
1a00046a:	4770      	bx	lr

1a00046c <exseq_Temperatura_ENFRIANDO>:

/* Default exit sequence for state ENFRIANDO */
static void exseq_Temperatura_ENFRIANDO(Compostera* handle)
{
	/* Default exit sequence for state ENFRIANDO */
	handle->stateConfVector[3] = Compostera_last_state;
1a00046c:	2300      	movs	r3, #0
1a00046e:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000470:	2303      	movs	r3, #3
1a000472:	6083      	str	r3, [r0, #8]
}
1a000474:	4770      	bx	lr

1a000476 <exseq_Temperatura_ESPERANDO>:

/* Default exit sequence for state ESPERANDO */
static void exseq_Temperatura_ESPERANDO(Compostera* handle)
{
	/* Default exit sequence for state ESPERANDO */
	handle->stateConfVector[3] = Compostera_last_state;
1a000476:	2300      	movs	r3, #0
1a000478:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00047a:	2303      	movs	r3, #3
1a00047c:	6083      	str	r3, [r0, #8]
}
1a00047e:	4770      	bx	lr

1a000480 <exseq_Compostar_ESPERANDO>:

/* Default exit sequence for state ESPERANDO */
static void exseq_Compostar_ESPERANDO(Compostera* handle)
{
	/* Default exit sequence for state ESPERANDO */
	handle->stateConfVector[4] = Compostera_last_state;
1a000480:	2300      	movs	r3, #0
1a000482:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a000484:	2304      	movs	r3, #4
1a000486:	6083      	str	r3, [r0, #8]
}
1a000488:	4770      	bx	lr

1a00048a <exseq_Compostar_SONANDO>:

/* Default exit sequence for state SONANDO */
static void exseq_Compostar_SONANDO(Compostera* handle)
{
	/* Default exit sequence for state SONANDO */
	handle->stateConfVector[4] = Compostera_last_state;
1a00048a:	2300      	movs	r3, #0
1a00048c:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a00048e:	2304      	movs	r3, #4
1a000490:	6083      	str	r3, [r0, #8]
}
1a000492:	4770      	bx	lr

1a000494 <react_Sensor_Lid_CERRADO>:
	}
}

/* The reactions of state CERRADO. */
static void react_Sensor_Lid_CERRADO(Compostera* handle)
{
1a000494:	b510      	push	{r4, lr}
1a000496:	4604      	mov	r4, r0
	/* The reactions of state CERRADO. */
	if (check_Sensor_Lid_CERRADO_tr0_tr0(handle) == bool_true)
1a000498:	f7ff ff50 	bl	1a00033c <check_Sensor_Lid_CERRADO_tr0_tr0>
1a00049c:	b900      	cbnz	r0, 1a0004a0 <react_Sensor_Lid_CERRADO+0xc>
	{ 
		effect_Sensor_Lid_CERRADO_tr0(handle);
	} 
}
1a00049e:	bd10      	pop	{r4, pc}
		effect_Sensor_Lid_CERRADO_tr0(handle);
1a0004a0:	4620      	mov	r0, r4
1a0004a2:	f7ff ffac 	bl	1a0003fe <effect_Sensor_Lid_CERRADO_tr0>
}
1a0004a6:	e7fa      	b.n	1a00049e <react_Sensor_Lid_CERRADO+0xa>

1a0004a8 <react_Sensor_Lid_ABIERTO>:

/* The reactions of state ABIERTO. */
static void react_Sensor_Lid_ABIERTO(Compostera* handle)
{
1a0004a8:	b510      	push	{r4, lr}
1a0004aa:	4604      	mov	r4, r0
	/* The reactions of state ABIERTO. */
	if (check_Sensor_Lid_ABIERTO_tr0_tr0(handle) == bool_true)
1a0004ac:	f7ff ff48 	bl	1a000340 <check_Sensor_Lid_ABIERTO_tr0_tr0>
1a0004b0:	b900      	cbnz	r0, 1a0004b4 <react_Sensor_Lid_ABIERTO+0xc>
	{ 
		effect_Sensor_Lid_ABIERTO_tr0(handle);
	} 
}
1a0004b2:	bd10      	pop	{r4, pc}
		effect_Sensor_Lid_ABIERTO_tr0(handle);
1a0004b4:	4620      	mov	r0, r4
1a0004b6:	f7ff ffae 	bl	1a000416 <effect_Sensor_Lid_ABIERTO_tr0>
}
1a0004ba:	e7fa      	b.n	1a0004b2 <react_Sensor_Lid_ABIERTO+0xa>

1a0004bc <react_Sensor_Lid_INICIO>:

/* The reactions of state INICIO. */
static void react_Sensor_Lid_INICIO(Compostera* handle)
{
1a0004bc:	b510      	push	{r4, lr}
1a0004be:	4604      	mov	r4, r0
	/* The reactions of state INICIO. */
	if (check_Sensor_Lid_INICIO_tr0_tr0(handle) == bool_true)
1a0004c0:	f7ff ff40 	bl	1a000344 <check_Sensor_Lid_INICIO_tr0_tr0>
1a0004c4:	b920      	cbnz	r0, 1a0004d0 <react_Sensor_Lid_INICIO+0x14>
	{ 
		effect_Sensor_Lid_INICIO_tr0(handle);
	}  else
	{
		if (check_Sensor_Lid_INICIO_tr1_tr1(handle) == bool_true)
1a0004c6:	4620      	mov	r0, r4
1a0004c8:	f7ff ff3e 	bl	1a000348 <check_Sensor_Lid_INICIO_tr1_tr1>
1a0004cc:	b920      	cbnz	r0, 1a0004d8 <react_Sensor_Lid_INICIO+0x1c>
		{ 
			effect_Sensor_Lid_INICIO_tr1(handle);
		} 
	}
}
1a0004ce:	bd10      	pop	{r4, pc}
		effect_Sensor_Lid_INICIO_tr0(handle);
1a0004d0:	4620      	mov	r0, r4
1a0004d2:	f7ff ffac 	bl	1a00042e <effect_Sensor_Lid_INICIO_tr0>
1a0004d6:	e7fa      	b.n	1a0004ce <react_Sensor_Lid_INICIO+0x12>
			effect_Sensor_Lid_INICIO_tr1(handle);
1a0004d8:	4620      	mov	r0, r4
1a0004da:	f7ff ffb0 	bl	1a00043e <effect_Sensor_Lid_INICIO_tr1>
}
1a0004de:	e7f6      	b.n	1a0004ce <react_Sensor_Lid_INICIO+0x12>

1a0004e0 <react_Sensor_Lid__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_Sensor_Lid__entry_Default(Compostera* handle)
{
1a0004e0:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Sensor_Lid_INICIO_default(handle);
1a0004e2:	f7ff ff83 	bl	1a0003ec <enseq_Sensor_Lid_INICIO_default>
}
1a0004e6:	bd08      	pop	{r3, pc}

1a0004e8 <enseq_Sensor_Lid_default>:
{
1a0004e8:	b508      	push	{r3, lr}
	react_Sensor_Lid__entry_Default(handle);
1a0004ea:	f7ff fff9 	bl	1a0004e0 <react_Sensor_Lid__entry_Default>
}
1a0004ee:	bd08      	pop	{r3, pc}

1a0004f0 <enact_Sensor_Humedad_HUM_SUPERIOR>:
{
1a0004f0:	b510      	push	{r4, lr}
1a0004f2:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_HUM_SUPERIOR_tev0_raised) , 2 * 1000, bool_false);
1a0004f4:	2300      	movs	r3, #0
1a0004f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a0004fa:	f100 011c 	add.w	r1, r0, #28
1a0004fe:	f000 fc8d 	bl	1a000e1c <compostera_setTimer>
	handle->internal.siHumedadMayor60_raised = bool_true;
1a000502:	2301      	movs	r3, #1
1a000504:	7623      	strb	r3, [r4, #24]
}
1a000506:	bd10      	pop	{r4, pc}

1a000508 <enseq_Sensor_Humedad_HUM_SUPERIOR_default>:
{
1a000508:	b510      	push	{r4, lr}
1a00050a:	4604      	mov	r4, r0
	enact_Sensor_Humedad_HUM_SUPERIOR(handle);
1a00050c:	f7ff fff0 	bl	1a0004f0 <enact_Sensor_Humedad_HUM_SUPERIOR>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_HUM_SUPERIOR;
1a000510:	2305      	movs	r3, #5
1a000512:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000514:	2301      	movs	r3, #1
1a000516:	60a3      	str	r3, [r4, #8]
}
1a000518:	bd10      	pop	{r4, pc}

1a00051a <enact_Sensor_Humedad_HUM_INFERIOR>:
{
1a00051a:	b510      	push	{r4, lr}
1a00051c:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_HUM_INFERIOR_tev0_raised) , 2 * 1000, bool_false);
1a00051e:	2300      	movs	r3, #0
1a000520:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a000524:	f100 011e 	add.w	r1, r0, #30
1a000528:	f000 fc78 	bl	1a000e1c <compostera_setTimer>
	handle->internal.siHumedadMenor40_raised = bool_true;
1a00052c:	2301      	movs	r3, #1
1a00052e:	75a3      	strb	r3, [r4, #22]
}
1a000530:	bd10      	pop	{r4, pc}

1a000532 <enseq_Sensor_Humedad_HUM_INFERIOR_default>:
{
1a000532:	b510      	push	{r4, lr}
1a000534:	4604      	mov	r4, r0
	enact_Sensor_Humedad_HUM_INFERIOR(handle);
1a000536:	f7ff fff0 	bl	1a00051a <enact_Sensor_Humedad_HUM_INFERIOR>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_HUM_INFERIOR;
1a00053a:	2307      	movs	r3, #7
1a00053c:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00053e:	2301      	movs	r3, #1
1a000540:	60a3      	str	r3, [r4, #8]
}
1a000542:	bd10      	pop	{r4, pc}

1a000544 <enact_Sensor_Humedad_ESTABLE>:
{
1a000544:	b510      	push	{r4, lr}
1a000546:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_ESTABLE_tev0_raised) , 2 * 1000, bool_false);
1a000548:	2300      	movs	r3, #0
1a00054a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a00054e:	f100 011d 	add.w	r1, r0, #29
1a000552:	f000 fc63 	bl	1a000e1c <compostera_setTimer>
	handle->internal.siHumedadEstable_raised = bool_true;
1a000556:	2301      	movs	r3, #1
1a000558:	75e3      	strb	r3, [r4, #23]
}
1a00055a:	bd10      	pop	{r4, pc}

1a00055c <enseq_Sensor_Humedad_ESTABLE_default>:
{
1a00055c:	b510      	push	{r4, lr}
1a00055e:	4604      	mov	r4, r0
	enact_Sensor_Humedad_ESTABLE(handle);
1a000560:	f7ff fff0 	bl	1a000544 <enact_Sensor_Humedad_ESTABLE>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_ESTABLE;
1a000564:	2306      	movs	r3, #6
1a000566:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000568:	2301      	movs	r3, #1
1a00056a:	60a3      	str	r3, [r4, #8]
}
1a00056c:	bd10      	pop	{r4, pc}

1a00056e <enact_Sensor_Humedad_TEMP_SUPERIOR>:
{
1a00056e:	b510      	push	{r4, lr}
1a000570:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_TEMP_SUPERIOR_tev0_raised) , 2 * 1000, bool_false);
1a000572:	2300      	movs	r3, #0
1a000574:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a000578:	f100 011f 	add.w	r1, r0, #31
1a00057c:	f000 fc4e 	bl	1a000e1c <compostera_setTimer>
	handle->internal.siTemperaturaMayor60_raised = bool_true;
1a000580:	2301      	movs	r3, #1
1a000582:	7523      	strb	r3, [r4, #20]
}
1a000584:	bd10      	pop	{r4, pc}

1a000586 <enseq_Sensor_Humedad_TEMP_SUPERIOR_default>:
{
1a000586:	b510      	push	{r4, lr}
1a000588:	4604      	mov	r4, r0
	enact_Sensor_Humedad_TEMP_SUPERIOR(handle);
1a00058a:	f7ff fff0 	bl	1a00056e <enact_Sensor_Humedad_TEMP_SUPERIOR>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_TEMP_SUPERIOR;
1a00058e:	2308      	movs	r3, #8
1a000590:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000592:	2301      	movs	r3, #1
1a000594:	60a3      	str	r3, [r4, #8]
}
1a000596:	bd10      	pop	{r4, pc}

1a000598 <enact_Sensor_Humedad_SUPERIOR>:
{
1a000598:	b510      	push	{r4, lr}
1a00059a:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_SUPERIOR_tev0_raised) , 2 * 1000, bool_false);
1a00059c:	2300      	movs	r3, #0
1a00059e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a0005a2:	f100 0120 	add.w	r1, r0, #32
1a0005a6:	f000 fc39 	bl	1a000e1c <compostera_setTimer>
	handle->internal.siHumedadMayor60_raised = bool_true;
1a0005aa:	2301      	movs	r3, #1
1a0005ac:	7623      	strb	r3, [r4, #24]
	handle->internal.siTemperaturaMayor60_raised = bool_true;
1a0005ae:	7523      	strb	r3, [r4, #20]
}
1a0005b0:	bd10      	pop	{r4, pc}

1a0005b2 <enseq_Sensor_Humedad_SUPERIOR_default>:
{
1a0005b2:	b510      	push	{r4, lr}
1a0005b4:	4604      	mov	r4, r0
	enact_Sensor_Humedad_SUPERIOR(handle);
1a0005b6:	f7ff ffef 	bl	1a000598 <enact_Sensor_Humedad_SUPERIOR>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_SUPERIOR;
1a0005ba:	2309      	movs	r3, #9
1a0005bc:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a0005be:	2301      	movs	r3, #1
1a0005c0:	60a3      	str	r3, [r4, #8]
}
1a0005c2:	bd10      	pop	{r4, pc}

1a0005c4 <enact_Sensor_Humedad_LEYENDO>:
{
1a0005c4:	b510      	push	{r4, lr}
1a0005c6:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_LEYENDO_tev0_raised) , 2 * 1000, bool_false);
1a0005c8:	2300      	movs	r3, #0
1a0005ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a0005ce:	f100 011b 	add.w	r1, r0, #27
1a0005d2:	f000 fc23 	bl	1a000e1c <compostera_setTimer>
	composteraIface_readParameters(handle);
1a0005d6:	4620      	mov	r0, r4
1a0005d8:	f000 fc4e 	bl	1a000e78 <composteraIface_readParameters>
}
1a0005dc:	bd10      	pop	{r4, pc}

1a0005de <enseq_Sensor_Humedad_LEYENDO_default>:
{
1a0005de:	b510      	push	{r4, lr}
1a0005e0:	4604      	mov	r4, r0
	enact_Sensor_Humedad_LEYENDO(handle);
1a0005e2:	f7ff ffef 	bl	1a0005c4 <enact_Sensor_Humedad_LEYENDO>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_LEYENDO;
1a0005e6:	2304      	movs	r3, #4
1a0005e8:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a0005ea:	2301      	movs	r3, #1
1a0005ec:	60a3      	str	r3, [r4, #8]
}
1a0005ee:	bd10      	pop	{r4, pc}

1a0005f0 <react_Sensor_Humedad__entry_Default>:

/* Default react sequence for initial entry  */
static void react_Sensor_Humedad__entry_Default(Compostera* handle)
{
1a0005f0:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a0005f2:	f7ff fff4 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a0005f6:	bd08      	pop	{r3, pc}

1a0005f8 <enseq_Sensor_Humedad_default>:
{
1a0005f8:	b508      	push	{r3, lr}
	react_Sensor_Humedad__entry_Default(handle);
1a0005fa:	f7ff fff9 	bl	1a0005f0 <react_Sensor_Humedad__entry_Default>
}
1a0005fe:	bd08      	pop	{r3, pc}

1a000600 <enact_Compostar_ESPERANDO>:
{
1a000600:	b508      	push	{r3, lr}
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED2, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a000602:	2200      	movs	r2, #0
1a000604:	2104      	movs	r1, #4
1a000606:	f000 fc01 	bl	1a000e0c <composteraIface_opLED>
}
1a00060a:	bd08      	pop	{r3, pc}

1a00060c <enseq_Compostar_ESPERANDO_default>:
{
1a00060c:	b510      	push	{r4, lr}
1a00060e:	4604      	mov	r4, r0
	enact_Compostar_ESPERANDO(handle);
1a000610:	f7ff fff6 	bl	1a000600 <enact_Compostar_ESPERANDO>
	handle->stateConfVector[4] = Compostera_Compostar_ESPERANDO;
1a000614:	2311      	movs	r3, #17
1a000616:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a000618:	2304      	movs	r3, #4
1a00061a:	60a3      	str	r3, [r4, #8]
}
1a00061c:	bd10      	pop	{r4, pc}

1a00061e <react_Compostar__entry_Default>:
	enseq_Temperatura_ESPERANDO_default(handle);
}

/* Default react sequence for initial entry  */
static void react_Compostar__entry_Default(Compostera* handle)
{
1a00061e:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Compostar_ESPERANDO_default(handle);
1a000620:	f7ff fff4 	bl	1a00060c <enseq_Compostar_ESPERANDO_default>
}
1a000624:	bd08      	pop	{r3, pc}

1a000626 <enseq_Compostar_default>:
{
1a000626:	b508      	push	{r3, lr}
	react_Compostar__entry_Default(handle);
1a000628:	f7ff fff9 	bl	1a00061e <react_Compostar__entry_Default>
}
1a00062c:	bd08      	pop	{r3, pc}

1a00062e <enact_Sensor_Humedad_ERROR>:
{
1a00062e:	b510      	push	{r4, lr}
1a000630:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_ERROR_tev0_raised) , 2 * 1000, bool_false);
1a000632:	2300      	movs	r3, #0
1a000634:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a000638:	f100 0121 	add.w	r1, r0, #33	; 0x21
1a00063c:	f000 fbee 	bl	1a000e1c <compostera_setTimer>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LEDR, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000640:	2201      	movs	r2, #1
1a000642:	2100      	movs	r1, #0
1a000644:	4620      	mov	r0, r4
1a000646:	f000 fbe1 	bl	1a000e0c <composteraIface_opLED>
}
1a00064a:	bd10      	pop	{r4, pc}

1a00064c <enseq_Sensor_Humedad_ERROR_default>:
{
1a00064c:	b510      	push	{r4, lr}
1a00064e:	4604      	mov	r4, r0
	enact_Sensor_Humedad_ERROR(handle);
1a000650:	f7ff ffed 	bl	1a00062e <enact_Sensor_Humedad_ERROR>
	handle->stateConfVector[1] = Compostera_Sensor_Humedad_ERROR;
1a000654:	230a      	movs	r3, #10
1a000656:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000658:	2301      	movs	r3, #1
1a00065a:	60a3      	str	r3, [r4, #8]
}
1a00065c:	bd10      	pop	{r4, pc}

1a00065e <enact_Compostar_SONANDO>:
{
1a00065e:	b510      	push	{r4, lr}
1a000660:	4604      	mov	r4, r0
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED1, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000662:	2201      	movs	r2, #1
1a000664:	2103      	movs	r1, #3
1a000666:	f000 fbd1 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED3, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a00066a:	2200      	movs	r2, #0
1a00066c:	2105      	movs	r1, #5
1a00066e:	4620      	mov	r0, r4
1a000670:	f000 fbcc 	bl	1a000e0c <composteraIface_opLED>
}
1a000674:	bd10      	pop	{r4, pc}

1a000676 <enseq_Compostar_SONANDO_default>:
{
1a000676:	b510      	push	{r4, lr}
1a000678:	4604      	mov	r4, r0
	enact_Compostar_SONANDO(handle);
1a00067a:	f7ff fff0 	bl	1a00065e <enact_Compostar_SONANDO>
	handle->stateConfVector[4] = Compostera_Compostar_SONANDO;
1a00067e:	2312      	movs	r3, #18
1a000680:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a000682:	2304      	movs	r3, #4
1a000684:	60a3      	str	r3, [r4, #8]
}
1a000686:	bd10      	pop	{r4, pc}

1a000688 <enact_Compostar_MEZCLANDO>:
{
1a000688:	b510      	push	{r4, lr}
1a00068a:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Compostar_MEZCLANDO_tev0_raised) , 2 * 1000, bool_false);
1a00068c:	2300      	movs	r3, #0
1a00068e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a000692:	f100 0123 	add.w	r1, r0, #35	; 0x23
1a000696:	f000 fbc1 	bl	1a000e1c <compostera_setTimer>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED2, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a00069a:	2201      	movs	r2, #1
1a00069c:	2104      	movs	r1, #4
1a00069e:	4620      	mov	r0, r4
1a0006a0:	f000 fbb4 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED3, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a0006a4:	2200      	movs	r2, #0
1a0006a6:	2105      	movs	r1, #5
1a0006a8:	4620      	mov	r0, r4
1a0006aa:	f000 fbaf 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED1, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a0006ae:	2200      	movs	r2, #0
1a0006b0:	2103      	movs	r1, #3
1a0006b2:	4620      	mov	r0, r4
1a0006b4:	f000 fbaa 	bl	1a000e0c <composteraIface_opLED>
}
1a0006b8:	bd10      	pop	{r4, pc}

1a0006ba <enseq_Compostar_MEZCLANDO_default>:
{
1a0006ba:	b510      	push	{r4, lr}
1a0006bc:	4604      	mov	r4, r0
	enact_Compostar_MEZCLANDO(handle);
1a0006be:	f7ff ffe3 	bl	1a000688 <enact_Compostar_MEZCLANDO>
	handle->stateConfVector[4] = Compostera_Compostar_MEZCLANDO;
1a0006c2:	2313      	movs	r3, #19
1a0006c4:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a0006c6:	2304      	movs	r3, #4
1a0006c8:	60a3      	str	r3, [r4, #8]
}
1a0006ca:	bd10      	pop	{r4, pc}

1a0006cc <effect_Compostar_SONANDO_tr0>:
{
1a0006cc:	b510      	push	{r4, lr}
1a0006ce:	4604      	mov	r4, r0
	exseq_Compostar_SONANDO(handle);
1a0006d0:	f7ff fedb 	bl	1a00048a <exseq_Compostar_SONANDO>
	enseq_Compostar_MEZCLANDO_default(handle);
1a0006d4:	4620      	mov	r0, r4
1a0006d6:	f7ff fff0 	bl	1a0006ba <enseq_Compostar_MEZCLANDO_default>
}
1a0006da:	bd10      	pop	{r4, pc}

1a0006dc <react_Compostar_SONANDO>:
{
1a0006dc:	b510      	push	{r4, lr}
1a0006de:	4604      	mov	r4, r0
	if (check_Compostar_SONANDO_tr0_tr0(handle) == bool_true)
1a0006e0:	f7ff fe65 	bl	1a0003ae <check_Compostar_SONANDO_tr0_tr0>
1a0006e4:	b900      	cbnz	r0, 1a0006e8 <react_Compostar_SONANDO+0xc>
}
1a0006e6:	bd10      	pop	{r4, pc}
		effect_Compostar_SONANDO_tr0(handle);
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	f7ff ffef 	bl	1a0006cc <effect_Compostar_SONANDO_tr0>
}
1a0006ee:	e7fa      	b.n	1a0006e6 <react_Compostar_SONANDO+0xa>

1a0006f0 <enact_Compostar_RELLENANDO>:
{
1a0006f0:	b510      	push	{r4, lr}
1a0006f2:	4604      	mov	r4, r0
	compostera_setTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Compostar_RELLENANDO_tev0_raised) , 1 * 1000, bool_false);
1a0006f4:	2300      	movs	r3, #0
1a0006f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0006fa:	f100 0122 	add.w	r1, r0, #34	; 0x22
1a0006fe:	f000 fb8d 	bl	1a000e1c <compostera_setTimer>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED3, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000702:	2201      	movs	r2, #1
1a000704:	2105      	movs	r1, #5
1a000706:	4620      	mov	r0, r4
1a000708:	f000 fb80 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED2, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a00070c:	2200      	movs	r2, #0
1a00070e:	2104      	movs	r1, #4
1a000710:	4620      	mov	r0, r4
1a000712:	f000 fb7b 	bl	1a000e0c <composteraIface_opLED>
}
1a000716:	bd10      	pop	{r4, pc}

1a000718 <enseq_Compostar_RELLENANDO_default>:
{
1a000718:	b510      	push	{r4, lr}
1a00071a:	4604      	mov	r4, r0
	enact_Compostar_RELLENANDO(handle);
1a00071c:	f7ff ffe8 	bl	1a0006f0 <enact_Compostar_RELLENANDO>
	handle->stateConfVector[4] = Compostera_Compostar_RELLENANDO;
1a000720:	2310      	movs	r3, #16
1a000722:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a000724:	2304      	movs	r3, #4
1a000726:	60a3      	str	r3, [r4, #8]
}
1a000728:	bd10      	pop	{r4, pc}

1a00072a <effect_Compostar_ESPERANDO_tr0>:
{
1a00072a:	b510      	push	{r4, lr}
1a00072c:	4604      	mov	r4, r0
	exseq_Compostar_ESPERANDO(handle);
1a00072e:	f7ff fea7 	bl	1a000480 <exseq_Compostar_ESPERANDO>
	enseq_Compostar_RELLENANDO_default(handle);
1a000732:	4620      	mov	r0, r4
1a000734:	f7ff fff0 	bl	1a000718 <enseq_Compostar_RELLENANDO_default>
}
1a000738:	bd10      	pop	{r4, pc}

1a00073a <react_Compostar_ESPERANDO>:
{
1a00073a:	b510      	push	{r4, lr}
1a00073c:	4604      	mov	r4, r0
	if (check_Compostar_ESPERANDO_tr0_tr0(handle) == bool_true)
1a00073e:	f7ff fe34 	bl	1a0003aa <check_Compostar_ESPERANDO_tr0_tr0>
1a000742:	b900      	cbnz	r0, 1a000746 <react_Compostar_ESPERANDO+0xc>
}
1a000744:	bd10      	pop	{r4, pc}
		effect_Compostar_ESPERANDO_tr0(handle);
1a000746:	4620      	mov	r0, r4
1a000748:	f7ff ffef 	bl	1a00072a <effect_Compostar_ESPERANDO_tr0>
}
1a00074c:	e7fa      	b.n	1a000744 <react_Compostar_ESPERANDO+0xa>

1a00074e <enact_Humedad_ESPERANDO>:
{
1a00074e:	b510      	push	{r4, lr}
1a000750:	4604      	mov	r4, r0
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED2, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a000752:	2200      	movs	r2, #0
1a000754:	2104      	movs	r1, #4
1a000756:	f000 fb59 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED3, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a00075a:	2200      	movs	r2, #0
1a00075c:	2105      	movs	r1, #5
1a00075e:	4620      	mov	r0, r4
1a000760:	f000 fb54 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_stop_wetting(handle);
1a000764:	4620      	mov	r0, r4
1a000766:	f000 fc27 	bl	1a000fb8 <composteraIface_stop_wetting>
	composteraIface_stop_drying(handle);
1a00076a:	4620      	mov	r0, r4
1a00076c:	f000 fc30 	bl	1a000fd0 <composteraIface_stop_drying>
}
1a000770:	bd10      	pop	{r4, pc}

1a000772 <enseq_Humedad_ESPERANDO_default>:
{
1a000772:	b510      	push	{r4, lr}
1a000774:	4604      	mov	r4, r0
	enact_Humedad_ESPERANDO(handle);
1a000776:	f7ff ffea 	bl	1a00074e <enact_Humedad_ESPERANDO>
	handle->stateConfVector[2] = Compostera_Humedad_ESPERANDO;
1a00077a:	230d      	movs	r3, #13
1a00077c:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a00077e:	2302      	movs	r3, #2
1a000780:	60a3      	str	r3, [r4, #8]
}
1a000782:	bd10      	pop	{r4, pc}

1a000784 <react_Humedad__entry_Default>:
{
1a000784:	b508      	push	{r3, lr}
	enseq_Humedad_ESPERANDO_default(handle);
1a000786:	f7ff fff4 	bl	1a000772 <enseq_Humedad_ESPERANDO_default>
}
1a00078a:	bd08      	pop	{r3, pc}

1a00078c <enseq_Humedad_default>:
{
1a00078c:	b508      	push	{r3, lr}
	react_Humedad__entry_Default(handle);
1a00078e:	f7ff fff9 	bl	1a000784 <react_Humedad__entry_Default>
}
1a000792:	bd08      	pop	{r3, pc}

1a000794 <effect_Humedad_HUMEDECIENDO_tr0>:
{
1a000794:	b510      	push	{r4, lr}
1a000796:	4604      	mov	r4, r0
	exseq_Humedad_HUMEDECIENDO(handle);
1a000798:	f7ff fe59 	bl	1a00044e <exseq_Humedad_HUMEDECIENDO>
	enseq_Humedad_ESPERANDO_default(handle);
1a00079c:	4620      	mov	r0, r4
1a00079e:	f7ff ffe8 	bl	1a000772 <enseq_Humedad_ESPERANDO_default>
}
1a0007a2:	bd10      	pop	{r4, pc}

1a0007a4 <react_Humedad_HUMEDECIENDO>:
{
1a0007a4:	b510      	push	{r4, lr}
1a0007a6:	4604      	mov	r4, r0
	if (check_Humedad_HUMEDECIENDO_tr0_tr0(handle) == bool_true)
1a0007a8:	f7ff fdec 	bl	1a000384 <check_Humedad_HUMEDECIENDO_tr0_tr0>
1a0007ac:	b900      	cbnz	r0, 1a0007b0 <react_Humedad_HUMEDECIENDO+0xc>
}
1a0007ae:	bd10      	pop	{r4, pc}
		effect_Humedad_HUMEDECIENDO_tr0(handle);
1a0007b0:	4620      	mov	r0, r4
1a0007b2:	f7ff ffef 	bl	1a000794 <effect_Humedad_HUMEDECIENDO_tr0>
}
1a0007b6:	e7fa      	b.n	1a0007ae <react_Humedad_HUMEDECIENDO+0xa>

1a0007b8 <effect_Humedad_DESHUMEDECIENDO_tr0>:
{
1a0007b8:	b510      	push	{r4, lr}
1a0007ba:	4604      	mov	r4, r0
	exseq_Humedad_DESHUMEDECIENDO(handle);
1a0007bc:	f7ff fe4c 	bl	1a000458 <exseq_Humedad_DESHUMEDECIENDO>
	enseq_Humedad_ESPERANDO_default(handle);
1a0007c0:	4620      	mov	r0, r4
1a0007c2:	f7ff ffd6 	bl	1a000772 <enseq_Humedad_ESPERANDO_default>
}
1a0007c6:	bd10      	pop	{r4, pc}

1a0007c8 <react_Humedad_DESHUMEDECIENDO>:
{
1a0007c8:	b510      	push	{r4, lr}
1a0007ca:	4604      	mov	r4, r0
	if (check_Humedad_DESHUMEDECIENDO_tr0_tr0(handle) == bool_true)
1a0007cc:	f7ff fddc 	bl	1a000388 <check_Humedad_DESHUMEDECIENDO_tr0_tr0>
1a0007d0:	b900      	cbnz	r0, 1a0007d4 <react_Humedad_DESHUMEDECIENDO+0xc>
}
1a0007d2:	bd10      	pop	{r4, pc}
		effect_Humedad_DESHUMEDECIENDO_tr0(handle);
1a0007d4:	4620      	mov	r0, r4
1a0007d6:	f7ff ffef 	bl	1a0007b8 <effect_Humedad_DESHUMEDECIENDO_tr0>
}
1a0007da:	e7fa      	b.n	1a0007d2 <react_Humedad_DESHUMEDECIENDO+0xa>

1a0007dc <enact_Temperatura_ESPERANDO>:
{
1a0007dc:	b510      	push	{r4, lr}
1a0007de:	4604      	mov	r4, r0
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED1, COMPOSTERA_COMPOSTERAIFACE_LED_OFF);
1a0007e0:	2200      	movs	r2, #0
1a0007e2:	2103      	movs	r1, #3
1a0007e4:	f000 fb12 	bl	1a000e0c <composteraIface_opLED>
	composteraIface_stop_cooling(handle);
1a0007e8:	4620      	mov	r0, r4
1a0007ea:	f000 fbeb 	bl	1a000fc4 <composteraIface_stop_cooling>
}
1a0007ee:	bd10      	pop	{r4, pc}

1a0007f0 <enseq_Temperatura_ESPERANDO_default>:
{
1a0007f0:	b510      	push	{r4, lr}
1a0007f2:	4604      	mov	r4, r0
	enact_Temperatura_ESPERANDO(handle);
1a0007f4:	f7ff fff2 	bl	1a0007dc <enact_Temperatura_ESPERANDO>
	handle->stateConfVector[3] = Compostera_Temperatura_ESPERANDO;
1a0007f8:	230f      	movs	r3, #15
1a0007fa:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0007fc:	2303      	movs	r3, #3
1a0007fe:	60a3      	str	r3, [r4, #8]
}
1a000800:	bd10      	pop	{r4, pc}

1a000802 <react_Temperatura__entry_Default>:
{
1a000802:	b508      	push	{r3, lr}
	enseq_Temperatura_ESPERANDO_default(handle);
1a000804:	f7ff fff4 	bl	1a0007f0 <enseq_Temperatura_ESPERANDO_default>
}
1a000808:	bd08      	pop	{r3, pc}

1a00080a <enseq_Temperatura_default>:
{
1a00080a:	b508      	push	{r3, lr}
	react_Temperatura__entry_Default(handle);
1a00080c:	f7ff fff9 	bl	1a000802 <react_Temperatura__entry_Default>
}
1a000810:	bd08      	pop	{r3, pc}

1a000812 <effect_Temperatura_ENFRIANDO_tr0>:
{
1a000812:	b510      	push	{r4, lr}
1a000814:	4604      	mov	r4, r0
	exseq_Temperatura_ENFRIANDO(handle);
1a000816:	f7ff fe29 	bl	1a00046c <exseq_Temperatura_ENFRIANDO>
	enseq_Temperatura_ESPERANDO_default(handle);
1a00081a:	4620      	mov	r0, r4
1a00081c:	f7ff ffe8 	bl	1a0007f0 <enseq_Temperatura_ESPERANDO_default>
}
1a000820:	bd10      	pop	{r4, pc}

1a000822 <effect_Temperatura_ENFRIANDO_tr1>:
{
1a000822:	b510      	push	{r4, lr}
1a000824:	4604      	mov	r4, r0
	exseq_Temperatura_ENFRIANDO(handle);
1a000826:	f7ff fe21 	bl	1a00046c <exseq_Temperatura_ENFRIANDO>
	enseq_Temperatura_ESPERANDO_default(handle);
1a00082a:	4620      	mov	r0, r4
1a00082c:	f7ff ffe0 	bl	1a0007f0 <enseq_Temperatura_ESPERANDO_default>
}
1a000830:	bd10      	pop	{r4, pc}

1a000832 <react_Temperatura_ENFRIANDO>:
{
1a000832:	b510      	push	{r4, lr}
1a000834:	4604      	mov	r4, r0
	if (check_Temperatura_ENFRIANDO_tr0_tr0(handle) == bool_true)
1a000836:	f7ff fdad 	bl	1a000394 <check_Temperatura_ENFRIANDO_tr0_tr0>
1a00083a:	b920      	cbnz	r0, 1a000846 <react_Temperatura_ENFRIANDO+0x14>
		if (check_Temperatura_ENFRIANDO_tr1_tr1(handle) == bool_true)
1a00083c:	4620      	mov	r0, r4
1a00083e:	f7ff fdab 	bl	1a000398 <check_Temperatura_ENFRIANDO_tr1_tr1>
1a000842:	b920      	cbnz	r0, 1a00084e <react_Temperatura_ENFRIANDO+0x1c>
}
1a000844:	bd10      	pop	{r4, pc}
		effect_Temperatura_ENFRIANDO_tr0(handle);
1a000846:	4620      	mov	r0, r4
1a000848:	f7ff ffe3 	bl	1a000812 <effect_Temperatura_ENFRIANDO_tr0>
1a00084c:	e7fa      	b.n	1a000844 <react_Temperatura_ENFRIANDO+0x12>
			effect_Temperatura_ENFRIANDO_tr1(handle);
1a00084e:	4620      	mov	r0, r4
1a000850:	f7ff ffe7 	bl	1a000822 <effect_Temperatura_ENFRIANDO_tr1>
}
1a000854:	e7f6      	b.n	1a000844 <react_Temperatura_ENFRIANDO+0x12>

1a000856 <exact_Sensor_Humedad_LEYENDO>:
{
1a000856:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_LEYENDO_tev0_raised) );		
1a000858:	f100 011b 	add.w	r1, r0, #27
1a00085c:	f000 faec 	bl	1a000e38 <compostera_unsetTimer>
}
1a000860:	bd08      	pop	{r3, pc}

1a000862 <exseq_Sensor_Humedad_LEYENDO>:
{
1a000862:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a000864:	2200      	movs	r2, #0
1a000866:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000868:	2201      	movs	r2, #1
1a00086a:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_LEYENDO(handle);
1a00086c:	f7ff fff3 	bl	1a000856 <exact_Sensor_Humedad_LEYENDO>
}
1a000870:	bd08      	pop	{r3, pc}

1a000872 <effect_Sensor_Humedad_LEYENDO_tr0>:
{
1a000872:	b510      	push	{r4, lr}
1a000874:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a000876:	f7ff fff4 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_HUM_SUPERIOR_default(handle);
1a00087a:	4620      	mov	r0, r4
1a00087c:	f7ff fe44 	bl	1a000508 <enseq_Sensor_Humedad_HUM_SUPERIOR_default>
}
1a000880:	bd10      	pop	{r4, pc}

1a000882 <effect_Sensor_Humedad_LEYENDO_tr1>:
{
1a000882:	b510      	push	{r4, lr}
1a000884:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a000886:	f7ff ffec 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_HUM_INFERIOR_default(handle);
1a00088a:	4620      	mov	r0, r4
1a00088c:	f7ff fe51 	bl	1a000532 <enseq_Sensor_Humedad_HUM_INFERIOR_default>
}
1a000890:	bd10      	pop	{r4, pc}

1a000892 <effect_Sensor_Humedad_LEYENDO_tr2>:
{
1a000892:	b510      	push	{r4, lr}
1a000894:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a000896:	f7ff ffe4 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_ESTABLE_default(handle);
1a00089a:	4620      	mov	r0, r4
1a00089c:	f7ff fe5e 	bl	1a00055c <enseq_Sensor_Humedad_ESTABLE_default>
}
1a0008a0:	bd10      	pop	{r4, pc}

1a0008a2 <effect_Sensor_Humedad_LEYENDO_tr3>:
{
1a0008a2:	b510      	push	{r4, lr}
1a0008a4:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a0008a6:	f7ff ffdc 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_TEMP_SUPERIOR_default(handle);
1a0008aa:	4620      	mov	r0, r4
1a0008ac:	f7ff fe6b 	bl	1a000586 <enseq_Sensor_Humedad_TEMP_SUPERIOR_default>
}
1a0008b0:	bd10      	pop	{r4, pc}

1a0008b2 <effect_Sensor_Humedad_LEYENDO_tr4>:
{
1a0008b2:	b510      	push	{r4, lr}
1a0008b4:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a0008b6:	f7ff ffd4 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_SUPERIOR_default(handle);
1a0008ba:	4620      	mov	r0, r4
1a0008bc:	f7ff fe79 	bl	1a0005b2 <enseq_Sensor_Humedad_SUPERIOR_default>
}
1a0008c0:	bd10      	pop	{r4, pc}

1a0008c2 <effect_Sensor_Humedad_LEYENDO_tr5>:
{
1a0008c2:	b510      	push	{r4, lr}
1a0008c4:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a0008c6:	f7ff ffcc 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_ERROR_default(handle);
1a0008ca:	4620      	mov	r0, r4
1a0008cc:	f7ff febe 	bl	1a00064c <enseq_Sensor_Humedad_ERROR_default>
}
1a0008d0:	bd10      	pop	{r4, pc}

1a0008d2 <effect_Sensor_Humedad_LEYENDO_tr6>:
{
1a0008d2:	b510      	push	{r4, lr}
1a0008d4:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_LEYENDO(handle);
1a0008d6:	f7ff ffc4 	bl	1a000862 <exseq_Sensor_Humedad_LEYENDO>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a0008da:	4620      	mov	r0, r4
1a0008dc:	f7ff fe7f 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a0008e0:	bd10      	pop	{r4, pc}

1a0008e2 <react_Sensor_Humedad_LEYENDO>:
{
1a0008e2:	b510      	push	{r4, lr}
1a0008e4:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_LEYENDO_tr0_tr0(handle) == bool_true)
1a0008e6:	f7ff fd31 	bl	1a00034c <check_Sensor_Humedad_LEYENDO_tr0_tr0>
1a0008ea:	b9d8      	cbnz	r0, 1a000924 <react_Sensor_Humedad_LEYENDO+0x42>
		if (check_Sensor_Humedad_LEYENDO_tr1_tr1(handle) == bool_true)
1a0008ec:	4620      	mov	r0, r4
1a0008ee:	f7ff fd2f 	bl	1a000350 <check_Sensor_Humedad_LEYENDO_tr1_tr1>
1a0008f2:	b9d8      	cbnz	r0, 1a00092c <react_Sensor_Humedad_LEYENDO+0x4a>
			if (check_Sensor_Humedad_LEYENDO_tr2_tr2(handle) == bool_true)
1a0008f4:	4620      	mov	r0, r4
1a0008f6:	f7ff fd2d 	bl	1a000354 <check_Sensor_Humedad_LEYENDO_tr2_tr2>
1a0008fa:	b9d8      	cbnz	r0, 1a000934 <react_Sensor_Humedad_LEYENDO+0x52>
				if (check_Sensor_Humedad_LEYENDO_tr3_tr3(handle) == bool_true)
1a0008fc:	4620      	mov	r0, r4
1a0008fe:	f7ff fd2b 	bl	1a000358 <check_Sensor_Humedad_LEYENDO_tr3_tr3>
1a000902:	b9d8      	cbnz	r0, 1a00093c <react_Sensor_Humedad_LEYENDO+0x5a>
					if (check_Sensor_Humedad_LEYENDO_tr4_tr4(handle) == bool_true)
1a000904:	4620      	mov	r0, r4
1a000906:	f7ff fd29 	bl	1a00035c <check_Sensor_Humedad_LEYENDO_tr4_tr4>
1a00090a:	b9d8      	cbnz	r0, 1a000944 <react_Sensor_Humedad_LEYENDO+0x62>
						if (check_Sensor_Humedad_LEYENDO_tr5_tr5(handle) == bool_true)
1a00090c:	4620      	mov	r0, r4
1a00090e:	f7ff fd27 	bl	1a000360 <check_Sensor_Humedad_LEYENDO_tr5_tr5>
1a000912:	b9d8      	cbnz	r0, 1a00094c <react_Sensor_Humedad_LEYENDO+0x6a>
							if (check_Sensor_Humedad_LEYENDO_tr6_tr6(handle) == bool_true)
1a000914:	4620      	mov	r0, r4
1a000916:	f7ff fd25 	bl	1a000364 <check_Sensor_Humedad_LEYENDO_tr6_tr6>
1a00091a:	b130      	cbz	r0, 1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
								effect_Sensor_Humedad_LEYENDO_tr6(handle);
1a00091c:	4620      	mov	r0, r4
1a00091e:	f7ff ffd8 	bl	1a0008d2 <effect_Sensor_Humedad_LEYENDO_tr6>
}
1a000922:	e002      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
		effect_Sensor_Humedad_LEYENDO_tr0(handle);
1a000924:	4620      	mov	r0, r4
1a000926:	f7ff ffa4 	bl	1a000872 <effect_Sensor_Humedad_LEYENDO_tr0>
}
1a00092a:	bd10      	pop	{r4, pc}
			effect_Sensor_Humedad_LEYENDO_tr1(handle);
1a00092c:	4620      	mov	r0, r4
1a00092e:	f7ff ffa8 	bl	1a000882 <effect_Sensor_Humedad_LEYENDO_tr1>
1a000932:	e7fa      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
				effect_Sensor_Humedad_LEYENDO_tr2(handle);
1a000934:	4620      	mov	r0, r4
1a000936:	f7ff ffac 	bl	1a000892 <effect_Sensor_Humedad_LEYENDO_tr2>
1a00093a:	e7f6      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
					effect_Sensor_Humedad_LEYENDO_tr3(handle);
1a00093c:	4620      	mov	r0, r4
1a00093e:	f7ff ffb0 	bl	1a0008a2 <effect_Sensor_Humedad_LEYENDO_tr3>
1a000942:	e7f2      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
						effect_Sensor_Humedad_LEYENDO_tr4(handle);
1a000944:	4620      	mov	r0, r4
1a000946:	f7ff ffb4 	bl	1a0008b2 <effect_Sensor_Humedad_LEYENDO_tr4>
1a00094a:	e7ee      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>
							effect_Sensor_Humedad_LEYENDO_tr5(handle);
1a00094c:	4620      	mov	r0, r4
1a00094e:	f7ff ffb8 	bl	1a0008c2 <effect_Sensor_Humedad_LEYENDO_tr5>
1a000952:	e7ea      	b.n	1a00092a <react_Sensor_Humedad_LEYENDO+0x48>

1a000954 <exact_Sensor_Humedad_HUM_SUPERIOR>:
{
1a000954:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_HUM_SUPERIOR_tev0_raised) );		
1a000956:	f100 011c 	add.w	r1, r0, #28
1a00095a:	f000 fa6d 	bl	1a000e38 <compostera_unsetTimer>
}
1a00095e:	bd08      	pop	{r3, pc}

1a000960 <exseq_Sensor_Humedad_HUM_SUPERIOR>:
{
1a000960:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a000962:	2200      	movs	r2, #0
1a000964:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000966:	2201      	movs	r2, #1
1a000968:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_HUM_SUPERIOR(handle);
1a00096a:	f7ff fff3 	bl	1a000954 <exact_Sensor_Humedad_HUM_SUPERIOR>
}
1a00096e:	bd08      	pop	{r3, pc}

1a000970 <effect_Sensor_Humedad_HUM_SUPERIOR_tr0>:
{
1a000970:	b510      	push	{r4, lr}
1a000972:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_HUM_SUPERIOR(handle);
1a000974:	f7ff fff4 	bl	1a000960 <exseq_Sensor_Humedad_HUM_SUPERIOR>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a000978:	4620      	mov	r0, r4
1a00097a:	f7ff fe30 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a00097e:	bd10      	pop	{r4, pc}

1a000980 <react_Sensor_Humedad_HUM_SUPERIOR>:
{
1a000980:	b510      	push	{r4, lr}
1a000982:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_HUM_SUPERIOR_tr0_tr0(handle) == bool_true)
1a000984:	f7ff fcf0 	bl	1a000368 <check_Sensor_Humedad_HUM_SUPERIOR_tr0_tr0>
1a000988:	b900      	cbnz	r0, 1a00098c <react_Sensor_Humedad_HUM_SUPERIOR+0xc>
}
1a00098a:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_HUM_SUPERIOR_tr0(handle);
1a00098c:	4620      	mov	r0, r4
1a00098e:	f7ff ffef 	bl	1a000970 <effect_Sensor_Humedad_HUM_SUPERIOR_tr0>
}
1a000992:	e7fa      	b.n	1a00098a <react_Sensor_Humedad_HUM_SUPERIOR+0xa>

1a000994 <exact_Sensor_Humedad_ESTABLE>:
{
1a000994:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_ESTABLE_tev0_raised) );		
1a000996:	f100 011d 	add.w	r1, r0, #29
1a00099a:	f000 fa4d 	bl	1a000e38 <compostera_unsetTimer>
}
1a00099e:	bd08      	pop	{r3, pc}

1a0009a0 <exseq_Sensor_Humedad_ESTABLE>:
{
1a0009a0:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a0009a2:	2200      	movs	r2, #0
1a0009a4:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0009a6:	2201      	movs	r2, #1
1a0009a8:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_ESTABLE(handle);
1a0009aa:	f7ff fff3 	bl	1a000994 <exact_Sensor_Humedad_ESTABLE>
}
1a0009ae:	bd08      	pop	{r3, pc}

1a0009b0 <effect_Sensor_Humedad_ESTABLE_tr0>:
{
1a0009b0:	b510      	push	{r4, lr}
1a0009b2:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_ESTABLE(handle);
1a0009b4:	f7ff fff4 	bl	1a0009a0 <exseq_Sensor_Humedad_ESTABLE>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a0009b8:	4620      	mov	r0, r4
1a0009ba:	f7ff fe10 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a0009be:	bd10      	pop	{r4, pc}

1a0009c0 <react_Sensor_Humedad_ESTABLE>:
{
1a0009c0:	b510      	push	{r4, lr}
1a0009c2:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_ESTABLE_tr0_tr0(handle) == bool_true)
1a0009c4:	f7ff fcd2 	bl	1a00036c <check_Sensor_Humedad_ESTABLE_tr0_tr0>
1a0009c8:	b900      	cbnz	r0, 1a0009cc <react_Sensor_Humedad_ESTABLE+0xc>
}
1a0009ca:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_ESTABLE_tr0(handle);
1a0009cc:	4620      	mov	r0, r4
1a0009ce:	f7ff ffef 	bl	1a0009b0 <effect_Sensor_Humedad_ESTABLE_tr0>
}
1a0009d2:	e7fa      	b.n	1a0009ca <react_Sensor_Humedad_ESTABLE+0xa>

1a0009d4 <exact_Sensor_Humedad_HUM_INFERIOR>:
{
1a0009d4:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_HUM_INFERIOR_tev0_raised) );		
1a0009d6:	f100 011e 	add.w	r1, r0, #30
1a0009da:	f000 fa2d 	bl	1a000e38 <compostera_unsetTimer>
}
1a0009de:	bd08      	pop	{r3, pc}

1a0009e0 <exseq_Sensor_Humedad_HUM_INFERIOR>:
{
1a0009e0:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a0009e2:	2200      	movs	r2, #0
1a0009e4:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0009e6:	2201      	movs	r2, #1
1a0009e8:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_HUM_INFERIOR(handle);
1a0009ea:	f7ff fff3 	bl	1a0009d4 <exact_Sensor_Humedad_HUM_INFERIOR>
}
1a0009ee:	bd08      	pop	{r3, pc}

1a0009f0 <effect_Sensor_Humedad_HUM_INFERIOR_tr0>:
{
1a0009f0:	b510      	push	{r4, lr}
1a0009f2:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_HUM_INFERIOR(handle);
1a0009f4:	f7ff fff4 	bl	1a0009e0 <exseq_Sensor_Humedad_HUM_INFERIOR>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a0009f8:	4620      	mov	r0, r4
1a0009fa:	f7ff fdf0 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a0009fe:	bd10      	pop	{r4, pc}

1a000a00 <react_Sensor_Humedad_HUM_INFERIOR>:
{
1a000a00:	b510      	push	{r4, lr}
1a000a02:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_HUM_INFERIOR_tr0_tr0(handle) == bool_true)
1a000a04:	f7ff fcb4 	bl	1a000370 <check_Sensor_Humedad_HUM_INFERIOR_tr0_tr0>
1a000a08:	b900      	cbnz	r0, 1a000a0c <react_Sensor_Humedad_HUM_INFERIOR+0xc>
}
1a000a0a:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_HUM_INFERIOR_tr0(handle);
1a000a0c:	4620      	mov	r0, r4
1a000a0e:	f7ff ffef 	bl	1a0009f0 <effect_Sensor_Humedad_HUM_INFERIOR_tr0>
}
1a000a12:	e7fa      	b.n	1a000a0a <react_Sensor_Humedad_HUM_INFERIOR+0xa>

1a000a14 <exact_Sensor_Humedad_TEMP_SUPERIOR>:
{
1a000a14:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_TEMP_SUPERIOR_tev0_raised) );		
1a000a16:	f100 011f 	add.w	r1, r0, #31
1a000a1a:	f000 fa0d 	bl	1a000e38 <compostera_unsetTimer>
}
1a000a1e:	bd08      	pop	{r3, pc}

1a000a20 <exseq_Sensor_Humedad_TEMP_SUPERIOR>:
{
1a000a20:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a000a22:	2200      	movs	r2, #0
1a000a24:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000a26:	2201      	movs	r2, #1
1a000a28:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_TEMP_SUPERIOR(handle);
1a000a2a:	f7ff fff3 	bl	1a000a14 <exact_Sensor_Humedad_TEMP_SUPERIOR>
}
1a000a2e:	bd08      	pop	{r3, pc}

1a000a30 <effect_Sensor_Humedad_TEMP_SUPERIOR_tr0>:
{
1a000a30:	b510      	push	{r4, lr}
1a000a32:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_TEMP_SUPERIOR(handle);
1a000a34:	f7ff fff4 	bl	1a000a20 <exseq_Sensor_Humedad_TEMP_SUPERIOR>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a000a38:	4620      	mov	r0, r4
1a000a3a:	f7ff fdd0 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a000a3e:	bd10      	pop	{r4, pc}

1a000a40 <react_Sensor_Humedad_TEMP_SUPERIOR>:
{
1a000a40:	b510      	push	{r4, lr}
1a000a42:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_TEMP_SUPERIOR_tr0_tr0(handle) == bool_true)
1a000a44:	f7ff fc96 	bl	1a000374 <check_Sensor_Humedad_TEMP_SUPERIOR_tr0_tr0>
1a000a48:	b900      	cbnz	r0, 1a000a4c <react_Sensor_Humedad_TEMP_SUPERIOR+0xc>
}
1a000a4a:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_TEMP_SUPERIOR_tr0(handle);
1a000a4c:	4620      	mov	r0, r4
1a000a4e:	f7ff ffef 	bl	1a000a30 <effect_Sensor_Humedad_TEMP_SUPERIOR_tr0>
}
1a000a52:	e7fa      	b.n	1a000a4a <react_Sensor_Humedad_TEMP_SUPERIOR+0xa>

1a000a54 <exact_Sensor_Humedad_SUPERIOR>:
{
1a000a54:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_SUPERIOR_tev0_raised) );		
1a000a56:	f100 0120 	add.w	r1, r0, #32
1a000a5a:	f000 f9ed 	bl	1a000e38 <compostera_unsetTimer>
}
1a000a5e:	bd08      	pop	{r3, pc}

1a000a60 <exseq_Sensor_Humedad_SUPERIOR>:
{
1a000a60:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a000a62:	2200      	movs	r2, #0
1a000a64:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000a66:	2201      	movs	r2, #1
1a000a68:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_SUPERIOR(handle);
1a000a6a:	f7ff fff3 	bl	1a000a54 <exact_Sensor_Humedad_SUPERIOR>
}
1a000a6e:	bd08      	pop	{r3, pc}

1a000a70 <effect_Sensor_Humedad_SUPERIOR_tr0>:
{
1a000a70:	b510      	push	{r4, lr}
1a000a72:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_SUPERIOR(handle);
1a000a74:	f7ff fff4 	bl	1a000a60 <exseq_Sensor_Humedad_SUPERIOR>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a000a78:	4620      	mov	r0, r4
1a000a7a:	f7ff fdb0 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a000a7e:	bd10      	pop	{r4, pc}

1a000a80 <react_Sensor_Humedad_SUPERIOR>:
{
1a000a80:	b510      	push	{r4, lr}
1a000a82:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_SUPERIOR_tr0_tr0(handle) == bool_true)
1a000a84:	f7ff fc78 	bl	1a000378 <check_Sensor_Humedad_SUPERIOR_tr0_tr0>
1a000a88:	b900      	cbnz	r0, 1a000a8c <react_Sensor_Humedad_SUPERIOR+0xc>
}
1a000a8a:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_SUPERIOR_tr0(handle);
1a000a8c:	4620      	mov	r0, r4
1a000a8e:	f7ff ffef 	bl	1a000a70 <effect_Sensor_Humedad_SUPERIOR_tr0>
}
1a000a92:	e7fa      	b.n	1a000a8a <react_Sensor_Humedad_SUPERIOR+0xa>

1a000a94 <exact_Sensor_Humedad_ERROR>:
{
1a000a94:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Sensor_Humedad_ERROR_tev0_raised) );		
1a000a96:	f100 0121 	add.w	r1, r0, #33	; 0x21
1a000a9a:	f000 f9cd 	bl	1a000e38 <compostera_unsetTimer>
}
1a000a9e:	bd08      	pop	{r3, pc}

1a000aa0 <exseq_Sensor_Humedad_ERROR>:
{
1a000aa0:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Compostera_last_state;
1a000aa2:	2200      	movs	r2, #0
1a000aa4:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000aa6:	2201      	movs	r2, #1
1a000aa8:	6082      	str	r2, [r0, #8]
	exact_Sensor_Humedad_ERROR(handle);
1a000aaa:	f7ff fff3 	bl	1a000a94 <exact_Sensor_Humedad_ERROR>
}
1a000aae:	bd08      	pop	{r3, pc}

1a000ab0 <effect_Sensor_Humedad_ERROR_tr0>:
{
1a000ab0:	b510      	push	{r4, lr}
1a000ab2:	4604      	mov	r4, r0
	exseq_Sensor_Humedad_ERROR(handle);
1a000ab4:	f7ff fff4 	bl	1a000aa0 <exseq_Sensor_Humedad_ERROR>
	enseq_Sensor_Humedad_LEYENDO_default(handle);
1a000ab8:	4620      	mov	r0, r4
1a000aba:	f7ff fd90 	bl	1a0005de <enseq_Sensor_Humedad_LEYENDO_default>
}
1a000abe:	bd10      	pop	{r4, pc}

1a000ac0 <react_Sensor_Humedad_ERROR>:
{
1a000ac0:	b510      	push	{r4, lr}
1a000ac2:	4604      	mov	r4, r0
	if (check_Sensor_Humedad_ERROR_tr0_tr0(handle) == bool_true)
1a000ac4:	f7ff fc5b 	bl	1a00037e <check_Sensor_Humedad_ERROR_tr0_tr0>
1a000ac8:	b900      	cbnz	r0, 1a000acc <react_Sensor_Humedad_ERROR+0xc>
}
1a000aca:	bd10      	pop	{r4, pc}
		effect_Sensor_Humedad_ERROR_tr0(handle);
1a000acc:	4620      	mov	r0, r4
1a000ace:	f7ff ffef 	bl	1a000ab0 <effect_Sensor_Humedad_ERROR_tr0>
}
1a000ad2:	e7fa      	b.n	1a000aca <react_Sensor_Humedad_ERROR+0xa>

1a000ad4 <exact_Compostar_RELLENANDO>:
{
1a000ad4:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Compostar_RELLENANDO_tev0_raised) );		
1a000ad6:	f100 0122 	add.w	r1, r0, #34	; 0x22
1a000ada:	f000 f9ad 	bl	1a000e38 <compostera_unsetTimer>
}
1a000ade:	bd08      	pop	{r3, pc}

1a000ae0 <exseq_Compostar_RELLENANDO>:
{
1a000ae0:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Compostera_last_state;
1a000ae2:	2200      	movs	r2, #0
1a000ae4:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a000ae6:	2204      	movs	r2, #4
1a000ae8:	6082      	str	r2, [r0, #8]
	exact_Compostar_RELLENANDO(handle);
1a000aea:	f7ff fff3 	bl	1a000ad4 <exact_Compostar_RELLENANDO>
}
1a000aee:	bd08      	pop	{r3, pc}

1a000af0 <effect_Compostar_RELLENANDO_tr0>:
{
1a000af0:	b510      	push	{r4, lr}
1a000af2:	4604      	mov	r4, r0
	exseq_Compostar_RELLENANDO(handle);
1a000af4:	f7ff fff4 	bl	1a000ae0 <exseq_Compostar_RELLENANDO>
	enseq_Compostar_SONANDO_default(handle);
1a000af8:	4620      	mov	r0, r4
1a000afa:	f7ff fdbc 	bl	1a000676 <enseq_Compostar_SONANDO_default>
}
1a000afe:	bd10      	pop	{r4, pc}

1a000b00 <effect_Compostar_RELLENANDO_tr1>:
{
1a000b00:	b510      	push	{r4, lr}
1a000b02:	4604      	mov	r4, r0
	exseq_Compostar_RELLENANDO(handle);
1a000b04:	f7ff ffec 	bl	1a000ae0 <exseq_Compostar_RELLENANDO>
	enseq_Compostar_MEZCLANDO_default(handle);
1a000b08:	4620      	mov	r0, r4
1a000b0a:	f7ff fdd6 	bl	1a0006ba <enseq_Compostar_MEZCLANDO_default>
}
1a000b0e:	bd10      	pop	{r4, pc}

1a000b10 <react_Compostar_RELLENANDO>:
{
1a000b10:	b510      	push	{r4, lr}
1a000b12:	4604      	mov	r4, r0
	if (check_Compostar_RELLENANDO_tr0_tr0(handle) == bool_true)
1a000b14:	f7ff fc44 	bl	1a0003a0 <check_Compostar_RELLENANDO_tr0_tr0>
1a000b18:	b920      	cbnz	r0, 1a000b24 <react_Compostar_RELLENANDO+0x14>
		if (check_Compostar_RELLENANDO_tr1_tr1(handle) == bool_true)
1a000b1a:	4620      	mov	r0, r4
1a000b1c:	f7ff fc43 	bl	1a0003a6 <check_Compostar_RELLENANDO_tr1_tr1>
1a000b20:	b920      	cbnz	r0, 1a000b2c <react_Compostar_RELLENANDO+0x1c>
}
1a000b22:	bd10      	pop	{r4, pc}
		effect_Compostar_RELLENANDO_tr0(handle);
1a000b24:	4620      	mov	r0, r4
1a000b26:	f7ff ffe3 	bl	1a000af0 <effect_Compostar_RELLENANDO_tr0>
1a000b2a:	e7fa      	b.n	1a000b22 <react_Compostar_RELLENANDO+0x12>
			effect_Compostar_RELLENANDO_tr1(handle);
1a000b2c:	4620      	mov	r0, r4
1a000b2e:	f7ff ffe7 	bl	1a000b00 <effect_Compostar_RELLENANDO_tr1>
}
1a000b32:	e7f6      	b.n	1a000b22 <react_Compostar_RELLENANDO+0x12>

1a000b34 <exact_Compostar_MEZCLANDO>:
{
1a000b34:	b508      	push	{r3, lr}
	compostera_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.compostera_Compostar_MEZCLANDO_tev0_raised) );		
1a000b36:	f100 0123 	add.w	r1, r0, #35	; 0x23
1a000b3a:	f000 f97d 	bl	1a000e38 <compostera_unsetTimer>
}
1a000b3e:	bd08      	pop	{r3, pc}

1a000b40 <exseq_Compostar_MEZCLANDO>:
{
1a000b40:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Compostera_last_state;
1a000b42:	2200      	movs	r2, #0
1a000b44:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a000b46:	2204      	movs	r2, #4
1a000b48:	6082      	str	r2, [r0, #8]
	exact_Compostar_MEZCLANDO(handle);
1a000b4a:	f7ff fff3 	bl	1a000b34 <exact_Compostar_MEZCLANDO>
}
1a000b4e:	bd08      	pop	{r3, pc}

1a000b50 <effect_Compostar_MEZCLANDO_tr0>:
{
1a000b50:	b510      	push	{r4, lr}
1a000b52:	4604      	mov	r4, r0
	exseq_Compostar_MEZCLANDO(handle);
1a000b54:	f7ff fff4 	bl	1a000b40 <exseq_Compostar_MEZCLANDO>
	enseq_Compostar_ESPERANDO_default(handle);
1a000b58:	4620      	mov	r0, r4
1a000b5a:	f7ff fd57 	bl	1a00060c <enseq_Compostar_ESPERANDO_default>
}
1a000b5e:	bd10      	pop	{r4, pc}

1a000b60 <effect_Compostar_MEZCLANDO_tr1>:
{
1a000b60:	b510      	push	{r4, lr}
1a000b62:	4604      	mov	r4, r0
	exseq_Compostar_MEZCLANDO(handle);
1a000b64:	f7ff ffec 	bl	1a000b40 <exseq_Compostar_MEZCLANDO>
	enseq_Compostar_RELLENANDO_default(handle);
1a000b68:	4620      	mov	r0, r4
1a000b6a:	f7ff fdd5 	bl	1a000718 <enseq_Compostar_RELLENANDO_default>
}
1a000b6e:	bd10      	pop	{r4, pc}

1a000b70 <react_Compostar_MEZCLANDO>:
{
1a000b70:	b510      	push	{r4, lr}
1a000b72:	4604      	mov	r4, r0
	if (check_Compostar_MEZCLANDO_tr0_tr0(handle) == bool_true)
1a000b74:	f7ff fc1d 	bl	1a0003b2 <check_Compostar_MEZCLANDO_tr0_tr0>
1a000b78:	b920      	cbnz	r0, 1a000b84 <react_Compostar_MEZCLANDO+0x14>
		if (check_Compostar_MEZCLANDO_tr1_tr1(handle) == bool_true)
1a000b7a:	4620      	mov	r0, r4
1a000b7c:	f7ff fc1c 	bl	1a0003b8 <check_Compostar_MEZCLANDO_tr1_tr1>
1a000b80:	b920      	cbnz	r0, 1a000b8c <react_Compostar_MEZCLANDO+0x1c>
}
1a000b82:	bd10      	pop	{r4, pc}
		effect_Compostar_MEZCLANDO_tr0(handle);
1a000b84:	4620      	mov	r0, r4
1a000b86:	f7ff ffe3 	bl	1a000b50 <effect_Compostar_MEZCLANDO_tr0>
1a000b8a:	e7fa      	b.n	1a000b82 <react_Compostar_MEZCLANDO+0x12>
			effect_Compostar_MEZCLANDO_tr1(handle);
1a000b8c:	4620      	mov	r0, r4
1a000b8e:	f7ff ffe7 	bl	1a000b60 <effect_Compostar_MEZCLANDO_tr1>
}
1a000b92:	e7f6      	b.n	1a000b82 <react_Compostar_MEZCLANDO+0x12>

1a000b94 <enact_Humedad_DESHUMEDECIENDO>:
{
1a000b94:	b510      	push	{r4, lr}
1a000b96:	4604      	mov	r4, r0
	composteraIface_start_drying(handle);
1a000b98:	f000 f9fc 	bl	1a000f94 <composteraIface_start_drying>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED3, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000b9c:	2201      	movs	r2, #1
1a000b9e:	2105      	movs	r1, #5
1a000ba0:	4620      	mov	r0, r4
1a000ba2:	f000 f933 	bl	1a000e0c <composteraIface_opLED>
}
1a000ba6:	bd10      	pop	{r4, pc}

1a000ba8 <enseq_Humedad_DESHUMEDECIENDO_default>:
{
1a000ba8:	b510      	push	{r4, lr}
1a000baa:	4604      	mov	r4, r0
	enact_Humedad_DESHUMEDECIENDO(handle);
1a000bac:	f7ff fff2 	bl	1a000b94 <enact_Humedad_DESHUMEDECIENDO>
	handle->stateConfVector[2] = Compostera_Humedad_DESHUMEDECIENDO;
1a000bb0:	230c      	movs	r3, #12
1a000bb2:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000bb4:	2302      	movs	r3, #2
1a000bb6:	60a3      	str	r3, [r4, #8]
}
1a000bb8:	bd10      	pop	{r4, pc}

1a000bba <effect_Humedad_ESPERANDO_tr0>:
{
1a000bba:	b510      	push	{r4, lr}
1a000bbc:	4604      	mov	r4, r0
	exseq_Humedad_ESPERANDO(handle);
1a000bbe:	f7ff fc50 	bl	1a000462 <exseq_Humedad_ESPERANDO>
	enseq_Humedad_DESHUMEDECIENDO_default(handle);
1a000bc2:	4620      	mov	r0, r4
1a000bc4:	f7ff fff0 	bl	1a000ba8 <enseq_Humedad_DESHUMEDECIENDO_default>
}
1a000bc8:	bd10      	pop	{r4, pc}

1a000bca <enact_Humedad_HUMEDECIENDO>:
{
1a000bca:	b510      	push	{r4, lr}
1a000bcc:	4604      	mov	r4, r0
	composteraIface_start_wetting(handle);
1a000bce:	f000 f9ed 	bl	1a000fac <composteraIface_start_wetting>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED2, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000bd2:	2201      	movs	r2, #1
1a000bd4:	2104      	movs	r1, #4
1a000bd6:	4620      	mov	r0, r4
1a000bd8:	f000 f918 	bl	1a000e0c <composteraIface_opLED>
}
1a000bdc:	bd10      	pop	{r4, pc}

1a000bde <enseq_Humedad_HUMEDECIENDO_default>:
{
1a000bde:	b510      	push	{r4, lr}
1a000be0:	4604      	mov	r4, r0
	enact_Humedad_HUMEDECIENDO(handle);
1a000be2:	f7ff fff2 	bl	1a000bca <enact_Humedad_HUMEDECIENDO>
	handle->stateConfVector[2] = Compostera_Humedad_HUMEDECIENDO;
1a000be6:	230b      	movs	r3, #11
1a000be8:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000bea:	2302      	movs	r3, #2
1a000bec:	60a3      	str	r3, [r4, #8]
}
1a000bee:	bd10      	pop	{r4, pc}

1a000bf0 <effect_Humedad_ESPERANDO_tr1>:
{
1a000bf0:	b510      	push	{r4, lr}
1a000bf2:	4604      	mov	r4, r0
	exseq_Humedad_ESPERANDO(handle);
1a000bf4:	f7ff fc35 	bl	1a000462 <exseq_Humedad_ESPERANDO>
	enseq_Humedad_HUMEDECIENDO_default(handle);
1a000bf8:	4620      	mov	r0, r4
1a000bfa:	f7ff fff0 	bl	1a000bde <enseq_Humedad_HUMEDECIENDO_default>
}
1a000bfe:	bd10      	pop	{r4, pc}

1a000c00 <react_Humedad_ESPERANDO>:
{
1a000c00:	b510      	push	{r4, lr}
1a000c02:	4604      	mov	r4, r0
	if (check_Humedad_ESPERANDO_tr0_tr0(handle) == bool_true)
1a000c04:	f7ff fbc2 	bl	1a00038c <check_Humedad_ESPERANDO_tr0_tr0>
1a000c08:	b920      	cbnz	r0, 1a000c14 <react_Humedad_ESPERANDO+0x14>
		if (check_Humedad_ESPERANDO_tr1_tr1(handle) == bool_true)
1a000c0a:	4620      	mov	r0, r4
1a000c0c:	f7ff fbc0 	bl	1a000390 <check_Humedad_ESPERANDO_tr1_tr1>
1a000c10:	b920      	cbnz	r0, 1a000c1c <react_Humedad_ESPERANDO+0x1c>
}
1a000c12:	bd10      	pop	{r4, pc}
		effect_Humedad_ESPERANDO_tr0(handle);
1a000c14:	4620      	mov	r0, r4
1a000c16:	f7ff ffd0 	bl	1a000bba <effect_Humedad_ESPERANDO_tr0>
1a000c1a:	e7fa      	b.n	1a000c12 <react_Humedad_ESPERANDO+0x12>
			effect_Humedad_ESPERANDO_tr1(handle);
1a000c1c:	4620      	mov	r0, r4
1a000c1e:	f7ff ffe7 	bl	1a000bf0 <effect_Humedad_ESPERANDO_tr1>
}
1a000c22:	e7f6      	b.n	1a000c12 <react_Humedad_ESPERANDO+0x12>

1a000c24 <enact_Temperatura_ENFRIANDO>:
{
1a000c24:	b510      	push	{r4, lr}
1a000c26:	4604      	mov	r4, r0
	composteraIface_start_cooling(handle);
1a000c28:	f000 f9ba 	bl	1a000fa0 <composteraIface_start_cooling>
	composteraIface_opLED(handle, COMPOSTERA_COMPOSTERAIFACE_LED1, COMPOSTERA_COMPOSTERAIFACE_LED_ON);
1a000c2c:	2201      	movs	r2, #1
1a000c2e:	2103      	movs	r1, #3
1a000c30:	4620      	mov	r0, r4
1a000c32:	f000 f8eb 	bl	1a000e0c <composteraIface_opLED>
}
1a000c36:	bd10      	pop	{r4, pc}

1a000c38 <enseq_Temperatura_ENFRIANDO_default>:
{
1a000c38:	b510      	push	{r4, lr}
1a000c3a:	4604      	mov	r4, r0
	enact_Temperatura_ENFRIANDO(handle);
1a000c3c:	f7ff fff2 	bl	1a000c24 <enact_Temperatura_ENFRIANDO>
	handle->stateConfVector[3] = Compostera_Temperatura_ENFRIANDO;
1a000c40:	230e      	movs	r3, #14
1a000c42:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000c44:	2303      	movs	r3, #3
1a000c46:	60a3      	str	r3, [r4, #8]
}
1a000c48:	bd10      	pop	{r4, pc}

1a000c4a <effect_Temperatura_ESPERANDO_tr0>:
{
1a000c4a:	b510      	push	{r4, lr}
1a000c4c:	4604      	mov	r4, r0
	exseq_Temperatura_ESPERANDO(handle);
1a000c4e:	f7ff fc12 	bl	1a000476 <exseq_Temperatura_ESPERANDO>
	enseq_Temperatura_ENFRIANDO_default(handle);
1a000c52:	4620      	mov	r0, r4
1a000c54:	f7ff fff0 	bl	1a000c38 <enseq_Temperatura_ENFRIANDO_default>
}
1a000c58:	bd10      	pop	{r4, pc}

1a000c5a <react_Temperatura_ESPERANDO>:
{
1a000c5a:	b510      	push	{r4, lr}
1a000c5c:	4604      	mov	r4, r0
	if (check_Temperatura_ESPERANDO_tr0_tr0(handle) == bool_true)
1a000c5e:	f7ff fb9d 	bl	1a00039c <check_Temperatura_ESPERANDO_tr0_tr0>
1a000c62:	b900      	cbnz	r0, 1a000c66 <react_Temperatura_ESPERANDO+0xc>
}
1a000c64:	bd10      	pop	{r4, pc}
		effect_Temperatura_ESPERANDO_tr0(handle);
1a000c66:	4620      	mov	r0, r4
1a000c68:	f7ff ffef 	bl	1a000c4a <effect_Temperatura_ESPERANDO_tr0>
}
1a000c6c:	e7fa      	b.n	1a000c64 <react_Temperatura_ESPERANDO+0xa>

1a000c6e <compostera_init>:
{
1a000c6e:	b508      	push	{r3, lr}
		for (i = 0; i < COMPOSTERA_MAX_ORTHOGONAL_STATES; ++i)
1a000c70:	2300      	movs	r3, #0
1a000c72:	2b04      	cmp	r3, #4
1a000c74:	dc03      	bgt.n	1a000c7e <compostera_init+0x10>
			handle->stateConfVector[i] = Compostera_last_state;
1a000c76:	2200      	movs	r2, #0
1a000c78:	54c2      	strb	r2, [r0, r3]
		for (i = 0; i < COMPOSTERA_MAX_ORTHOGONAL_STATES; ++i)
1a000c7a:	3301      	adds	r3, #1
1a000c7c:	e7f9      	b.n	1a000c72 <compostera_init+0x4>
		handle->stateConfVectorPosition = 0;
1a000c7e:	2300      	movs	r3, #0
1a000c80:	6083      	str	r3, [r0, #8]
		clearInEvents(handle);
1a000c82:	f7ff fb3d 	bl	1a000300 <clearInEvents>
}
1a000c86:	bd08      	pop	{r3, pc}

1a000c88 <compostera_enter>:
{
1a000c88:	b510      	push	{r4, lr}
1a000c8a:	4604      	mov	r4, r0
	enseq_Sensor_Lid_default(handle);
1a000c8c:	f7ff fc2c 	bl	1a0004e8 <enseq_Sensor_Lid_default>
	enseq_Sensor_Humedad_default(handle);
1a000c90:	4620      	mov	r0, r4
1a000c92:	f7ff fcb1 	bl	1a0005f8 <enseq_Sensor_Humedad_default>
	enseq_Humedad_default(handle);
1a000c96:	4620      	mov	r0, r4
1a000c98:	f7ff fd78 	bl	1a00078c <enseq_Humedad_default>
	enseq_Temperatura_default(handle);
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	f7ff fdb4 	bl	1a00080a <enseq_Temperatura_default>
	enseq_Compostar_default(handle);
1a000ca2:	4620      	mov	r0, r4
1a000ca4:	f7ff fcbf 	bl	1a000626 <enseq_Compostar_default>
}
1a000ca8:	bd10      	pop	{r4, pc}
1a000caa:	Address 0x1a000caa is out of bounds.


1a000cac <compostera_runCycle>:
{
1a000cac:	b510      	push	{r4, lr}
1a000cae:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a000cb0:	2300      	movs	r3, #0
1a000cb2:	6083      	str	r3, [r0, #8]
1a000cb4:	e005      	b.n	1a000cc2 <compostera_runCycle+0x16>
			react_Sensor_Lid_CERRADO(handle);
1a000cb6:	4620      	mov	r0, r4
1a000cb8:	f7ff fbec 	bl	1a000494 <react_Sensor_Lid_CERRADO>
		handle->stateConfVectorPosition++)
1a000cbc:	68a3      	ldr	r3, [r4, #8]
1a000cbe:	3301      	adds	r3, #1
1a000cc0:	60a3      	str	r3, [r4, #8]
		handle->stateConfVectorPosition < COMPOSTERA_MAX_ORTHOGONAL_STATES;
1a000cc2:	68a3      	ldr	r3, [r4, #8]
	for (handle->stateConfVectorPosition = 0;
1a000cc4:	2b04      	cmp	r3, #4
1a000cc6:	d875      	bhi.n	1a000db4 <compostera_runCycle+0x108>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a000cc8:	5ce3      	ldrb	r3, [r4, r3]
1a000cca:	3b01      	subs	r3, #1
1a000ccc:	2b12      	cmp	r3, #18
1a000cce:	d8f5      	bhi.n	1a000cbc <compostera_runCycle+0x10>
1a000cd0:	a201      	add	r2, pc, #4	; (adr r2, 1a000cd8 <compostera_runCycle+0x2c>)
1a000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000cd6:	bf00      	nop
1a000cd8:	1a000cb7 	.word	0x1a000cb7
1a000cdc:	1a000d25 	.word	0x1a000d25
1a000ce0:	1a000d2d 	.word	0x1a000d2d
1a000ce4:	1a000d35 	.word	0x1a000d35
1a000ce8:	1a000d3d 	.word	0x1a000d3d
1a000cec:	1a000d45 	.word	0x1a000d45
1a000cf0:	1a000d4d 	.word	0x1a000d4d
1a000cf4:	1a000d55 	.word	0x1a000d55
1a000cf8:	1a000d5d 	.word	0x1a000d5d
1a000cfc:	1a000d65 	.word	0x1a000d65
1a000d00:	1a000d6d 	.word	0x1a000d6d
1a000d04:	1a000d75 	.word	0x1a000d75
1a000d08:	1a000d7d 	.word	0x1a000d7d
1a000d0c:	1a000d85 	.word	0x1a000d85
1a000d10:	1a000d8d 	.word	0x1a000d8d
1a000d14:	1a000d95 	.word	0x1a000d95
1a000d18:	1a000d9d 	.word	0x1a000d9d
1a000d1c:	1a000da5 	.word	0x1a000da5
1a000d20:	1a000dad 	.word	0x1a000dad
			react_Sensor_Lid_ABIERTO(handle);
1a000d24:	4620      	mov	r0, r4
1a000d26:	f7ff fbbf 	bl	1a0004a8 <react_Sensor_Lid_ABIERTO>
			break;
1a000d2a:	e7c7      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Lid_INICIO(handle);
1a000d2c:	4620      	mov	r0, r4
1a000d2e:	f7ff fbc5 	bl	1a0004bc <react_Sensor_Lid_INICIO>
			break;
1a000d32:	e7c3      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_LEYENDO(handle);
1a000d34:	4620      	mov	r0, r4
1a000d36:	f7ff fdd4 	bl	1a0008e2 <react_Sensor_Humedad_LEYENDO>
			break;
1a000d3a:	e7bf      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_HUM_SUPERIOR(handle);
1a000d3c:	4620      	mov	r0, r4
1a000d3e:	f7ff fe1f 	bl	1a000980 <react_Sensor_Humedad_HUM_SUPERIOR>
			break;
1a000d42:	e7bb      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_ESTABLE(handle);
1a000d44:	4620      	mov	r0, r4
1a000d46:	f7ff fe3b 	bl	1a0009c0 <react_Sensor_Humedad_ESTABLE>
			break;
1a000d4a:	e7b7      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_HUM_INFERIOR(handle);
1a000d4c:	4620      	mov	r0, r4
1a000d4e:	f7ff fe57 	bl	1a000a00 <react_Sensor_Humedad_HUM_INFERIOR>
			break;
1a000d52:	e7b3      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_TEMP_SUPERIOR(handle);
1a000d54:	4620      	mov	r0, r4
1a000d56:	f7ff fe73 	bl	1a000a40 <react_Sensor_Humedad_TEMP_SUPERIOR>
			break;
1a000d5a:	e7af      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_SUPERIOR(handle);
1a000d5c:	4620      	mov	r0, r4
1a000d5e:	f7ff fe8f 	bl	1a000a80 <react_Sensor_Humedad_SUPERIOR>
			break;
1a000d62:	e7ab      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Sensor_Humedad_ERROR(handle);
1a000d64:	4620      	mov	r0, r4
1a000d66:	f7ff feab 	bl	1a000ac0 <react_Sensor_Humedad_ERROR>
			break;
1a000d6a:	e7a7      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Humedad_HUMEDECIENDO(handle);
1a000d6c:	4620      	mov	r0, r4
1a000d6e:	f7ff fd19 	bl	1a0007a4 <react_Humedad_HUMEDECIENDO>
			break;
1a000d72:	e7a3      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Humedad_DESHUMEDECIENDO(handle);
1a000d74:	4620      	mov	r0, r4
1a000d76:	f7ff fd27 	bl	1a0007c8 <react_Humedad_DESHUMEDECIENDO>
			break;
1a000d7a:	e79f      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Humedad_ESPERANDO(handle);
1a000d7c:	4620      	mov	r0, r4
1a000d7e:	f7ff ff3f 	bl	1a000c00 <react_Humedad_ESPERANDO>
			break;
1a000d82:	e79b      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Temperatura_ENFRIANDO(handle);
1a000d84:	4620      	mov	r0, r4
1a000d86:	f7ff fd54 	bl	1a000832 <react_Temperatura_ENFRIANDO>
			break;
1a000d8a:	e797      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Temperatura_ESPERANDO(handle);
1a000d8c:	4620      	mov	r0, r4
1a000d8e:	f7ff ff64 	bl	1a000c5a <react_Temperatura_ESPERANDO>
			break;
1a000d92:	e793      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Compostar_RELLENANDO(handle);
1a000d94:	4620      	mov	r0, r4
1a000d96:	f7ff febb 	bl	1a000b10 <react_Compostar_RELLENANDO>
			break;
1a000d9a:	e78f      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Compostar_ESPERANDO(handle);
1a000d9c:	4620      	mov	r0, r4
1a000d9e:	f7ff fccc 	bl	1a00073a <react_Compostar_ESPERANDO>
			break;
1a000da2:	e78b      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Compostar_SONANDO(handle);
1a000da4:	4620      	mov	r0, r4
1a000da6:	f7ff fc99 	bl	1a0006dc <react_Compostar_SONANDO>
			break;
1a000daa:	e787      	b.n	1a000cbc <compostera_runCycle+0x10>
			react_Compostar_MEZCLANDO(handle);
1a000dac:	4620      	mov	r0, r4
1a000dae:	f7ff fedf 	bl	1a000b70 <react_Compostar_MEZCLANDO>
			break;
1a000db2:	e783      	b.n	1a000cbc <compostera_runCycle+0x10>
	clearInEvents(handle);
1a000db4:	4620      	mov	r0, r4
1a000db6:	f7ff faa3 	bl	1a000300 <clearInEvents>
}
1a000dba:	bd10      	pop	{r4, pc}

1a000dbc <compostera_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000dbc:	301b      	adds	r0, #27
1a000dbe:	4288      	cmp	r0, r1
1a000dc0:	dc04      	bgt.n	1a000dcc <compostera_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(ComposteraTimeEvents))
1a000dc2:	3009      	adds	r0, #9
1a000dc4:	4288      	cmp	r0, r1
1a000dc6:	d901      	bls.n	1a000dcc <compostera_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a000dc8:	2301      	movs	r3, #1
1a000dca:	700b      	strb	r3, [r1, #0]
}
1a000dcc:	4770      	bx	lr

1a000dce <composteraIface_raise_evHumedadMenor40>:
	handle->iface.evHumedadMenor40_raised = bool_true;
1a000dce:	2301      	movs	r3, #1
1a000dd0:	7303      	strb	r3, [r0, #12]
}
1a000dd2:	4770      	bx	lr

1a000dd4 <composteraIface_raise_evHumedadMayor60>:
	handle->iface.evHumedadMayor60_raised = bool_true;
1a000dd4:	2301      	movs	r3, #1
1a000dd6:	7343      	strb	r3, [r0, #13]
}
1a000dd8:	4770      	bx	lr

1a000dda <composteraIface_raise_evParametrosEstable>:
	handle->iface.evParametrosEstable_raised = bool_true;
1a000dda:	2301      	movs	r3, #1
1a000ddc:	7383      	strb	r3, [r0, #14]
}
1a000dde:	4770      	bx	lr

1a000de0 <composteraIface_raise_evTemperaturaMayor60>:
	handle->iface.evTemperaturaMayor60_raised = bool_true;
1a000de0:	2301      	movs	r3, #1
1a000de2:	73c3      	strb	r3, [r0, #15]
}
1a000de4:	4770      	bx	lr

1a000de6 <composteraIface_raise_evCerradoTapa>:
	handle->iface.evCerradoTapa_raised = bool_true;
1a000de6:	2301      	movs	r3, #1
1a000de8:	7403      	strb	r3, [r0, #16]
}
1a000dea:	4770      	bx	lr

1a000dec <composteraIface_raise_evAberturaTapa>:
	handle->iface.evAberturaTapa_raised = bool_true;
1a000dec:	2301      	movs	r3, #1
1a000dee:	7443      	strb	r3, [r0, #17]
}
1a000df0:	4770      	bx	lr

1a000df2 <composteraIface_raise_evParametrosExcedidos>:
	handle->iface.evParametrosExcedidos_raised = bool_true;
1a000df2:	2301      	movs	r3, #1
1a000df4:	7483      	strb	r3, [r0, #18]
}
1a000df6:	4770      	bx	lr

1a000df8 <composteraIface_raise_evLecturaErronea>:
	handle->iface.evLecturaErronea_raised = bool_true;
1a000df8:	2301      	movs	r3, #1
1a000dfa:	74c3      	strb	r3, [r0, #19]
}
1a000dfc:	4770      	bx	lr
1a000dfe:	Address 0x1a000dfe is out of bounds.


1a000e00 <myTickHook>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a000e00:	4b01      	ldr	r3, [pc, #4]	; (1a000e08 <myTickHook+0x8>)
1a000e02:	2201      	movs	r2, #1
1a000e04:	701a      	strb	r2, [r3, #0]
}
1a000e06:	4770      	bx	lr
1a000e08:	100000b0 	.word	0x100000b0

1a000e0c <composteraIface_opLED>:
{
1a000e0c:	b508      	push	{r3, lr}
	gpioWrite( (LEDR + LEDNumber), State );
1a000e0e:	f101 0028 	add.w	r0, r1, #40	; 0x28
1a000e12:	4611      	mov	r1, r2
1a000e14:	b240      	sxtb	r0, r0
1a000e16:	f001 fa89 	bl	1a00232c <gpioWrite>
}
1a000e1a:	bd08      	pop	{r3, pc}

1a000e1c <compostera_setTimer>:
{
1a000e1c:	b500      	push	{lr}
1a000e1e:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a000e20:	9300      	str	r3, [sp, #0]
1a000e22:	4613      	mov	r3, r2
1a000e24:	460a      	mov	r2, r1
1a000e26:	2109      	movs	r1, #9
1a000e28:	4802      	ldr	r0, [pc, #8]	; (1a000e34 <compostera_setTimer+0x18>)
1a000e2a:	f000 f9a4 	bl	1a001176 <SetNewTimerTick>
}
1a000e2e:	b003      	add	sp, #12
1a000e30:	f85d fb04 	ldr.w	pc, [sp], #4
1a000e34:	1000025c 	.word	0x1000025c

1a000e38 <compostera_unsetTimer>:
{
1a000e38:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a000e3a:	460a      	mov	r2, r1
1a000e3c:	2109      	movs	r1, #9
1a000e3e:	4802      	ldr	r0, [pc, #8]	; (1a000e48 <compostera_unsetTimer+0x10>)
1a000e40:	f000 f9b2 	bl	1a0011a8 <UnsetTimerTick>
}
1a000e44:	bd08      	pop	{r3, pc}
1a000e46:	bf00      	nop
1a000e48:	1000025c 	.word	0x1000025c

1a000e4c <gpio_init>:


void gpio_init() {
1a000e4c:	b508      	push	{r3, lr}
	gpioInit( TAPA, GPIO_INPUT );
1a000e4e:	2100      	movs	r1, #0
1a000e50:	201e      	movs	r0, #30
1a000e52:	f001 f995 	bl	1a002180 <gpioInit>
	gpioInit( BOMBA, GPIO_OUTPUT );
1a000e56:	2101      	movs	r1, #1
1a000e58:	2020      	movs	r0, #32
1a000e5a:	f001 f991 	bl	1a002180 <gpioInit>
	gpioInit( VENTILADOR, GPIO_OUTPUT );
1a000e5e:	2101      	movs	r1, #1
1a000e60:	200d      	movs	r0, #13
1a000e62:	f001 f98d 	bl	1a002180 <gpioInit>
	gpioInit( TEC_BOMBA, GPIO_INPUT );
1a000e66:	2100      	movs	r1, #0
1a000e68:	2024      	movs	r0, #36	; 0x24
1a000e6a:	f001 f989 	bl	1a002180 <gpioInit>
	gpioInit( TEC2, GPIO_INPUT );
1a000e6e:	2100      	movs	r1, #0
1a000e70:	2025      	movs	r0, #37	; 0x25
1a000e72:	f001 f985 	bl	1a002180 <gpioInit>
}
1a000e76:	bd08      	pop	{r3, pc}

1a000e78 <composteraIface_readParameters>:

void composteraIface_readParameters(Compostera* handle) {
1a000e78:	b510      	push	{r4, lr}

	if(dht11Read(&humidity, &temperature)) {
1a000e7a:	4938      	ldr	r1, [pc, #224]	; (1a000f5c <composteraIface_readParameters+0xe4>)
1a000e7c:	4838      	ldr	r0, [pc, #224]	; (1a000f60 <composteraIface_readParameters+0xe8>)
1a000e7e:	f001 fcf7 	bl	1a002870 <dht11Read>
1a000e82:	2800      	cmp	r0, #0
1a000e84:	d05a      	beq.n	1a000f3c <composteraIface_readParameters+0xc4>
		gpioWrite( LED_LECTURA_CORRECTA, ON );
1a000e86:	2101      	movs	r1, #1
1a000e88:	2029      	movs	r0, #41	; 0x29
1a000e8a:	f001 fa4f 	bl	1a00232c <gpioWrite>
		gpioWrite( LED_LECTURA_ERRONEA, OFF );
1a000e8e:	2100      	movs	r1, #0
1a000e90:	2028      	movs	r0, #40	; 0x28
1a000e92:	f001 fa4b 	bl	1a00232c <gpioWrite>
		printf( "Temperatura: %d grados C.\r\n", (int) temperature );
1a000e96:	4c31      	ldr	r4, [pc, #196]	; (1a000f5c <composteraIface_readParameters+0xe4>)
1a000e98:	edd4 7a00 	vldr	s15, [r4]
1a000e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a000ea0:	ee17 1a90 	vmov	r1, s15
1a000ea4:	482f      	ldr	r0, [pc, #188]	; (1a000f64 <composteraIface_readParameters+0xec>)
1a000ea6:	f003 f83b 	bl	1a003f20 <iprintf>
		printf( "Humedad: %d  %.\r\n\r\n", (int) humidity );
1a000eaa:	4b2d      	ldr	r3, [pc, #180]	; (1a000f60 <composteraIface_readParameters+0xe8>)
1a000eac:	edd3 7a00 	vldr	s15, [r3]
1a000eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a000eb4:	ee17 1a90 	vmov	r1, s15
1a000eb8:	482b      	ldr	r0, [pc, #172]	; (1a000f68 <composteraIface_readParameters+0xf0>)
1a000eba:	f003 f831 	bl	1a003f20 <iprintf>
		if(temperature > 15 && humidity > 60) {
1a000ebe:	edd4 7a00 	vldr	s15, [r4]
1a000ec2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
1a000ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ece:	dd0d      	ble.n	1a000eec <composteraIface_readParameters+0x74>
1a000ed0:	4b23      	ldr	r3, [pc, #140]	; (1a000f60 <composteraIface_readParameters+0xe8>)
1a000ed2:	edd3 6a00 	vldr	s13, [r3]
1a000ed6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 1a000f6c <composteraIface_readParameters+0xf4>
1a000eda:	eef4 6ac7 	vcmpe.f32	s13, s14
1a000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ee2:	dd03      	ble.n	1a000eec <composteraIface_readParameters+0x74>
			status = HIGH_PARAMETERS;
1a000ee4:	4b22      	ldr	r3, [pc, #136]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000ee6:	2206      	movs	r2, #6
1a000ee8:	701a      	strb	r2, [r3, #0]
1a000eea:	e035      	b.n	1a000f58 <composteraIface_readParameters+0xe0>
		} else if (temperature > 30) {
1a000eec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
1a000ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ef8:	dd03      	ble.n	1a000f02 <composteraIface_readParameters+0x8a>
			status = HIGH_TEMPERATURE;
1a000efa:	4b1d      	ldr	r3, [pc, #116]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000efc:	2200      	movs	r2, #0
1a000efe:	701a      	strb	r2, [r3, #0]
1a000f00:	e02a      	b.n	1a000f58 <composteraIface_readParameters+0xe0>
		} else if (humidity > 60) {
1a000f02:	4b17      	ldr	r3, [pc, #92]	; (1a000f60 <composteraIface_readParameters+0xe8>)
1a000f04:	edd3 7a00 	vldr	s15, [r3]
1a000f08:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1a000f6c <composteraIface_readParameters+0xf4>
1a000f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f14:	dd03      	ble.n	1a000f1e <composteraIface_readParameters+0xa6>
			status = HIGH_HUMIDITY;
1a000f16:	4b16      	ldr	r3, [pc, #88]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000f18:	2201      	movs	r2, #1
1a000f1a:	701a      	strb	r2, [r3, #0]
1a000f1c:	e01c      	b.n	1a000f58 <composteraIface_readParameters+0xe0>
		} else if (humidity < 60) {
1a000f1e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1a000f6c <composteraIface_readParameters+0xf4>
1a000f22:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f2a:	d503      	bpl.n	1a000f34 <composteraIface_readParameters+0xbc>
			status = LOW_HUMIDITY;
1a000f2c:	4b10      	ldr	r3, [pc, #64]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000f2e:	2202      	movs	r2, #2
1a000f30:	701a      	strb	r2, [r3, #0]
1a000f32:	e011      	b.n	1a000f58 <composteraIface_readParameters+0xe0>
		} else status = STABLE_PARAMETERS;
1a000f34:	4b0e      	ldr	r3, [pc, #56]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000f36:	2203      	movs	r2, #3
1a000f38:	701a      	strb	r2, [r3, #0]
1a000f3a:	e00d      	b.n	1a000f58 <composteraIface_readParameters+0xe0>
	} else {
		gpioWrite( LED_LECTURA_ERRONEA, ON );
1a000f3c:	2101      	movs	r1, #1
1a000f3e:	2028      	movs	r0, #40	; 0x28
1a000f40:	f001 f9f4 	bl	1a00232c <gpioWrite>
		gpioWrite( LED_LECTURA_CORRECTA, OFF );
1a000f44:	2100      	movs	r1, #0
1a000f46:	2029      	movs	r0, #41	; 0x29
1a000f48:	f001 f9f0 	bl	1a00232c <gpioWrite>
		status = ERROR_READING;
1a000f4c:	4b08      	ldr	r3, [pc, #32]	; (1a000f70 <composteraIface_readParameters+0xf8>)
1a000f4e:	2205      	movs	r2, #5
1a000f50:	701a      	strb	r2, [r3, #0]
		printf( "Error al leer DHT11.\r\n\r\n");
1a000f52:	4808      	ldr	r0, [pc, #32]	; (1a000f74 <composteraIface_readParameters+0xfc>)
1a000f54:	f003 f86a 	bl	1a00402c <puts>
	}
}
1a000f58:	bd10      	pop	{r4, pc}
1a000f5a:	bf00      	nop
1a000f5c:	100000dc 	.word	0x100000dc
1a000f60:	100000b4 	.word	0x100000b4
1a000f64:	1a0043c8 	.word	0x1a0043c8
1a000f68:	1a0043e4 	.word	0x1a0043e4
1a000f6c:	42700000 	.word	0x42700000
1a000f70:	100002ec 	.word	0x100002ec
1a000f74:	1a0043f8 	.word	0x1a0043f8

1a000f78 <stop_automatic_control>:

void stop_automatic_control() {
1a000f78:	b508      	push	{r3, lr}
	gpioWrite( LED_TAPA, ON );
1a000f7a:	2101      	movs	r1, #1
1a000f7c:	202b      	movs	r0, #43	; 0x2b
1a000f7e:	f001 f9d5 	bl	1a00232c <gpioWrite>
	gpioWrite( BOMBA, ON );
1a000f82:	2101      	movs	r1, #1
1a000f84:	2020      	movs	r0, #32
1a000f86:	f001 f9d1 	bl	1a00232c <gpioWrite>
	gpioWrite( VENTILADOR, ON );
1a000f8a:	2101      	movs	r1, #1
1a000f8c:	200d      	movs	r0, #13
1a000f8e:	f001 f9cd 	bl	1a00232c <gpioWrite>
}
1a000f92:	bd08      	pop	{r3, pc}

1a000f94 <composteraIface_start_drying>:


void composteraIface_start_drying(const Compostera* handle) {
1a000f94:	b508      	push	{r3, lr}
	gpioWrite( VENTILADOR, OFF );
1a000f96:	2100      	movs	r1, #0
1a000f98:	200d      	movs	r0, #13
1a000f9a:	f001 f9c7 	bl	1a00232c <gpioWrite>
}
1a000f9e:	bd08      	pop	{r3, pc}

1a000fa0 <composteraIface_start_cooling>:

void composteraIface_start_cooling(const Compostera* handle) {
1a000fa0:	b508      	push	{r3, lr}
	gpioWrite( VENTILADOR, OFF );
1a000fa2:	2100      	movs	r1, #0
1a000fa4:	200d      	movs	r0, #13
1a000fa6:	f001 f9c1 	bl	1a00232c <gpioWrite>
}
1a000faa:	bd08      	pop	{r3, pc}

1a000fac <composteraIface_start_wetting>:

void composteraIface_start_wetting(const Compostera* handle) {
1a000fac:	b508      	push	{r3, lr}
	gpioWrite( BOMBA, OFF );
1a000fae:	2100      	movs	r1, #0
1a000fb0:	2020      	movs	r0, #32
1a000fb2:	f001 f9bb 	bl	1a00232c <gpioWrite>
}
1a000fb6:	bd08      	pop	{r3, pc}

1a000fb8 <composteraIface_stop_wetting>:

void composteraIface_stop_wetting(const Compostera* handle) {
1a000fb8:	b508      	push	{r3, lr}
	gpioWrite( BOMBA, ON );
1a000fba:	2101      	movs	r1, #1
1a000fbc:	2020      	movs	r0, #32
1a000fbe:	f001 f9b5 	bl	1a00232c <gpioWrite>
}
1a000fc2:	bd08      	pop	{r3, pc}

1a000fc4 <composteraIface_stop_cooling>:

void composteraIface_stop_cooling(const Compostera* handle) {
1a000fc4:	b508      	push	{r3, lr}
	gpioWrite( VENTILADOR, ON );
1a000fc6:	2101      	movs	r1, #1
1a000fc8:	200d      	movs	r0, #13
1a000fca:	f001 f9af 	bl	1a00232c <gpioWrite>
}
1a000fce:	bd08      	pop	{r3, pc}

1a000fd0 <composteraIface_stop_drying>:

void composteraIface_stop_drying(const Compostera* handle) {
1a000fd0:	b508      	push	{r3, lr}
	gpioWrite( VENTILADOR, ON );
1a000fd2:	2101      	movs	r1, #1
1a000fd4:	200d      	movs	r0, #13
1a000fd6:	f001 f9a9 	bl	1a00232c <gpioWrite>
}
1a000fda:	bd08      	pop	{r3, pc}

1a000fdc <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - Compostera
 * @return	Function should not exit.
 */
int main(void)
{
1a000fdc:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	/* Generic Initialization */
	boardConfig();
1a000fde:	f001 facb 	bl	1a002578 <boardInit>

	gpio_init();
1a000fe2:	f7ff ff33 	bl	1a000e4c <gpio_init>

	uartConfig( UART_USB, 115200 ); // Inicializar periferico UART_USB
1a000fe6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000fea:	2003      	movs	r0, #3
1a000fec:	f001 fa78 	bl	1a0024e0 <uartInit>

	dht11Init( GPIO1 ); // Inicializo el sensor DHT11
1a000ff0:	200f      	movs	r0, #15
1a000ff2:	f001 fc33 	bl	1a00285c <dht11Init>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a000ff6:	2001      	movs	r0, #1
1a000ff8:	2100      	movs	r1, #0
1a000ffa:	f001 fa1d 	bl	1a002438 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a000ffe:	2100      	movs	r1, #0
1a001000:	484f      	ldr	r0, [pc, #316]	; (1a001140 <main+0x164>)
1a001002:	f001 f9fd 	bl	1a002400 <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a001006:	2109      	movs	r1, #9
1a001008:	484e      	ldr	r0, [pc, #312]	; (1a001144 <main+0x168>)
1a00100a:	f000 f8a3 	bl	1a001154 <InitTimerTicks>

	/* Statechart Initialization */
	compostera_init( &statechart );
1a00100e:	4c4e      	ldr	r4, [pc, #312]	; (1a001148 <main+0x16c>)
1a001010:	4620      	mov	r0, r4
1a001012:	f7ff fe2c 	bl	1a000c6e <compostera_init>
	compostera_enter( &statechart );
1a001016:	4620      	mov	r0, r4
1a001018:	f7ff fe36 	bl	1a000c88 <compostera_enter>

	composteraIface_raise_evParametrosEstable(&statechart);
1a00101c:	4620      	mov	r0, r4
1a00101e:	f7ff fedc 	bl	1a000dda <composteraIface_raise_evParametrosEstable>
1a001022:	e022      	b.n	1a00106a <main+0x8e>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					compostera_raiseTimeEvent( &statechart, ticks[i].evid );
1a001024:	4d47      	ldr	r5, [pc, #284]	; (1a001144 <main+0x168>)
1a001026:	0126      	lsls	r6, r4, #4
1a001028:	59a9      	ldr	r1, [r5, r6]
1a00102a:	4847      	ldr	r0, [pc, #284]	; (1a001148 <main+0x16c>)
1a00102c:	f7ff fec6 	bl	1a000dbc <compostera_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a001030:	59aa      	ldr	r2, [r5, r6]
1a001032:	2109      	movs	r1, #9
1a001034:	4628      	mov	r0, r5
1a001036:	f000 f8e8 	bl	1a00120a <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00103a:	3401      	adds	r4, #1
1a00103c:	2c08      	cmp	r4, #8
1a00103e:	d808      	bhi.n	1a001052 <main+0x76>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a001040:	4840      	ldr	r0, [pc, #256]	; (1a001144 <main+0x168>)
1a001042:	0123      	lsls	r3, r4, #4
1a001044:	58c2      	ldr	r2, [r0, r3]
1a001046:	2109      	movs	r1, #9
1a001048:	f000 f8c8 	bl	1a0011dc <IsPendEvent>
1a00104c:	2800      	cmp	r0, #0
1a00104e:	d0f4      	beq.n	1a00103a <main+0x5e>
1a001050:	e7e8      	b.n	1a001024 <main+0x48>

				}
			}

			if(gpioRead( TAPA )){
1a001052:	201e      	movs	r0, #30
1a001054:	f001 f99f 	bl	1a002396 <gpioRead>
1a001058:	b1a0      	cbz	r0, 1a001084 <main+0xa8>
				stop_automatic_control();
1a00105a:	f7ff ff8d 	bl	1a000f78 <stop_automatic_control>
				composteraIface_raise_evAberturaTapa(&statechart);
1a00105e:	483a      	ldr	r0, [pc, #232]	; (1a001148 <main+0x16c>)
1a001060:	f7ff fec4 	bl	1a000dec <composteraIface_raise_evAberturaTapa>

			}


			/* Then Run an Cycle of Statechart */
			compostera_runCycle(&statechart);		// Run Cycle of Statechart
1a001064:	4838      	ldr	r0, [pc, #224]	; (1a001148 <main+0x16c>)
1a001066:	f7ff fe21 	bl	1a000cac <compostera_runCycle>
		__WFI();
1a00106a:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a00106c:	4b37      	ldr	r3, [pc, #220]	; (1a00114c <main+0x170>)
1a00106e:	781b      	ldrb	r3, [r3, #0]
1a001070:	2b00      	cmp	r3, #0
1a001072:	d0fa      	beq.n	1a00106a <main+0x8e>
			SysTick_Time_Flag = false;
1a001074:	2400      	movs	r4, #0
1a001076:	4b35      	ldr	r3, [pc, #212]	; (1a00114c <main+0x170>)
1a001078:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a00107a:	2109      	movs	r1, #9
1a00107c:	4831      	ldr	r0, [pc, #196]	; (1a001144 <main+0x168>)
1a00107e:	f000 f8d6 	bl	1a00122e <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001082:	e7db      	b.n	1a00103c <main+0x60>
				composteraIface_raise_evCerradoTapa(&statechart);
1a001084:	4830      	ldr	r0, [pc, #192]	; (1a001148 <main+0x16c>)
1a001086:	f7ff feae 	bl	1a000de6 <composteraIface_raise_evCerradoTapa>
				gpioWrite( LED_TAPA, OFF );
1a00108a:	2100      	movs	r1, #0
1a00108c:	202b      	movs	r0, #43	; 0x2b
1a00108e:	f001 f94d 	bl	1a00232c <gpioWrite>
				if(!gpioRead( TEC_BOMBA )){
1a001092:	2024      	movs	r0, #36	; 0x24
1a001094:	f001 f97f 	bl	1a002396 <gpioRead>
1a001098:	bb40      	cbnz	r0, 1a0010ec <main+0x110>
					gpioWrite( BOMBA, OFF );
1a00109a:	2100      	movs	r1, #0
1a00109c:	2020      	movs	r0, #32
1a00109e:	f001 f945 	bl	1a00232c <gpioWrite>
					gpioWrite( LED_BOMBA, OFF );
1a0010a2:	2100      	movs	r1, #0
1a0010a4:	202c      	movs	r0, #44	; 0x2c
1a0010a6:	f001 f941 	bl	1a00232c <gpioWrite>
				if(!gpioRead( TEC_VENTILADOR )){
1a0010aa:	2025      	movs	r0, #37	; 0x25
1a0010ac:	f001 f973 	bl	1a002396 <gpioRead>
1a0010b0:	bb28      	cbnz	r0, 1a0010fe <main+0x122>
					gpioWrite( VENTILADOR, OFF );
1a0010b2:	2100      	movs	r1, #0
1a0010b4:	200d      	movs	r0, #13
1a0010b6:	f001 f939 	bl	1a00232c <gpioWrite>
					gpioWrite( LED_VENTILADOR, OFF );
1a0010ba:	2100      	movs	r1, #0
1a0010bc:	202d      	movs	r0, #45	; 0x2d
1a0010be:	f001 f935 	bl	1a00232c <gpioWrite>
				switch(status) {
1a0010c2:	4b23      	ldr	r3, [pc, #140]	; (1a001150 <main+0x174>)
1a0010c4:	781b      	ldrb	r3, [r3, #0]
1a0010c6:	2b06      	cmp	r3, #6
1a0010c8:	d8cc      	bhi.n	1a001064 <main+0x88>
1a0010ca:	a201      	add	r2, pc, #4	; (adr r2, 1a0010d0 <main+0xf4>)
1a0010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0010d0:	1a001119 	.word	0x1a001119
1a0010d4:	1a001129 	.word	0x1a001129
1a0010d8:	1a001121 	.word	0x1a001121
1a0010dc:	1a001111 	.word	0x1a001111
1a0010e0:	1a001065 	.word	0x1a001065
1a0010e4:	1a001139 	.word	0x1a001139
1a0010e8:	1a001131 	.word	0x1a001131
					gpioWrite( BOMBA, ON );
1a0010ec:	2101      	movs	r1, #1
1a0010ee:	2020      	movs	r0, #32
1a0010f0:	f001 f91c 	bl	1a00232c <gpioWrite>
					gpioWrite( LED_BOMBA, ON );
1a0010f4:	2101      	movs	r1, #1
1a0010f6:	202c      	movs	r0, #44	; 0x2c
1a0010f8:	f001 f918 	bl	1a00232c <gpioWrite>
1a0010fc:	e7d5      	b.n	1a0010aa <main+0xce>
					gpioWrite( VENTILADOR, ON );
1a0010fe:	2101      	movs	r1, #1
1a001100:	200d      	movs	r0, #13
1a001102:	f001 f913 	bl	1a00232c <gpioWrite>
					gpioWrite( LED_VENTILADOR, ON );
1a001106:	2101      	movs	r1, #1
1a001108:	202d      	movs	r0, #45	; 0x2d
1a00110a:	f001 f90f 	bl	1a00232c <gpioWrite>
1a00110e:	e7d8      	b.n	1a0010c2 <main+0xe6>
						composteraIface_raise_evParametrosEstable(&statechart);
1a001110:	480d      	ldr	r0, [pc, #52]	; (1a001148 <main+0x16c>)
1a001112:	f7ff fe62 	bl	1a000dda <composteraIface_raise_evParametrosEstable>
						break;
1a001116:	e7a5      	b.n	1a001064 <main+0x88>
						composteraIface_raise_evTemperaturaMayor60(&statechart);
1a001118:	480b      	ldr	r0, [pc, #44]	; (1a001148 <main+0x16c>)
1a00111a:	f7ff fe61 	bl	1a000de0 <composteraIface_raise_evTemperaturaMayor60>
						break;
1a00111e:	e7a1      	b.n	1a001064 <main+0x88>
						composteraIface_raise_evHumedadMenor40(&statechart);
1a001120:	4809      	ldr	r0, [pc, #36]	; (1a001148 <main+0x16c>)
1a001122:	f7ff fe54 	bl	1a000dce <composteraIface_raise_evHumedadMenor40>
						break;
1a001126:	e79d      	b.n	1a001064 <main+0x88>
						composteraIface_raise_evHumedadMayor60(&statechart);
1a001128:	4807      	ldr	r0, [pc, #28]	; (1a001148 <main+0x16c>)
1a00112a:	f7ff fe53 	bl	1a000dd4 <composteraIface_raise_evHumedadMayor60>
						break;
1a00112e:	e799      	b.n	1a001064 <main+0x88>
						composteraIface_raise_evParametrosExcedidos(&statechart);
1a001130:	4805      	ldr	r0, [pc, #20]	; (1a001148 <main+0x16c>)
1a001132:	f7ff fe5e 	bl	1a000df2 <composteraIface_raise_evParametrosExcedidos>
						break;
1a001136:	e795      	b.n	1a001064 <main+0x88>
						composteraIface_raise_evLecturaErronea(&statechart);
1a001138:	4803      	ldr	r0, [pc, #12]	; (1a001148 <main+0x16c>)
1a00113a:	f7ff fe5d 	bl	1a000df8 <composteraIface_raise_evLecturaErronea>
						break;
1a00113e:	e791      	b.n	1a001064 <main+0x88>
1a001140:	1a000e01 	.word	0x1a000e01
1a001144:	1000025c 	.word	0x1000025c
1a001148:	100000b8 	.word	0x100000b8
1a00114c:	100000b0 	.word	0x100000b0
1a001150:	100002ec 	.word	0x100002ec

1a001154 <InitTimerTicks>:
#include "Compostera.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a001154:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001156:	2400      	movs	r4, #0
1a001158:	428c      	cmp	r4, r1
1a00115a:	d20a      	bcs.n	1a001172 <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a00115c:	0125      	lsls	r5, r4, #4
1a00115e:	1942      	adds	r2, r0, r5
1a001160:	2300      	movs	r3, #0
1a001162:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a001164:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a001166:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a001168:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a00116a:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a00116c:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a00116e:	3401      	adds	r4, #1
1a001170:	e7f2      	b.n	1a001158 <InitTimerTicks+0x4>
	}
}
1a001172:	bc30      	pop	{r4, r5}
1a001174:	4770      	bx	lr

1a001176 <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a001176:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a001178:	2400      	movs	r4, #0
1a00117a:	428c      	cmp	r4, r1
1a00117c:	d211      	bcs.n	1a0011a2 <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a00117e:	0125      	lsls	r5, r4, #4
1a001180:	1946      	adds	r6, r0, r5
1a001182:	5945      	ldr	r5, [r0, r5]
1a001184:	b10d      	cbz	r5, 1a00118a <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a001186:	3401      	adds	r4, #1
1a001188:	e7f7      	b.n	1a00117a <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a00118a:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a00118c:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a00118e:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001190:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001194:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a001196:	2301      	movs	r3, #1
1a001198:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a00119a:	2300      	movs	r3, #0
1a00119c:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a00119e:	4610      	mov	r0, r2
			break;
1a0011a0:	e000      	b.n	1a0011a4 <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a0011a2:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a0011a4:	bc70      	pop	{r4, r5, r6}
1a0011a6:	4770      	bx	lr

1a0011a8 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0011a8:	2300      	movs	r3, #0
1a0011aa:	428b      	cmp	r3, r1
1a0011ac:	d214      	bcs.n	1a0011d8 <UnsetTimerTick+0x30>
{
1a0011ae:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0011b0:	011c      	lsls	r4, r3, #4
1a0011b2:	1905      	adds	r5, r0, r4
1a0011b4:	5904      	ldr	r4, [r0, r4]
1a0011b6:	4294      	cmp	r4, r2
1a0011b8:	d004      	beq.n	1a0011c4 <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a0011ba:	3301      	adds	r3, #1
1a0011bc:	428b      	cmp	r3, r1
1a0011be:	d3f7      	bcc.n	1a0011b0 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0011c0:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0011c2:	e007      	b.n	1a0011d4 <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a0011c4:	2300      	movs	r3, #0
1a0011c6:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a0011c8:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a0011ca:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a0011cc:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a0011ce:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0011d0:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0011d2:	4610      	mov	r0, r2
}
1a0011d4:	bc30      	pop	{r4, r5}
1a0011d6:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0011d8:	2000      	movs	r0, #0
}
1a0011da:	4770      	bx	lr

1a0011dc <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0011dc:	2300      	movs	r3, #0
1a0011de:	428b      	cmp	r3, r1
1a0011e0:	d211      	bcs.n	1a001206 <IsPendEvent+0x2a>
{
1a0011e2:	b430      	push	{r4, r5}
1a0011e4:	e002      	b.n	1a0011ec <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0011e6:	3301      	adds	r3, #1
1a0011e8:	428b      	cmp	r3, r1
1a0011ea:	d209      	bcs.n	1a001200 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0011ec:	011c      	lsls	r4, r3, #4
1a0011ee:	1905      	adds	r5, r0, r4
1a0011f0:	5904      	ldr	r4, [r0, r4]
1a0011f2:	4294      	cmp	r4, r2
1a0011f4:	d1f7      	bne.n	1a0011e6 <IsPendEvent+0xa>
1a0011f6:	7bac      	ldrb	r4, [r5, #14]
1a0011f8:	2c00      	cmp	r4, #0
1a0011fa:	d0f4      	beq.n	1a0011e6 <IsPendEvent+0xa>
			ret = true;
1a0011fc:	2001      	movs	r0, #1
1a0011fe:	e000      	b.n	1a001202 <IsPendEvent+0x26>
	sc_boolean ret = false;
1a001200:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a001202:	bc30      	pop	{r4, r5}
1a001204:	4770      	bx	lr
	sc_boolean ret = false;
1a001206:	2000      	movs	r0, #0
}
1a001208:	4770      	bx	lr

1a00120a <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00120a:	2300      	movs	r3, #0
1a00120c:	428b      	cmp	r3, r1
1a00120e:	d20d      	bcs.n	1a00122c <MarkAsAttEvent+0x22>
{
1a001210:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001212:	011c      	lsls	r4, r3, #4
1a001214:	1905      	adds	r5, r0, r4
1a001216:	5904      	ldr	r4, [r0, r4]
1a001218:	4294      	cmp	r4, r2
1a00121a:	d003      	beq.n	1a001224 <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a00121c:	3301      	adds	r3, #1
1a00121e:	428b      	cmp	r3, r1
1a001220:	d3f7      	bcc.n	1a001212 <MarkAsAttEvent+0x8>
1a001222:	e001      	b.n	1a001228 <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a001224:	2300      	movs	r3, #0
1a001226:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a001228:	bc30      	pop	{r4, r5}
1a00122a:	4770      	bx	lr
1a00122c:	4770      	bx	lr

1a00122e <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00122e:	2300      	movs	r3, #0
1a001230:	428b      	cmp	r3, r1
1a001232:	d21d      	bcs.n	1a001270 <UpdateTimers+0x42>
{
1a001234:	b410      	push	{r4}
1a001236:	e006      	b.n	1a001246 <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a001238:	2400      	movs	r4, #0
1a00123a:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a00123c:	2401      	movs	r4, #1
1a00123e:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001240:	3301      	adds	r3, #1
1a001242:	428b      	cmp	r3, r1
1a001244:	d211      	bcs.n	1a00126a <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a001246:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a00124a:	7b54      	ldrb	r4, [r2, #13]
1a00124c:	2c00      	cmp	r4, #0
1a00124e:	d0f7      	beq.n	1a001240 <UpdateTimers+0x12>
			if(list[i].count)
1a001250:	6894      	ldr	r4, [r2, #8]
1a001252:	b10c      	cbz	r4, 1a001258 <UpdateTimers+0x2a>
				list[i].count--;
1a001254:	3c01      	subs	r4, #1
1a001256:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a001258:	6894      	ldr	r4, [r2, #8]
1a00125a:	2c00      	cmp	r4, #0
1a00125c:	d1f0      	bne.n	1a001240 <UpdateTimers+0x12>
				if(list[i].periodic)
1a00125e:	7b14      	ldrb	r4, [r2, #12]
1a001260:	2c00      	cmp	r4, #0
1a001262:	d0e9      	beq.n	1a001238 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a001264:	6854      	ldr	r4, [r2, #4]
1a001266:	6094      	str	r4, [r2, #8]
1a001268:	e7e8      	b.n	1a00123c <UpdateTimers+0xe>
			}
		}
	}
}
1a00126a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00126e:	4770      	bx	lr
1a001270:	4770      	bx	lr

1a001272 <initialise_monitor_handles>:
}
1a001272:	4770      	bx	lr

1a001274 <Reset_Handler>:
void Reset_Handler(void) {
1a001274:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001276:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001278:	4b19      	ldr	r3, [pc, #100]	; (1a0012e0 <Reset_Handler+0x6c>)
1a00127a:	4a1a      	ldr	r2, [pc, #104]	; (1a0012e4 <Reset_Handler+0x70>)
1a00127c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00127e:	3304      	adds	r3, #4
1a001280:	4a19      	ldr	r2, [pc, #100]	; (1a0012e8 <Reset_Handler+0x74>)
1a001282:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001284:	2300      	movs	r3, #0
1a001286:	e005      	b.n	1a001294 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001288:	4a18      	ldr	r2, [pc, #96]	; (1a0012ec <Reset_Handler+0x78>)
1a00128a:	f04f 31ff 	mov.w	r1, #4294967295
1a00128e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001292:	3301      	adds	r3, #1
1a001294:	2b07      	cmp	r3, #7
1a001296:	d9f7      	bls.n	1a001288 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001298:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00129a:	4b15      	ldr	r3, [pc, #84]	; (1a0012f0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00129c:	e007      	b.n	1a0012ae <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00129e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0012a2:	689a      	ldr	r2, [r3, #8]
1a0012a4:	6859      	ldr	r1, [r3, #4]
1a0012a6:	6818      	ldr	r0, [r3, #0]
1a0012a8:	f7fe ff6f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0012ac:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0012ae:	4a11      	ldr	r2, [pc, #68]	; (1a0012f4 <Reset_Handler+0x80>)
1a0012b0:	4293      	cmp	r3, r2
1a0012b2:	d3f4      	bcc.n	1a00129e <Reset_Handler+0x2a>
1a0012b4:	e006      	b.n	1a0012c4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0012b6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0012b8:	6859      	ldr	r1, [r3, #4]
1a0012ba:	f854 0b08 	ldr.w	r0, [r4], #8
1a0012be:	f7fe ff73 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0012c2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0012c4:	4a0c      	ldr	r2, [pc, #48]	; (1a0012f8 <Reset_Handler+0x84>)
1a0012c6:	4293      	cmp	r3, r2
1a0012c8:	d3f5      	bcc.n	1a0012b6 <Reset_Handler+0x42>
    SystemInit();
1a0012ca:	f000 ff15 	bl	1a0020f8 <SystemInit>
    __libc_init_array();
1a0012ce:	f002 fa73 	bl	1a0037b8 <__libc_init_array>
    initialise_monitor_handles();
1a0012d2:	f7ff ffce 	bl	1a001272 <initialise_monitor_handles>
    main();
1a0012d6:	f7ff fe81 	bl	1a000fdc <main>
        __asm__ volatile("wfi");
1a0012da:	bf30      	wfi
1a0012dc:	e7fd      	b.n	1a0012da <Reset_Handler+0x66>
1a0012de:	bf00      	nop
1a0012e0:	40053100 	.word	0x40053100
1a0012e4:	10df1000 	.word	0x10df1000
1a0012e8:	01dff7ff 	.word	0x01dff7ff
1a0012ec:	e000e280 	.word	0xe000e280
1a0012f0:	1a000114 	.word	0x1a000114
1a0012f4:	1a000150 	.word	0x1a000150
1a0012f8:	1a000178 	.word	0x1a000178

1a0012fc <_fini>:
void _fini(void) {}
1a0012fc:	4770      	bx	lr

1a0012fe <_init>:
void _init(void) {}
1a0012fe:	4770      	bx	lr

1a001300 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001300:	2309      	movs	r3, #9
1a001302:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001304:	f04f 30ff 	mov.w	r0, #4294967295
1a001308:	4770      	bx	lr

1a00130a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00130a:	2358      	movs	r3, #88	; 0x58
1a00130c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00130e:	f04f 30ff 	mov.w	r0, #4294967295
1a001312:	4770      	bx	lr

1a001314 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001314:	2902      	cmp	r1, #2
1a001316:	d904      	bls.n	1a001322 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a001318:	2309      	movs	r3, #9
1a00131a:	6003      	str	r3, [r0, #0]
       return -1;
1a00131c:	f04f 30ff 	mov.w	r0, #4294967295
1a001320:	4770      	bx	lr
       return 1;
1a001322:	2001      	movs	r0, #1
   }
}
1a001324:	4770      	bx	lr

1a001326 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a001326:	2358      	movs	r3, #88	; 0x58
1a001328:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00132a:	f04f 30ff 	mov.w	r0, #4294967295
1a00132e:	4770      	bx	lr

1a001330 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001330:	2902      	cmp	r1, #2
1a001332:	d81f      	bhi.n	1a001374 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a001334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001338:	461d      	mov	r5, r3
1a00133a:	4617      	mov	r7, r2
1a00133c:	4606      	mov	r6, r0
  size_t i = 0;
1a00133e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001340:	42ac      	cmp	r4, r5
1a001342:	d211      	bcs.n	1a001368 <_read_r+0x38>
         int c = __stdio_getchar();
1a001344:	f000 f987 	bl	1a001656 <__stdio_getchar>
         if( c != -1 ){
1a001348:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00134c:	d0f8      	beq.n	1a001340 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00134e:	f104 0801 	add.w	r8, r4, #1
1a001352:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a001354:	280d      	cmp	r0, #13
1a001356:	d003      	beq.n	1a001360 <_read_r+0x30>
1a001358:	280a      	cmp	r0, #10
1a00135a:	d001      	beq.n	1a001360 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00135c:	4644      	mov	r4, r8
1a00135e:	e7ef      	b.n	1a001340 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001360:	f000 f979 	bl	1a001656 <__stdio_getchar>
               return i;
1a001364:	4640      	mov	r0, r8
1a001366:	e003      	b.n	1a001370 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a001368:	2313      	movs	r3, #19
1a00136a:	6033      	str	r3, [r6, #0]
      return -1;
1a00136c:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a001374:	2313      	movs	r3, #19
1a001376:	6003      	str	r3, [r0, #0]
      return -1;
1a001378:	f04f 30ff 	mov.w	r0, #4294967295
}
1a00137c:	4770      	bx	lr

1a00137e <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00137e:	2902      	cmp	r1, #2
1a001380:	d80c      	bhi.n	1a00139c <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a001382:	b570      	push	{r4, r5, r6, lr}
1a001384:	461d      	mov	r5, r3
1a001386:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001388:	2400      	movs	r4, #0
1a00138a:	42ac      	cmp	r4, r5
1a00138c:	d204      	bcs.n	1a001398 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a00138e:	5d30      	ldrb	r0, [r6, r4]
1a001390:	f000 f95c 	bl	1a00164c <__stdio_putchar>
       for (i = 0; i < n; i++)
1a001394:	3401      	adds	r4, #1
1a001396:	e7f8      	b.n	1a00138a <_write_r+0xc>
       return n;
1a001398:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00139a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00139c:	2313      	movs	r3, #19
1a00139e:	6003      	str	r3, [r0, #0]
       return -1;
1a0013a0:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0013a4:	4770      	bx	lr
1a0013a6:	Address 0x1a0013a6 is out of bounds.


1a0013a8 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0013a8:	4b05      	ldr	r3, [pc, #20]	; (1a0013c0 <_sbrk_r+0x18>)
1a0013aa:	681b      	ldr	r3, [r3, #0]
1a0013ac:	b123      	cbz	r3, 1a0013b8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0013ae:	4b04      	ldr	r3, [pc, #16]	; (1a0013c0 <_sbrk_r+0x18>)
1a0013b0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0013b2:	4401      	add	r1, r0
1a0013b4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0013b6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0013b8:	4b01      	ldr	r3, [pc, #4]	; (1a0013c0 <_sbrk_r+0x18>)
1a0013ba:	4a02      	ldr	r2, [pc, #8]	; (1a0013c4 <_sbrk_r+0x1c>)
1a0013bc:	601a      	str	r2, [r3, #0]
1a0013be:	e7f6      	b.n	1a0013ae <_sbrk_r+0x6>
1a0013c0:	100000e0 	.word	0x100000e0
1a0013c4:	1000030c 	.word	0x1000030c

1a0013c8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0013c8:	2300      	movs	r3, #0
1a0013ca:	2b1c      	cmp	r3, #28
1a0013cc:	d812      	bhi.n	1a0013f4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0013ce:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0013d0:	4a09      	ldr	r2, [pc, #36]	; (1a0013f8 <Board_SetupMuxing+0x30>)
1a0013d2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0013d6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0013da:	784a      	ldrb	r2, [r1, #1]
1a0013dc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0013de:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0013e2:	4906      	ldr	r1, [pc, #24]	; (1a0013fc <Board_SetupMuxing+0x34>)
1a0013e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0013e8:	3301      	adds	r3, #1
1a0013ea:	2b1c      	cmp	r3, #28
1a0013ec:	d9f0      	bls.n	1a0013d0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0013ee:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0013f2:	4770      	bx	lr
1a0013f4:	4770      	bx	lr
1a0013f6:	bf00      	nop
1a0013f8:	1a004414 	.word	0x1a004414
1a0013fc:	40086000 	.word	0x40086000

1a001400 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001400:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001402:	4a17      	ldr	r2, [pc, #92]	; (1a001460 <Board_SetupClocking+0x60>)
1a001404:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00140c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001410:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001414:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00141c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001420:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001424:	2201      	movs	r2, #1
1a001426:	490f      	ldr	r1, [pc, #60]	; (1a001464 <Board_SetupClocking+0x64>)
1a001428:	2006      	movs	r0, #6
1a00142a:	f000 fa1b 	bl	1a001864 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00142e:	2400      	movs	r4, #0
1a001430:	b14c      	cbz	r4, 1a001446 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001432:	4b0b      	ldr	r3, [pc, #44]	; (1a001460 <Board_SetupClocking+0x60>)
1a001434:	685a      	ldr	r2, [r3, #4]
1a001436:	f022 020c 	bic.w	r2, r2, #12
1a00143a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00143c:	685a      	ldr	r2, [r3, #4]
1a00143e:	f042 0203 	orr.w	r2, r2, #3
1a001442:	605a      	str	r2, [r3, #4]
}
1a001444:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001446:	4808      	ldr	r0, [pc, #32]	; (1a001468 <Board_SetupClocking+0x68>)
1a001448:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00144c:	2301      	movs	r3, #1
1a00144e:	788a      	ldrb	r2, [r1, #2]
1a001450:	7849      	ldrb	r1, [r1, #1]
1a001452:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001456:	f000 fcdd 	bl	1a001e14 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00145a:	3401      	adds	r4, #1
1a00145c:	e7e8      	b.n	1a001430 <Board_SetupClocking+0x30>
1a00145e:	bf00      	nop
1a001460:	40043000 	.word	0x40043000
1a001464:	0c28cb00 	.word	0x0c28cb00
1a001468:	1a004410 	.word	0x1a004410

1a00146c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00146c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00146e:	f7ff ffab 	bl	1a0013c8 <Board_SetupMuxing>
    Board_SetupClocking();
1a001472:	f7ff ffc5 	bl	1a001400 <Board_SetupClocking>
}
1a001476:	bd08      	pop	{r3, pc}

1a001478 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001478:	2200      	movs	r2, #0
1a00147a:	2a05      	cmp	r2, #5
1a00147c:	d819      	bhi.n	1a0014b2 <Board_LED_Init+0x3a>
{
1a00147e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001480:	490c      	ldr	r1, [pc, #48]	; (1a0014b4 <Board_LED_Init+0x3c>)
1a001482:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001486:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00148a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00148c:	4b0a      	ldr	r3, [pc, #40]	; (1a0014b8 <Board_LED_Init+0x40>)
1a00148e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001492:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001496:	2001      	movs	r0, #1
1a001498:	40a0      	lsls	r0, r4
1a00149a:	4301      	orrs	r1, r0
1a00149c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0014a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0014a4:	2100      	movs	r1, #0
1a0014a6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0014a8:	3201      	adds	r2, #1
1a0014aa:	2a05      	cmp	r2, #5
1a0014ac:	d9e8      	bls.n	1a001480 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0014ae:	bc70      	pop	{r4, r5, r6}
1a0014b0:	4770      	bx	lr
1a0014b2:	4770      	bx	lr
1a0014b4:	1a004494 	.word	0x1a004494
1a0014b8:	400f4000 	.word	0x400f4000

1a0014bc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0014bc:	2300      	movs	r3, #0
1a0014be:	2b03      	cmp	r3, #3
1a0014c0:	d816      	bhi.n	1a0014f0 <Board_TEC_Init+0x34>
{
1a0014c2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0014c4:	490b      	ldr	r1, [pc, #44]	; (1a0014f4 <Board_TEC_Init+0x38>)
1a0014c6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0014ca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0014ce:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0014d0:	4c09      	ldr	r4, [pc, #36]	; (1a0014f8 <Board_TEC_Init+0x3c>)
1a0014d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0014d6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0014da:	2001      	movs	r0, #1
1a0014dc:	40a8      	lsls	r0, r5
1a0014de:	ea21 0100 	bic.w	r1, r1, r0
1a0014e2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0014e6:	3301      	adds	r3, #1
1a0014e8:	2b03      	cmp	r3, #3
1a0014ea:	d9eb      	bls.n	1a0014c4 <Board_TEC_Init+0x8>
   }
}
1a0014ec:	bc30      	pop	{r4, r5}
1a0014ee:	4770      	bx	lr
1a0014f0:	4770      	bx	lr
1a0014f2:	bf00      	nop
1a0014f4:	1a00448c 	.word	0x1a00448c
1a0014f8:	400f4000 	.word	0x400f4000

1a0014fc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0014fc:	2300      	movs	r3, #0
1a0014fe:	2b08      	cmp	r3, #8
1a001500:	d816      	bhi.n	1a001530 <Board_GPIO_Init+0x34>
{
1a001502:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001504:	490b      	ldr	r1, [pc, #44]	; (1a001534 <Board_GPIO_Init+0x38>)
1a001506:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00150a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00150e:	784d      	ldrb	r5, [r1, #1]
1a001510:	4c09      	ldr	r4, [pc, #36]	; (1a001538 <Board_GPIO_Init+0x3c>)
1a001512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001516:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00151a:	2001      	movs	r0, #1
1a00151c:	40a8      	lsls	r0, r5
1a00151e:	ea21 0100 	bic.w	r1, r1, r0
1a001522:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001526:	3301      	adds	r3, #1
1a001528:	2b08      	cmp	r3, #8
1a00152a:	d9eb      	bls.n	1a001504 <Board_GPIO_Init+0x8>
   }
}
1a00152c:	bc30      	pop	{r4, r5}
1a00152e:	4770      	bx	lr
1a001530:	4770      	bx	lr
1a001532:	bf00      	nop
1a001534:	1a0044a0 	.word	0x1a0044a0
1a001538:	400f4000 	.word	0x400f4000

1a00153c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00153c:	b510      	push	{r4, lr}
1a00153e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a001540:	4c08      	ldr	r4, [pc, #32]	; (1a001564 <Board_ADC_Init+0x28>)
1a001542:	4669      	mov	r1, sp
1a001544:	4620      	mov	r0, r4
1a001546:	f000 f94d 	bl	1a0017e4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00154a:	4a07      	ldr	r2, [pc, #28]	; (1a001568 <Board_ADC_Init+0x2c>)
1a00154c:	4669      	mov	r1, sp
1a00154e:	4620      	mov	r0, r4
1a001550:	f000 f968 	bl	1a001824 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001554:	2200      	movs	r2, #0
1a001556:	4669      	mov	r1, sp
1a001558:	4620      	mov	r0, r4
1a00155a:	f000 f97c 	bl	1a001856 <Chip_ADC_SetResolution>
}
1a00155e:	b002      	add	sp, #8
1a001560:	bd10      	pop	{r4, pc}
1a001562:	bf00      	nop
1a001564:	400e3000 	.word	0x400e3000
1a001568:	00061a80 	.word	0x00061a80

1a00156c <Board_SPI_Init>:
{
1a00156c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00156e:	4c0b      	ldr	r4, [pc, #44]	; (1a00159c <Board_SPI_Init+0x30>)
1a001570:	4620      	mov	r0, r4
1a001572:	f000 f8b7 	bl	1a0016e4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001576:	6863      	ldr	r3, [r4, #4]
1a001578:	f023 0304 	bic.w	r3, r3, #4
1a00157c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00157e:	6823      	ldr	r3, [r4, #0]
1a001580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001584:	f043 0307 	orr.w	r3, r3, #7
1a001588:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00158a:	4905      	ldr	r1, [pc, #20]	; (1a0015a0 <Board_SPI_Init+0x34>)
1a00158c:	4620      	mov	r0, r4
1a00158e:	f000 f88a 	bl	1a0016a6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001592:	6863      	ldr	r3, [r4, #4]
1a001594:	f043 0302 	orr.w	r3, r3, #2
1a001598:	6063      	str	r3, [r4, #4]
}
1a00159a:	bd10      	pop	{r4, pc}
1a00159c:	400c5000 	.word	0x400c5000
1a0015a0:	000186a0 	.word	0x000186a0

1a0015a4 <Board_I2C_Init>:
{
1a0015a4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0015a6:	2000      	movs	r0, #0
1a0015a8:	f000 f8c8 	bl	1a00173c <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0015ac:	4b04      	ldr	r3, [pc, #16]	; (1a0015c0 <Board_I2C_Init+0x1c>)
1a0015ae:	f640 0208 	movw	r2, #2056	; 0x808
1a0015b2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0015b6:	4903      	ldr	r1, [pc, #12]	; (1a0015c4 <Board_I2C_Init+0x20>)
1a0015b8:	2000      	movs	r0, #0
1a0015ba:	f000 f8d1 	bl	1a001760 <Chip_I2C_SetClockRate>
}
1a0015be:	bd08      	pop	{r3, pc}
1a0015c0:	40086000 	.word	0x40086000
1a0015c4:	000f4240 	.word	0x000f4240

1a0015c8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0015c8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0015ca:	4c07      	ldr	r4, [pc, #28]	; (1a0015e8 <Board_Debug_Init+0x20>)
1a0015cc:	4620      	mov	r0, r4
1a0015ce:	f000 fcdb 	bl	1a001f88 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0015d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0015d6:	4620      	mov	r0, r4
1a0015d8:	f000 fd20 	bl	1a00201c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0015dc:	2303      	movs	r3, #3
1a0015de:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0015e0:	2301      	movs	r3, #1
1a0015e2:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0015e4:	bd10      	pop	{r4, pc}
1a0015e6:	bf00      	nop
1a0015e8:	400c1000 	.word	0x400c1000

1a0015ec <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0015ec:	4b03      	ldr	r3, [pc, #12]	; (1a0015fc <Board_UARTPutChar+0x10>)
1a0015ee:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0015f0:	f013 0f20 	tst.w	r3, #32
1a0015f4:	d0fa      	beq.n	1a0015ec <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0015f6:	4b01      	ldr	r3, [pc, #4]	; (1a0015fc <Board_UARTPutChar+0x10>)
1a0015f8:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0015fa:	4770      	bx	lr
1a0015fc:	400c1000 	.word	0x400c1000

1a001600 <Board_UARTGetChar>:
	return pUART->LSR;
1a001600:	4b05      	ldr	r3, [pc, #20]	; (1a001618 <Board_UARTGetChar+0x18>)
1a001602:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a001604:	f013 0f01 	tst.w	r3, #1
1a001608:	d003      	beq.n	1a001612 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00160a:	4b03      	ldr	r3, [pc, #12]	; (1a001618 <Board_UARTGetChar+0x18>)
1a00160c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00160e:	b2c0      	uxtb	r0, r0
1a001610:	4770      	bx	lr
   }
   return EOF;
1a001612:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001616:	4770      	bx	lr
1a001618:	400c1000 	.word	0x400c1000

1a00161c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00161c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00161e:	f7ff ffd3 	bl	1a0015c8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001622:	4809      	ldr	r0, [pc, #36]	; (1a001648 <Board_Init+0x2c>)
1a001624:	f000 f8b8 	bl	1a001798 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a001628:	f7ff ff68 	bl	1a0014fc <Board_GPIO_Init>
   Board_ADC_Init();
1a00162c:	f7ff ff86 	bl	1a00153c <Board_ADC_Init>
   Board_SPI_Init();
1a001630:	f7ff ff9c 	bl	1a00156c <Board_SPI_Init>
   Board_I2C_Init();
1a001634:	f7ff ffb6 	bl	1a0015a4 <Board_I2C_Init>

   Board_LED_Init();
1a001638:	f7ff ff1e 	bl	1a001478 <Board_LED_Init>
   Board_TEC_Init();
1a00163c:	f7ff ff3e 	bl	1a0014bc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a001640:	f000 f9bc 	bl	1a0019bc <SystemCoreClockUpdate>
}
1a001644:	bd08      	pop	{r3, pc}
1a001646:	bf00      	nop
1a001648:	400f4000 	.word	0x400f4000

1a00164c <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a00164c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00164e:	b2c0      	uxtb	r0, r0
1a001650:	f7ff ffcc 	bl	1a0015ec <Board_UARTPutChar>
}
1a001654:	bd08      	pop	{r3, pc}

1a001656 <__stdio_getchar>:

int __stdio_getchar()
{
1a001656:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a001658:	f7ff ffd2 	bl	1a001600 <Board_UARTGetChar>
}
1a00165c:	bd08      	pop	{r3, pc}

1a00165e <__stdio_init>:

void __stdio_init()
{
1a00165e:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a001660:	f7ff ffb2 	bl	1a0015c8 <Board_Debug_Init>
1a001664:	bd08      	pop	{r3, pc}
1a001666:	Address 0x1a001666 is out of bounds.


1a001668 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001668:	4b03      	ldr	r3, [pc, #12]	; (1a001678 <Chip_SSP_GetClockIndex+0x10>)
1a00166a:	4298      	cmp	r0, r3
1a00166c:	d001      	beq.n	1a001672 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00166e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001670:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001672:	20a5      	movs	r0, #165	; 0xa5
1a001674:	4770      	bx	lr
1a001676:	bf00      	nop
1a001678:	400c5000 	.word	0x400c5000

1a00167c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00167c:	4b04      	ldr	r3, [pc, #16]	; (1a001690 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00167e:	4298      	cmp	r0, r3
1a001680:	d002      	beq.n	1a001688 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001682:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001686:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001688:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00168c:	4770      	bx	lr
1a00168e:	bf00      	nop
1a001690:	400c5000 	.word	0x400c5000

1a001694 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001694:	6803      	ldr	r3, [r0, #0]
1a001696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00169a:	0209      	lsls	r1, r1, #8
1a00169c:	b289      	uxth	r1, r1
1a00169e:	4319      	orrs	r1, r3
1a0016a0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0016a2:	6102      	str	r2, [r0, #16]
}
1a0016a4:	4770      	bx	lr

1a0016a6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0016a6:	b570      	push	{r4, r5, r6, lr}
1a0016a8:	4606      	mov	r6, r0
1a0016aa:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016ac:	f7ff ffe6 	bl	1a00167c <Chip_SSP_GetPeriphClockIndex>
1a0016b0:	f000 fc2e 	bl	1a001f10 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0016b4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0016b6:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0016ba:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0016bc:	e000      	b.n	1a0016c0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0016be:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0016c0:	42ab      	cmp	r3, r5
1a0016c2:	d90b      	bls.n	1a0016dc <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0016c4:	1c4c      	adds	r4, r1, #1
1a0016c6:	fb02 f304 	mul.w	r3, r2, r4
1a0016ca:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0016ce:	429d      	cmp	r5, r3
1a0016d0:	d2f6      	bcs.n	1a0016c0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0016d2:	2cff      	cmp	r4, #255	; 0xff
1a0016d4:	d9f3      	bls.n	1a0016be <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0016d6:	3202      	adds	r2, #2
				cr0_div = 0;
1a0016d8:	2100      	movs	r1, #0
1a0016da:	e7f1      	b.n	1a0016c0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0016dc:	4630      	mov	r0, r6
1a0016de:	f7ff ffd9 	bl	1a001694 <Chip_SSP_SetClockRate>
}
1a0016e2:	bd70      	pop	{r4, r5, r6, pc}

1a0016e4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0016e4:	b510      	push	{r4, lr}
1a0016e6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0016e8:	f7ff ffbe 	bl	1a001668 <Chip_SSP_GetClockIndex>
1a0016ec:	f000 fbf6 	bl	1a001edc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016f0:	4620      	mov	r0, r4
1a0016f2:	f7ff ffc3 	bl	1a00167c <Chip_SSP_GetPeriphClockIndex>
1a0016f6:	f000 fbf1 	bl	1a001edc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0016fa:	6863      	ldr	r3, [r4, #4]
1a0016fc:	f023 0304 	bic.w	r3, r3, #4
1a001700:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001702:	6823      	ldr	r3, [r4, #0]
1a001704:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001708:	f043 0307 	orr.w	r3, r3, #7
1a00170c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00170e:	4902      	ldr	r1, [pc, #8]	; (1a001718 <Chip_SSP_Init+0x34>)
1a001710:	4620      	mov	r0, r4
1a001712:	f7ff ffc8 	bl	1a0016a6 <Chip_SSP_SetBitRate>
}
1a001716:	bd10      	pop	{r4, pc}
1a001718:	000186a0 	.word	0x000186a0

1a00171c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00171c:	2901      	cmp	r1, #1
1a00171e:	d109      	bne.n	1a001734 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001720:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001724:	0082      	lsls	r2, r0, #2
1a001726:	4b04      	ldr	r3, [pc, #16]	; (1a001738 <Chip_I2C_EventHandler+0x1c>)
1a001728:	4413      	add	r3, r2
1a00172a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00172c:	7d13      	ldrb	r3, [r2, #20]
1a00172e:	b2db      	uxtb	r3, r3
1a001730:	2b04      	cmp	r3, #4
1a001732:	d0fb      	beq.n	1a00172c <Chip_I2C_EventHandler+0x10>
}
1a001734:	4770      	bx	lr
1a001736:	bf00      	nop
1a001738:	10000000 	.word	0x10000000

1a00173c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00173c:	b570      	push	{r4, r5, r6, lr}
1a00173e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001740:	4e06      	ldr	r6, [pc, #24]	; (1a00175c <Chip_I2C_Init+0x20>)
1a001742:	00c4      	lsls	r4, r0, #3
1a001744:	1a22      	subs	r2, r4, r0
1a001746:	0093      	lsls	r3, r2, #2
1a001748:	4433      	add	r3, r6
1a00174a:	8898      	ldrh	r0, [r3, #4]
1a00174c:	f000 fbc6 	bl	1a001edc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001750:	1b64      	subs	r4, r4, r5
1a001752:	00a3      	lsls	r3, r4, #2
1a001754:	58f3      	ldr	r3, [r6, r3]
1a001756:	226c      	movs	r2, #108	; 0x6c
1a001758:	619a      	str	r2, [r3, #24]
}
1a00175a:	bd70      	pop	{r4, r5, r6, pc}
1a00175c:	10000000 	.word	0x10000000

1a001760 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001764:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001766:	4e0b      	ldr	r6, [pc, #44]	; (1a001794 <Chip_I2C_SetClockRate+0x34>)
1a001768:	00c5      	lsls	r5, r0, #3
1a00176a:	1a2b      	subs	r3, r5, r0
1a00176c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001770:	eb06 0308 	add.w	r3, r6, r8
1a001774:	8898      	ldrh	r0, [r3, #4]
1a001776:	f000 fbcb 	bl	1a001f10 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00177a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00177e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001782:	0842      	lsrs	r2, r0, #1
1a001784:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001786:	f856 3008 	ldr.w	r3, [r6, r8]
1a00178a:	691a      	ldr	r2, [r3, #16]
1a00178c:	1a80      	subs	r0, r0, r2
1a00178e:	6158      	str	r0, [r3, #20]
}
1a001790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001794:	10000000 	.word	0x10000000

1a001798 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001798:	4770      	bx	lr
1a00179a:	Address 0x1a00179a is out of bounds.


1a00179c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00179c:	4b03      	ldr	r3, [pc, #12]	; (1a0017ac <Chip_ADC_GetClockIndex+0x10>)
1a00179e:	4298      	cmp	r0, r3
1a0017a0:	d001      	beq.n	1a0017a6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0017a2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0017a4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0017a6:	2004      	movs	r0, #4
1a0017a8:	4770      	bx	lr
1a0017aa:	bf00      	nop
1a0017ac:	400e4000 	.word	0x400e4000

1a0017b0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0017b0:	b570      	push	{r4, r5, r6, lr}
1a0017b2:	460d      	mov	r5, r1
1a0017b4:	4614      	mov	r4, r2
1a0017b6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0017b8:	f7ff fff0 	bl	1a00179c <Chip_ADC_GetClockIndex>
1a0017bc:	f000 fba8 	bl	1a001f10 <Chip_Clock_GetRate>
	if (burstMode) {
1a0017c0:	b155      	cbz	r5, 1a0017d8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0017c2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0017c6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0017ca:	0064      	lsls	r4, r4, #1
1a0017cc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0017d0:	b2c0      	uxtb	r0, r0
1a0017d2:	3801      	subs	r0, #1
	return div;
}
1a0017d4:	b2c0      	uxtb	r0, r0
1a0017d6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0017d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0017dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0017e0:	e7f1      	b.n	1a0017c6 <getClkDiv+0x16>
1a0017e2:	Address 0x1a0017e2 is out of bounds.


1a0017e4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0017e4:	b538      	push	{r3, r4, r5, lr}
1a0017e6:	4605      	mov	r5, r0
1a0017e8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0017ea:	f7ff ffd7 	bl	1a00179c <Chip_ADC_GetClockIndex>
1a0017ee:	2301      	movs	r3, #1
1a0017f0:	461a      	mov	r2, r3
1a0017f2:	4619      	mov	r1, r3
1a0017f4:	f000 fb54 	bl	1a001ea0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0017f8:	2100      	movs	r1, #0
1a0017fa:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0017fc:	4a08      	ldr	r2, [pc, #32]	; (1a001820 <Chip_ADC_Init+0x3c>)
1a0017fe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001800:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001802:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001804:	230b      	movs	r3, #11
1a001806:	4628      	mov	r0, r5
1a001808:	f7ff ffd2 	bl	1a0017b0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00180c:	0200      	lsls	r0, r0, #8
1a00180e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001812:	7920      	ldrb	r0, [r4, #4]
1a001814:	0440      	lsls	r0, r0, #17
1a001816:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00181a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00181c:	6028      	str	r0, [r5, #0]
}
1a00181e:	bd38      	pop	{r3, r4, r5, pc}
1a001820:	00061a80 	.word	0x00061a80

1a001824 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001824:	b570      	push	{r4, r5, r6, lr}
1a001826:	4605      	mov	r5, r0
1a001828:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00182a:	6804      	ldr	r4, [r0, #0]
1a00182c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001830:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001834:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001836:	790b      	ldrb	r3, [r1, #4]
1a001838:	f1c3 030b 	rsb	r3, r3, #11
1a00183c:	b2db      	uxtb	r3, r3
1a00183e:	7949      	ldrb	r1, [r1, #5]
1a001840:	f7ff ffb6 	bl	1a0017b0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001844:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001848:	7933      	ldrb	r3, [r6, #4]
1a00184a:	045b      	lsls	r3, r3, #17
1a00184c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001850:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001852:	602b      	str	r3, [r5, #0]
}
1a001854:	bd70      	pop	{r4, r5, r6, pc}

1a001856 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001856:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001858:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00185a:	680a      	ldr	r2, [r1, #0]
1a00185c:	f7ff ffe2 	bl	1a001824 <Chip_ADC_SetSampleRate>
}
1a001860:	bd08      	pop	{r3, pc}
1a001862:	Address 0x1a001862 is out of bounds.


1a001864 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001864:	b570      	push	{r4, r5, r6, lr}
1a001866:	b08a      	sub	sp, #40	; 0x28
1a001868:	4605      	mov	r5, r0
1a00186a:	460e      	mov	r6, r1
1a00186c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00186e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001872:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001874:	2806      	cmp	r0, #6
1a001876:	d018      	beq.n	1a0018aa <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001878:	2300      	movs	r3, #0
1a00187a:	2201      	movs	r2, #1
1a00187c:	4629      	mov	r1, r5
1a00187e:	2004      	movs	r0, #4
1a001880:	f000 fac8 	bl	1a001e14 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001884:	4a4a      	ldr	r2, [pc, #296]	; (1a0019b0 <Chip_SetupCoreClock+0x14c>)
1a001886:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001888:	f043 0301 	orr.w	r3, r3, #1
1a00188c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00188e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001892:	a901      	add	r1, sp, #4
1a001894:	4630      	mov	r0, r6
1a001896:	f000 fa35 	bl	1a001d04 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00189a:	4b46      	ldr	r3, [pc, #280]	; (1a0019b4 <Chip_SetupCoreClock+0x150>)
1a00189c:	429e      	cmp	r6, r3
1a00189e:	d916      	bls.n	1a0018ce <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0018a0:	9b01      	ldr	r3, [sp, #4]
1a0018a2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0018a6:	d003      	beq.n	1a0018b0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0018a8:	e7fe      	b.n	1a0018a8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0018aa:	f000 f98d 	bl	1a001bc8 <Chip_Clock_EnableCrystal>
1a0018ae:	e7e3      	b.n	1a001878 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0018b0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0018b4:	d005      	beq.n	1a0018c2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0018b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0018ba:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0018bc:	2500      	movs	r5, #0
			direct = 1;
1a0018be:	2601      	movs	r6, #1
1a0018c0:	e007      	b.n	1a0018d2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0018c2:	9b04      	ldr	r3, [sp, #16]
1a0018c4:	3301      	adds	r3, #1
1a0018c6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0018c8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0018ca:	2600      	movs	r6, #0
1a0018cc:	e001      	b.n	1a0018d2 <Chip_SetupCoreClock+0x6e>
1a0018ce:	2500      	movs	r5, #0
1a0018d0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0018d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0018d6:	9b01      	ldr	r3, [sp, #4]
1a0018d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0018dc:	9a05      	ldr	r2, [sp, #20]
1a0018de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0018e2:	9a03      	ldr	r2, [sp, #12]
1a0018e4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0018e8:	9a04      	ldr	r2, [sp, #16]
1a0018ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0018ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0018f2:	4a2f      	ldr	r2, [pc, #188]	; (1a0019b0 <Chip_SetupCoreClock+0x14c>)
1a0018f4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0018f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0019b0 <Chip_SetupCoreClock+0x14c>)
1a0018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0018fa:	f013 0f01 	tst.w	r3, #1
1a0018fe:	d0fa      	beq.n	1a0018f6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001900:	2300      	movs	r3, #0
1a001902:	2201      	movs	r2, #1
1a001904:	2109      	movs	r1, #9
1a001906:	2004      	movs	r0, #4
1a001908:	f000 fa84 	bl	1a001e14 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00190c:	b306      	cbz	r6, 1a001950 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00190e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001912:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001914:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001916:	1e5a      	subs	r2, r3, #1
1a001918:	9209      	str	r2, [sp, #36]	; 0x24
1a00191a:	2b00      	cmp	r3, #0
1a00191c:	d1fa      	bne.n	1a001914 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00191e:	9b01      	ldr	r3, [sp, #4]
1a001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001924:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001926:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00192a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00192e:	9a05      	ldr	r2, [sp, #20]
1a001930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001934:	9a03      	ldr	r2, [sp, #12]
1a001936:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00193a:	9a04      	ldr	r2, [sp, #16]
1a00193c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001944:	4a1a      	ldr	r2, [pc, #104]	; (1a0019b0 <Chip_SetupCoreClock+0x14c>)
1a001946:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001948:	2c00      	cmp	r4, #0
1a00194a:	d12e      	bne.n	1a0019aa <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00194c:	b00a      	add	sp, #40	; 0x28
1a00194e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001950:	2d00      	cmp	r5, #0
1a001952:	d0f9      	beq.n	1a001948 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001954:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001958:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00195a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00195c:	1e5a      	subs	r2, r3, #1
1a00195e:	9209      	str	r2, [sp, #36]	; 0x24
1a001960:	2b00      	cmp	r3, #0
1a001962:	d1fa      	bne.n	1a00195a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001964:	9b04      	ldr	r3, [sp, #16]
1a001966:	1e5a      	subs	r2, r3, #1
1a001968:	9204      	str	r2, [sp, #16]
1a00196a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00196e:	9b01      	ldr	r3, [sp, #4]
1a001970:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001974:	9905      	ldr	r1, [sp, #20]
1a001976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00197a:	9903      	ldr	r1, [sp, #12]
1a00197c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001988:	4a09      	ldr	r2, [pc, #36]	; (1a0019b0 <Chip_SetupCoreClock+0x14c>)
1a00198a:	6453      	str	r3, [r2, #68]	; 0x44
1a00198c:	e7dc      	b.n	1a001948 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00198e:	480a      	ldr	r0, [pc, #40]	; (1a0019b8 <Chip_SetupCoreClock+0x154>)
1a001990:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001994:	78cb      	ldrb	r3, [r1, #3]
1a001996:	788a      	ldrb	r2, [r1, #2]
1a001998:	7849      	ldrb	r1, [r1, #1]
1a00199a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00199e:	f000 fa39 	bl	1a001e14 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0019a2:	3401      	adds	r4, #1
1a0019a4:	2c11      	cmp	r4, #17
1a0019a6:	d9f2      	bls.n	1a00198e <Chip_SetupCoreClock+0x12a>
1a0019a8:	e7d0      	b.n	1a00194c <Chip_SetupCoreClock+0xe8>
1a0019aa:	2400      	movs	r4, #0
1a0019ac:	e7fa      	b.n	1a0019a4 <Chip_SetupCoreClock+0x140>
1a0019ae:	bf00      	nop
1a0019b0:	40050000 	.word	0x40050000
1a0019b4:	068e7780 	.word	0x068e7780
1a0019b8:	1a0044b8 	.word	0x1a0044b8

1a0019bc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0019bc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0019be:	2069      	movs	r0, #105	; 0x69
1a0019c0:	f000 faa6 	bl	1a001f10 <Chip_Clock_GetRate>
1a0019c4:	4b01      	ldr	r3, [pc, #4]	; (1a0019cc <SystemCoreClockUpdate+0x10>)
1a0019c6:	6018      	str	r0, [r3, #0]
}
1a0019c8:	bd08      	pop	{r3, pc}
1a0019ca:	bf00      	nop
1a0019cc:	100002f0 	.word	0x100002f0

1a0019d0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0019d0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0019d2:	680b      	ldr	r3, [r1, #0]
1a0019d4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0019d8:	d002      	beq.n	1a0019e0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0019de:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0019e0:	4607      	mov	r7, r0
1a0019e2:	2501      	movs	r5, #1
1a0019e4:	e03a      	b.n	1a001a5c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0019e6:	694b      	ldr	r3, [r1, #20]
1a0019e8:	fb03 f302 	mul.w	r3, r3, r2
1a0019ec:	fbb3 f3f5 	udiv	r3, r3, r5
1a0019f0:	e01c      	b.n	1a001a2c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0019f2:	461c      	mov	r4, r3
	if (val < 0)
1a0019f4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0019f8:	d427      	bmi.n	1a001a4a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0019fa:	4567      	cmp	r7, ip
1a0019fc:	d906      	bls.n	1a001a0c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0019fe:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001a00:	1c77      	adds	r7, r6, #1
1a001a02:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001a04:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001a06:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001a08:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001a0a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001a0c:	3201      	adds	r2, #1
1a001a0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001a12:	dc1d      	bgt.n	1a001a50 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001a14:	680c      	ldr	r4, [r1, #0]
1a001a16:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001a1a:	d0e4      	beq.n	1a0019e6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001a1c:	1c73      	adds	r3, r6, #1
1a001a1e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001a22:	694b      	ldr	r3, [r1, #20]
1a001a24:	fb03 f30c 	mul.w	r3, r3, ip
1a001a28:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001a2c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001a68 <pll_calc_divs+0x98>
1a001a30:	4563      	cmp	r3, ip
1a001a32:	d9eb      	bls.n	1a001a0c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001a34:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001a6c <pll_calc_divs+0x9c>
1a001a38:	4563      	cmp	r3, ip
1a001a3a:	d809      	bhi.n	1a001a50 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001a3c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001a40:	d1d7      	bne.n	1a0019f2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001a42:	1c74      	adds	r4, r6, #1
1a001a44:	fa23 f404 	lsr.w	r4, r3, r4
1a001a48:	e7d4      	b.n	1a0019f4 <pll_calc_divs+0x24>
		return -val;
1a001a4a:	f1cc 0c00 	rsb	ip, ip, #0
1a001a4e:	e7d4      	b.n	1a0019fa <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001a50:	3601      	adds	r6, #1
1a001a52:	2e03      	cmp	r6, #3
1a001a54:	dc01      	bgt.n	1a001a5a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001a56:	2201      	movs	r2, #1
1a001a58:	e7d9      	b.n	1a001a0e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001a5a:	3501      	adds	r5, #1
1a001a5c:	2d04      	cmp	r5, #4
1a001a5e:	dc01      	bgt.n	1a001a64 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001a60:	2600      	movs	r6, #0
1a001a62:	e7f6      	b.n	1a001a52 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001a64:	bcf0      	pop	{r4, r5, r6, r7}
1a001a66:	4770      	bx	lr
1a001a68:	094c5eff 	.word	0x094c5eff
1a001a6c:	1312d000 	.word	0x1312d000

1a001a70 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a72:	b099      	sub	sp, #100	; 0x64
1a001a74:	4605      	mov	r5, r0
1a001a76:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001a78:	225c      	movs	r2, #92	; 0x5c
1a001a7a:	2100      	movs	r1, #0
1a001a7c:	a801      	add	r0, sp, #4
1a001a7e:	f001 fec2 	bl	1a003806 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001a82:	2380      	movs	r3, #128	; 0x80
1a001a84:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001a86:	6963      	ldr	r3, [r4, #20]
1a001a88:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001a8a:	7923      	ldrb	r3, [r4, #4]
1a001a8c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001a90:	4669      	mov	r1, sp
1a001a92:	4628      	mov	r0, r5
1a001a94:	f7ff ff9c 	bl	1a0019d0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001a98:	9b06      	ldr	r3, [sp, #24]
1a001a9a:	42ab      	cmp	r3, r5
1a001a9c:	d027      	beq.n	1a001aee <pll_get_frac+0x7e>
	if (val < 0)
1a001a9e:	1aeb      	subs	r3, r5, r3
1a001aa0:	d42e      	bmi.n	1a001b00 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001aa2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001aaa:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001aac:	6963      	ldr	r3, [r4, #20]
1a001aae:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001ab0:	7923      	ldrb	r3, [r4, #4]
1a001ab2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001ab6:	a910      	add	r1, sp, #64	; 0x40
1a001ab8:	4628      	mov	r0, r5
1a001aba:	f7ff ff89 	bl	1a0019d0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001ac0:	42ab      	cmp	r3, r5
1a001ac2:	d01f      	beq.n	1a001b04 <pll_get_frac+0x94>
	if (val < 0)
1a001ac4:	1aeb      	subs	r3, r5, r3
1a001ac6:	d425      	bmi.n	1a001b14 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001ac8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001aca:	4b2b      	ldr	r3, [pc, #172]	; (1a001b78 <pll_get_frac+0x108>)
1a001acc:	429d      	cmp	r5, r3
1a001ace:	d923      	bls.n	1a001b18 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001ad2:	1aed      	subs	r5, r5, r3
1a001ad4:	d433      	bmi.n	1a001b3e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001ad6:	42ae      	cmp	r6, r5
1a001ad8:	dc3b      	bgt.n	1a001b52 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001ada:	42be      	cmp	r6, r7
1a001adc:	dc31      	bgt.n	1a001b42 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001ade:	466d      	mov	r5, sp
1a001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001aec:	e006      	b.n	1a001afc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001aee:	466d      	mov	r5, sp
1a001af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001af4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001afc:	b019      	add	sp, #100	; 0x64
1a001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001b00:	425b      	negs	r3, r3
1a001b02:	e7ce      	b.n	1a001aa2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001b04:	ad10      	add	r5, sp, #64	; 0x40
1a001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001b12:	e7f3      	b.n	1a001afc <pll_get_frac+0x8c>
		return -val;
1a001b14:	425b      	negs	r3, r3
1a001b16:	e7d7      	b.n	1a001ac8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001b18:	2340      	movs	r3, #64	; 0x40
1a001b1a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001b1c:	6963      	ldr	r3, [r4, #20]
1a001b1e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001b20:	a908      	add	r1, sp, #32
1a001b22:	4628      	mov	r0, r5
1a001b24:	f7ff ff54 	bl	1a0019d0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001b2a:	42ab      	cmp	r3, r5
1a001b2c:	d1d0      	bne.n	1a001ad0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001b2e:	ad08      	add	r5, sp, #32
1a001b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001b3c:	e7de      	b.n	1a001afc <pll_get_frac+0x8c>
		return -val;
1a001b3e:	426d      	negs	r5, r5
1a001b40:	e7c9      	b.n	1a001ad6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001b42:	ad10      	add	r5, sp, #64	; 0x40
1a001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b50:	e7d4      	b.n	1a001afc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001b52:	42af      	cmp	r7, r5
1a001b54:	db07      	blt.n	1a001b66 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001b56:	ad08      	add	r5, sp, #32
1a001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b64:	e7ca      	b.n	1a001afc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001b66:	ad10      	add	r5, sp, #64	; 0x40
1a001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b74:	e7c2      	b.n	1a001afc <pll_get_frac+0x8c>
1a001b76:	bf00      	nop
1a001b78:	068e7780 	.word	0x068e7780

1a001b7c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001b7c:	b430      	push	{r4, r5}
1a001b7e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001b80:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001b82:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001b84:	e000      	b.n	1a001b88 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001b86:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001b88:	281c      	cmp	r0, #28
1a001b8a:	d118      	bne.n	1a001bbe <Chip_Clock_FindBaseClock+0x42>
1a001b8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001b90:	0051      	lsls	r1, r2, #1
1a001b92:	4a0c      	ldr	r2, [pc, #48]	; (1a001bc4 <Chip_Clock_FindBaseClock+0x48>)
1a001b94:	440a      	add	r2, r1
1a001b96:	7914      	ldrb	r4, [r2, #4]
1a001b98:	4284      	cmp	r4, r0
1a001b9a:	d010      	beq.n	1a001bbe <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001b9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001ba0:	004a      	lsls	r2, r1, #1
1a001ba2:	4908      	ldr	r1, [pc, #32]	; (1a001bc4 <Chip_Clock_FindBaseClock+0x48>)
1a001ba4:	5a8a      	ldrh	r2, [r1, r2]
1a001ba6:	42aa      	cmp	r2, r5
1a001ba8:	d8ed      	bhi.n	1a001b86 <Chip_Clock_FindBaseClock+0xa>
1a001baa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001bae:	0051      	lsls	r1, r2, #1
1a001bb0:	4a04      	ldr	r2, [pc, #16]	; (1a001bc4 <Chip_Clock_FindBaseClock+0x48>)
1a001bb2:	440a      	add	r2, r1
1a001bb4:	8852      	ldrh	r2, [r2, #2]
1a001bb6:	42aa      	cmp	r2, r5
1a001bb8:	d3e5      	bcc.n	1a001b86 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001bba:	4620      	mov	r0, r4
1a001bbc:	e7e4      	b.n	1a001b88 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001bbe:	bc30      	pop	{r4, r5}
1a001bc0:	4770      	bx	lr
1a001bc2:	bf00      	nop
1a001bc4:	1a00450c 	.word	0x1a00450c

1a001bc8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001bc8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001bce:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001bd0:	4a0d      	ldr	r2, [pc, #52]	; (1a001c08 <Chip_Clock_EnableCrystal+0x40>)
1a001bd2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001bd4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001bd8:	6992      	ldr	r2, [r2, #24]
1a001bda:	428a      	cmp	r2, r1
1a001bdc:	d001      	beq.n	1a001be2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001bde:	4a0a      	ldr	r2, [pc, #40]	; (1a001c08 <Chip_Clock_EnableCrystal+0x40>)
1a001be0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001be2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001be6:	4a09      	ldr	r2, [pc, #36]	; (1a001c0c <Chip_Clock_EnableCrystal+0x44>)
1a001be8:	6811      	ldr	r1, [r2, #0]
1a001bea:	4a09      	ldr	r2, [pc, #36]	; (1a001c10 <Chip_Clock_EnableCrystal+0x48>)
1a001bec:	4291      	cmp	r1, r2
1a001bee:	d901      	bls.n	1a001bf4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001bf0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001bf4:	4a04      	ldr	r2, [pc, #16]	; (1a001c08 <Chip_Clock_EnableCrystal+0x40>)
1a001bf6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001bf8:	9b01      	ldr	r3, [sp, #4]
1a001bfa:	1e5a      	subs	r2, r3, #1
1a001bfc:	9201      	str	r2, [sp, #4]
1a001bfe:	2b00      	cmp	r3, #0
1a001c00:	d1fa      	bne.n	1a001bf8 <Chip_Clock_EnableCrystal+0x30>
}
1a001c02:	b002      	add	sp, #8
1a001c04:	4770      	bx	lr
1a001c06:	bf00      	nop
1a001c08:	40050000 	.word	0x40050000
1a001c0c:	1a0044b4 	.word	0x1a0044b4
1a001c10:	01312cff 	.word	0x01312cff

1a001c14 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001c14:	3012      	adds	r0, #18
1a001c16:	4b05      	ldr	r3, [pc, #20]	; (1a001c2c <Chip_Clock_GetDividerSource+0x18>)
1a001c18:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001c1c:	f010 0f01 	tst.w	r0, #1
1a001c20:	d102      	bne.n	1a001c28 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001c22:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001c26:	4770      	bx	lr
		return CLKINPUT_PD;
1a001c28:	2011      	movs	r0, #17
}
1a001c2a:	4770      	bx	lr
1a001c2c:	40050000 	.word	0x40050000

1a001c30 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001c30:	f100 0212 	add.w	r2, r0, #18
1a001c34:	4b03      	ldr	r3, [pc, #12]	; (1a001c44 <Chip_Clock_GetDividerDivisor+0x14>)
1a001c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001c3a:	4b03      	ldr	r3, [pc, #12]	; (1a001c48 <Chip_Clock_GetDividerDivisor+0x18>)
1a001c3c:	5c18      	ldrb	r0, [r3, r0]
}
1a001c3e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001c42:	4770      	bx	lr
1a001c44:	40050000 	.word	0x40050000
1a001c48:	1a004504 	.word	0x1a004504

1a001c4c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001c4c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001c4e:	2810      	cmp	r0, #16
1a001c50:	d80a      	bhi.n	1a001c68 <Chip_Clock_GetClockInputHz+0x1c>
1a001c52:	e8df f000 	tbb	[pc, r0]
1a001c56:	0b44      	.short	0x0b44
1a001c58:	0921180d 	.word	0x0921180d
1a001c5c:	2d2a2724 	.word	0x2d2a2724
1a001c60:	34300909 	.word	0x34300909
1a001c64:	3c38      	.short	0x3c38
1a001c66:	40          	.byte	0x40
1a001c67:	00          	.byte	0x00
	uint32_t rate = 0;
1a001c68:	2000      	movs	r0, #0
1a001c6a:	e03a      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001c6c:	481e      	ldr	r0, [pc, #120]	; (1a001ce8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001c6e:	e038      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001c70:	4b1e      	ldr	r3, [pc, #120]	; (1a001cec <Chip_Clock_GetClockInputHz+0xa0>)
1a001c72:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001c76:	f003 0307 	and.w	r3, r3, #7
1a001c7a:	2b04      	cmp	r3, #4
1a001c7c:	d001      	beq.n	1a001c82 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001c7e:	481c      	ldr	r0, [pc, #112]	; (1a001cf0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001c80:	e02f      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001c82:	2000      	movs	r0, #0
1a001c84:	e02d      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001c86:	4b19      	ldr	r3, [pc, #100]	; (1a001cec <Chip_Clock_GetClockInputHz+0xa0>)
1a001c88:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001c8c:	f003 0307 	and.w	r3, r3, #7
1a001c90:	2b04      	cmp	r3, #4
1a001c92:	d027      	beq.n	1a001ce4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001c94:	4816      	ldr	r0, [pc, #88]	; (1a001cf0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001c96:	e024      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001c98:	4b16      	ldr	r3, [pc, #88]	; (1a001cf4 <Chip_Clock_GetClockInputHz+0xa8>)
1a001c9a:	6818      	ldr	r0, [r3, #0]
		break;
1a001c9c:	e021      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001c9e:	4b16      	ldr	r3, [pc, #88]	; (1a001cf8 <Chip_Clock_GetClockInputHz+0xac>)
1a001ca0:	6818      	ldr	r0, [r3, #0]
		break;
1a001ca2:	e01e      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001ca4:	4b15      	ldr	r3, [pc, #84]	; (1a001cfc <Chip_Clock_GetClockInputHz+0xb0>)
1a001ca6:	6818      	ldr	r0, [r3, #0]
		break;
1a001ca8:	e01b      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001caa:	4b14      	ldr	r3, [pc, #80]	; (1a001cfc <Chip_Clock_GetClockInputHz+0xb0>)
1a001cac:	6858      	ldr	r0, [r3, #4]
		break;
1a001cae:	e018      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001cb0:	f000 f868 	bl	1a001d84 <Chip_Clock_GetMainPLLHz>
		break;
1a001cb4:	e015      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001cb6:	2100      	movs	r1, #0
1a001cb8:	f000 f89a 	bl	1a001df0 <Chip_Clock_GetDivRate>
		break;
1a001cbc:	e011      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001cbe:	2101      	movs	r1, #1
1a001cc0:	f000 f896 	bl	1a001df0 <Chip_Clock_GetDivRate>
		break;
1a001cc4:	e00d      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001cc6:	2102      	movs	r1, #2
1a001cc8:	f000 f892 	bl	1a001df0 <Chip_Clock_GetDivRate>
		break;
1a001ccc:	e009      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001cce:	2103      	movs	r1, #3
1a001cd0:	f000 f88e 	bl	1a001df0 <Chip_Clock_GetDivRate>
		break;
1a001cd4:	e005      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001cd6:	2104      	movs	r1, #4
1a001cd8:	f000 f88a 	bl	1a001df0 <Chip_Clock_GetDivRate>
		break;
1a001cdc:	e001      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001cde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001ce2:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001ce4:	4806      	ldr	r0, [pc, #24]	; (1a001d00 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001ce6:	e7fc      	b.n	1a001ce2 <Chip_Clock_GetClockInputHz+0x96>
1a001ce8:	00b71b00 	.word	0x00b71b00
1a001cec:	40043000 	.word	0x40043000
1a001cf0:	017d7840 	.word	0x017d7840
1a001cf4:	1a004488 	.word	0x1a004488
1a001cf8:	1a0044b4 	.word	0x1a0044b4
1a001cfc:	100000e4 	.word	0x100000e4
1a001d00:	02faf080 	.word	0x02faf080

1a001d04 <Chip_Clock_CalcMainPLLValue>:
{
1a001d04:	b538      	push	{r3, r4, r5, lr}
1a001d06:	4605      	mov	r5, r0
1a001d08:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001d0a:	7908      	ldrb	r0, [r1, #4]
1a001d0c:	f7ff ff9e 	bl	1a001c4c <Chip_Clock_GetClockInputHz>
1a001d10:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001d12:	4b19      	ldr	r3, [pc, #100]	; (1a001d78 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001d14:	442b      	add	r3, r5
1a001d16:	4a19      	ldr	r2, [pc, #100]	; (1a001d7c <Chip_Clock_CalcMainPLLValue+0x78>)
1a001d18:	4293      	cmp	r3, r2
1a001d1a:	d821      	bhi.n	1a001d60 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001d1c:	b318      	cbz	r0, 1a001d66 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001d1e:	2380      	movs	r3, #128	; 0x80
1a001d20:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001d22:	2300      	movs	r3, #0
1a001d24:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001d26:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001d28:	fbb5 f3f0 	udiv	r3, r5, r0
1a001d2c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001d2e:	4a14      	ldr	r2, [pc, #80]	; (1a001d80 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001d30:	4295      	cmp	r5, r2
1a001d32:	d903      	bls.n	1a001d3c <Chip_Clock_CalcMainPLLValue+0x38>
1a001d34:	fb03 f000 	mul.w	r0, r3, r0
1a001d38:	42a8      	cmp	r0, r5
1a001d3a:	d007      	beq.n	1a001d4c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001d3c:	4621      	mov	r1, r4
1a001d3e:	4628      	mov	r0, r5
1a001d40:	f7ff fe96 	bl	1a001a70 <pll_get_frac>
		if (!ppll->nsel) {
1a001d44:	68a3      	ldr	r3, [r4, #8]
1a001d46:	b18b      	cbz	r3, 1a001d6c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001d48:	3b01      	subs	r3, #1
1a001d4a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001d4c:	6923      	ldr	r3, [r4, #16]
1a001d4e:	b183      	cbz	r3, 1a001d72 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001d50:	68e2      	ldr	r2, [r4, #12]
1a001d52:	b10a      	cbz	r2, 1a001d58 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001d54:	3a01      	subs	r2, #1
1a001d56:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001d58:	3b01      	subs	r3, #1
1a001d5a:	6123      	str	r3, [r4, #16]
	return 0;
1a001d5c:	2000      	movs	r0, #0
}
1a001d5e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001d60:	f04f 30ff 	mov.w	r0, #4294967295
1a001d64:	e7fb      	b.n	1a001d5e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001d66:	f04f 30ff 	mov.w	r0, #4294967295
1a001d6a:	e7f8      	b.n	1a001d5e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001d6c:	f04f 30ff 	mov.w	r0, #4294967295
1a001d70:	e7f5      	b.n	1a001d5e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001d72:	f04f 30ff 	mov.w	r0, #4294967295
1a001d76:	e7f2      	b.n	1a001d5e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001d78:	ff6b3a10 	.word	0xff6b3a10
1a001d7c:	0b940510 	.word	0x0b940510
1a001d80:	094c5eff 	.word	0x094c5eff

1a001d84 <Chip_Clock_GetMainPLLHz>:
{
1a001d84:	b530      	push	{r4, r5, lr}
1a001d86:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001d88:	4d17      	ldr	r5, [pc, #92]	; (1a001de8 <Chip_Clock_GetMainPLLHz+0x64>)
1a001d8a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001d8c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001d90:	f7ff ff5c 	bl	1a001c4c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001d94:	4b15      	ldr	r3, [pc, #84]	; (1a001dec <Chip_Clock_GetMainPLLHz+0x68>)
1a001d96:	681b      	ldr	r3, [r3, #0]
1a001d98:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001d9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001d9c:	f013 0f01 	tst.w	r3, #1
1a001da0:	d020      	beq.n	1a001de4 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001da2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001da6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001daa:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001dae:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001db2:	3301      	adds	r3, #1
	n = nsel + 1;
1a001db4:	3201      	adds	r2, #1
	p = ptab[psel];
1a001db6:	f10d 0c08 	add.w	ip, sp, #8
1a001dba:	4461      	add	r1, ip
1a001dbc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001dc0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001dc4:	d108      	bne.n	1a001dd8 <Chip_Clock_GetMainPLLHz+0x54>
1a001dc6:	b93d      	cbnz	r5, 1a001dd8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001dc8:	0049      	lsls	r1, r1, #1
1a001dca:	fbb3 f3f1 	udiv	r3, r3, r1
1a001dce:	fbb0 f0f2 	udiv	r0, r0, r2
1a001dd2:	fb00 f003 	mul.w	r0, r0, r3
1a001dd6:	e003      	b.n	1a001de0 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001dd8:	fbb0 f0f2 	udiv	r0, r0, r2
1a001ddc:	fb03 f000 	mul.w	r0, r3, r0
}
1a001de0:	b003      	add	sp, #12
1a001de2:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001de4:	2000      	movs	r0, #0
1a001de6:	e7fb      	b.n	1a001de0 <Chip_Clock_GetMainPLLHz+0x5c>
1a001de8:	40050000 	.word	0x40050000
1a001dec:	1a004500 	.word	0x1a004500

1a001df0 <Chip_Clock_GetDivRate>:
{
1a001df0:	b538      	push	{r3, r4, r5, lr}
1a001df2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001df4:	4608      	mov	r0, r1
1a001df6:	f7ff ff0d 	bl	1a001c14 <Chip_Clock_GetDividerSource>
1a001dfa:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001dfc:	4620      	mov	r0, r4
1a001dfe:	f7ff ff17 	bl	1a001c30 <Chip_Clock_GetDividerDivisor>
1a001e02:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001e04:	4628      	mov	r0, r5
1a001e06:	f7ff ff21 	bl	1a001c4c <Chip_Clock_GetClockInputHz>
1a001e0a:	3401      	adds	r4, #1
}
1a001e0c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001e10:	bd38      	pop	{r3, r4, r5, pc}
1a001e12:	Address 0x1a001e12 is out of bounds.


1a001e14 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001e14:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e16:	f100 0416 	add.w	r4, r0, #22
1a001e1a:	00a4      	lsls	r4, r4, #2
1a001e1c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001e20:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001e24:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001e26:	281b      	cmp	r0, #27
1a001e28:	d813      	bhi.n	1a001e52 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001e2a:	2911      	cmp	r1, #17
1a001e2c:	d01a      	beq.n	1a001e64 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001e2e:	4d0e      	ldr	r5, [pc, #56]	; (1a001e68 <Chip_Clock_SetBaseClock+0x54>)
1a001e30:	4025      	ands	r5, r4

			if (autoblocken) {
1a001e32:	b10a      	cbz	r2, 1a001e38 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001e34:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001e38:	b10b      	cbz	r3, 1a001e3e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001e3a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001e3e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001e42:	3016      	adds	r0, #22
1a001e44:	0080      	lsls	r0, r0, #2
1a001e46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e4a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e4e:	6045      	str	r5, [r0, #4]
1a001e50:	e008      	b.n	1a001e64 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001e52:	f044 0401 	orr.w	r4, r4, #1
1a001e56:	3016      	adds	r0, #22
1a001e58:	0080      	lsls	r0, r0, #2
1a001e5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e5e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e62:	6044      	str	r4, [r0, #4]
	}
}
1a001e64:	bc30      	pop	{r4, r5}
1a001e66:	4770      	bx	lr
1a001e68:	e0fff7fe 	.word	0xe0fff7fe

1a001e6c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001e6c:	281b      	cmp	r0, #27
1a001e6e:	d80c      	bhi.n	1a001e8a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e70:	3016      	adds	r0, #22
1a001e72:	0080      	lsls	r0, r0, #2
1a001e74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e78:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e7c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001e7e:	f010 0f01 	tst.w	r0, #1
1a001e82:	d104      	bne.n	1a001e8e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001e84:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001e88:	4770      	bx	lr
		return CLKINPUT_PD;
1a001e8a:	2011      	movs	r0, #17
1a001e8c:	4770      	bx	lr
		return CLKINPUT_PD;
1a001e8e:	2011      	movs	r0, #17
}
1a001e90:	4770      	bx	lr

1a001e92 <Chip_Clock_GetBaseClocktHz>:
{
1a001e92:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001e94:	f7ff ffea 	bl	1a001e6c <Chip_Clock_GetBaseClock>
1a001e98:	f7ff fed8 	bl	1a001c4c <Chip_Clock_GetClockInputHz>
}
1a001e9c:	bd08      	pop	{r3, pc}
1a001e9e:	Address 0x1a001e9e is out of bounds.


1a001ea0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001ea0:	b971      	cbnz	r1, 1a001ec0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001ea2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001ea4:	b10a      	cbz	r2, 1a001eaa <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001ea6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001eaa:	2b02      	cmp	r3, #2
1a001eac:	d00a      	beq.n	1a001ec4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001eae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001eb2:	d30a      	bcc.n	1a001eca <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001eb4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001eb8:	4b06      	ldr	r3, [pc, #24]	; (1a001ed4 <Chip_Clock_EnableOpts+0x34>)
1a001eba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001ebe:	4770      	bx	lr
		reg |= (1 << 1);
1a001ec0:	2103      	movs	r1, #3
1a001ec2:	e7ef      	b.n	1a001ea4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001ec4:	f041 0120 	orr.w	r1, r1, #32
1a001ec8:	e7f1      	b.n	1a001eae <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001eca:	3020      	adds	r0, #32
1a001ecc:	4b02      	ldr	r3, [pc, #8]	; (1a001ed8 <Chip_Clock_EnableOpts+0x38>)
1a001ece:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001ed2:	4770      	bx	lr
1a001ed4:	40052000 	.word	0x40052000
1a001ed8:	40051000 	.word	0x40051000

1a001edc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001edc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ee0:	d309      	bcc.n	1a001ef6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001ee2:	4a09      	ldr	r2, [pc, #36]	; (1a001f08 <Chip_Clock_Enable+0x2c>)
1a001ee4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001ee8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001eec:	f043 0301 	orr.w	r3, r3, #1
1a001ef0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001ef4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001ef6:	4a05      	ldr	r2, [pc, #20]	; (1a001f0c <Chip_Clock_Enable+0x30>)
1a001ef8:	3020      	adds	r0, #32
1a001efa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001efe:	f043 0301 	orr.w	r3, r3, #1
1a001f02:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001f06:	4770      	bx	lr
1a001f08:	40052000 	.word	0x40052000
1a001f0c:	40051000 	.word	0x40051000

1a001f10 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001f10:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001f12:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f16:	d309      	bcc.n	1a001f2c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001f18:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001f1c:	4a0d      	ldr	r2, [pc, #52]	; (1a001f54 <Chip_Clock_GetRate+0x44>)
1a001f1e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001f22:	f014 0f01 	tst.w	r4, #1
1a001f26:	d107      	bne.n	1a001f38 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001f28:	2000      	movs	r0, #0
	}

	return rate;
}
1a001f2a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001f2c:	f100 0320 	add.w	r3, r0, #32
1a001f30:	4a09      	ldr	r2, [pc, #36]	; (1a001f58 <Chip_Clock_GetRate+0x48>)
1a001f32:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001f36:	e7f4      	b.n	1a001f22 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001f38:	f7ff fe20 	bl	1a001b7c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001f3c:	f7ff ffa9 	bl	1a001e92 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001f40:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001f44:	d103      	bne.n	1a001f4e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001f46:	2301      	movs	r3, #1
		rate = rate / div;
1a001f48:	fbb0 f0f3 	udiv	r0, r0, r3
1a001f4c:	e7ed      	b.n	1a001f2a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001f4e:	2302      	movs	r3, #2
1a001f50:	e7fa      	b.n	1a001f48 <Chip_Clock_GetRate+0x38>
1a001f52:	bf00      	nop
1a001f54:	40052000 	.word	0x40052000
1a001f58:	40051000 	.word	0x40051000

1a001f5c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001f5c:	4b09      	ldr	r3, [pc, #36]	; (1a001f84 <Chip_UART_GetIndex+0x28>)
1a001f5e:	4298      	cmp	r0, r3
1a001f60:	d009      	beq.n	1a001f76 <Chip_UART_GetIndex+0x1a>
1a001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001f66:	4298      	cmp	r0, r3
1a001f68:	d007      	beq.n	1a001f7a <Chip_UART_GetIndex+0x1e>
1a001f6a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001f6e:	4298      	cmp	r0, r3
1a001f70:	d005      	beq.n	1a001f7e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001f72:	2000      	movs	r0, #0
1a001f74:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001f76:	2002      	movs	r0, #2
1a001f78:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001f7a:	2003      	movs	r0, #3
1a001f7c:	4770      	bx	lr
			return 1;
1a001f7e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001f80:	4770      	bx	lr
1a001f82:	bf00      	nop
1a001f84:	400c1000 	.word	0x400c1000

1a001f88 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001f88:	b530      	push	{r4, r5, lr}
1a001f8a:	b083      	sub	sp, #12
1a001f8c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001f8e:	f7ff ffe5 	bl	1a001f5c <Chip_UART_GetIndex>
1a001f92:	2301      	movs	r3, #1
1a001f94:	461a      	mov	r2, r3
1a001f96:	4619      	mov	r1, r3
1a001f98:	4d0e      	ldr	r5, [pc, #56]	; (1a001fd4 <Chip_UART_Init+0x4c>)
1a001f9a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001f9e:	f7ff ff7f 	bl	1a001ea0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001fa2:	2307      	movs	r3, #7
1a001fa4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001fa6:	2300      	movs	r3, #0
1a001fa8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001faa:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001fac:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001fae:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001fb0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001fb2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001fb4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001fb6:	4b08      	ldr	r3, [pc, #32]	; (1a001fd8 <Chip_UART_Init+0x50>)
1a001fb8:	429c      	cmp	r4, r3
1a001fba:	d006      	beq.n	1a001fca <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001fbc:	2303      	movs	r3, #3
1a001fbe:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001fc0:	2310      	movs	r3, #16
1a001fc2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001fc4:	9b01      	ldr	r3, [sp, #4]
}
1a001fc6:	b003      	add	sp, #12
1a001fc8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001fca:	2300      	movs	r3, #0
1a001fcc:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001fce:	69a3      	ldr	r3, [r4, #24]
1a001fd0:	9301      	str	r3, [sp, #4]
1a001fd2:	e7f3      	b.n	1a001fbc <Chip_UART_Init+0x34>
1a001fd4:	1a004580 	.word	0x1a004580
1a001fd8:	40082000 	.word	0x40082000

1a001fdc <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001fdc:	b538      	push	{r3, r4, r5, lr}
1a001fde:	4605      	mov	r5, r0
1a001fe0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001fe2:	f7ff ffbb 	bl	1a001f5c <Chip_UART_GetIndex>
1a001fe6:	4b0c      	ldr	r3, [pc, #48]	; (1a002018 <Chip_UART_SetBaud+0x3c>)
1a001fe8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001fec:	f7ff ff90 	bl	1a001f10 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001ff0:	0123      	lsls	r3, r4, #4
1a001ff2:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a001ff6:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001ff8:	68ea      	ldr	r2, [r5, #12]
1a001ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001ffe:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002000:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002002:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a002006:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002008:	68ea      	ldr	r2, [r5, #12]
1a00200a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00200e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002010:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002014:	0900      	lsrs	r0, r0, #4
1a002016:	bd38      	pop	{r3, r4, r5, pc}
1a002018:	1a004578 	.word	0x1a004578

1a00201c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002020:	b083      	sub	sp, #12
1a002022:	9001      	str	r0, [sp, #4]
1a002024:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002026:	f7ff ff99 	bl	1a001f5c <Chip_UART_GetIndex>
1a00202a:	4b32      	ldr	r3, [pc, #200]	; (1a0020f4 <Chip_UART_SetBaudFDR+0xd8>)
1a00202c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002030:	f7ff ff6e 	bl	1a001f10 <Chip_Clock_GetRate>
1a002034:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002036:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00203a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00203c:	f04f 0b00 	mov.w	fp, #0
1a002040:	46a2      	mov	sl, r4
1a002042:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a002044:	e02a      	b.n	1a00209c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002046:	4242      	negs	r2, r0
				div ++;
1a002048:	1c4b      	adds	r3, r1, #1
1a00204a:	e017      	b.n	1a00207c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00204c:	b30a      	cbz	r2, 1a002092 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00204e:	4617      	mov	r7, r2
			sd = d;
1a002050:	46ab      	mov	fp, r5
			sm = m;
1a002052:	46a2      	mov	sl, r4
			sdiv = div;
1a002054:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002056:	3501      	adds	r5, #1
1a002058:	42ac      	cmp	r4, r5
1a00205a:	d91e      	bls.n	1a00209a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00205c:	0933      	lsrs	r3, r6, #4
1a00205e:	0730      	lsls	r0, r6, #28
1a002060:	fba4 0100 	umull	r0, r1, r4, r0
1a002064:	fb04 1103 	mla	r1, r4, r3, r1
1a002068:	1962      	adds	r2, r4, r5
1a00206a:	fb08 f202 	mul.w	r2, r8, r2
1a00206e:	2300      	movs	r3, #0
1a002070:	f001 f86a 	bl	1a003148 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002074:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002076:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002078:	2800      	cmp	r0, #0
1a00207a:	dbe4      	blt.n	1a002046 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00207c:	4297      	cmp	r7, r2
1a00207e:	d3ea      	bcc.n	1a002056 <Chip_UART_SetBaudFDR+0x3a>
1a002080:	2b00      	cmp	r3, #0
1a002082:	d0e8      	beq.n	1a002056 <Chip_UART_SetBaudFDR+0x3a>
1a002084:	0c19      	lsrs	r1, r3, #16
1a002086:	d1e6      	bne.n	1a002056 <Chip_UART_SetBaudFDR+0x3a>
1a002088:	2b02      	cmp	r3, #2
1a00208a:	d8df      	bhi.n	1a00204c <Chip_UART_SetBaudFDR+0x30>
1a00208c:	2d00      	cmp	r5, #0
1a00208e:	d0dd      	beq.n	1a00204c <Chip_UART_SetBaudFDR+0x30>
1a002090:	e7e1      	b.n	1a002056 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002092:	4617      	mov	r7, r2
			sd = d;
1a002094:	46ab      	mov	fp, r5
			sm = m;
1a002096:	46a2      	mov	sl, r4
			sdiv = div;
1a002098:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00209a:	3401      	adds	r4, #1
1a00209c:	b11f      	cbz	r7, 1a0020a6 <Chip_UART_SetBaudFDR+0x8a>
1a00209e:	2c0f      	cmp	r4, #15
1a0020a0:	d801      	bhi.n	1a0020a6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0020a2:	2500      	movs	r5, #0
1a0020a4:	e7d8      	b.n	1a002058 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0020a6:	f1b9 0f00 	cmp.w	r9, #0
1a0020aa:	d01e      	beq.n	1a0020ea <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0020ac:	9a01      	ldr	r2, [sp, #4]
1a0020ae:	4611      	mov	r1, r2
1a0020b0:	68d3      	ldr	r3, [r2, #12]
1a0020b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0020b6:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0020b8:	fa5f f389 	uxtb.w	r3, r9
1a0020bc:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0020be:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0020c2:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0020c4:	68d3      	ldr	r3, [r2, #12]
1a0020c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0020ca:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0020cc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0020d0:	b2db      	uxtb	r3, r3
1a0020d2:	f00b 020f 	and.w	r2, fp, #15
1a0020d6:	4313      	orrs	r3, r2
1a0020d8:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0020da:	0933      	lsrs	r3, r6, #4
1a0020dc:	fb0a f303 	mul.w	r3, sl, r3
1a0020e0:	44da      	add	sl, fp
1a0020e2:	fb09 f90a 	mul.w	r9, r9, sl
1a0020e6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0020ea:	4648      	mov	r0, r9
1a0020ec:	b003      	add	sp, #12
1a0020ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0020f2:	bf00      	nop
1a0020f4:	1a004578 	.word	0x1a004578

1a0020f8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0020f8:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0020fa:	4a0b      	ldr	r2, [pc, #44]	; (1a002128 <SystemInit+0x30>)
1a0020fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00212c <SystemInit+0x34>)
1a0020fe:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002100:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002104:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002106:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00210a:	2b20      	cmp	r3, #32
1a00210c:	d004      	beq.n	1a002118 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a00210e:	f7ff f9ad 	bl	1a00146c <Board_SystemInit>
   Board_Init();
1a002112:	f7ff fa83 	bl	1a00161c <Board_Init>
#endif
}
1a002116:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002118:	4a04      	ldr	r2, [pc, #16]	; (1a00212c <SystemInit+0x34>)
1a00211a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00211e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002126:	e7f2      	b.n	1a00210e <SystemInit+0x16>
1a002128:	1a000000 	.word	0x1a000000
1a00212c:	e000ed00 	.word	0xe000ed00

1a002130 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002130:	4b04      	ldr	r3, [pc, #16]	; (1a002144 <cyclesCounterInit+0x14>)
1a002132:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002134:	4a04      	ldr	r2, [pc, #16]	; (1a002148 <cyclesCounterInit+0x18>)
1a002136:	6813      	ldr	r3, [r2, #0]
1a002138:	f043 0301 	orr.w	r3, r3, #1
1a00213c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00213e:	2001      	movs	r0, #1
1a002140:	4770      	bx	lr
1a002142:	bf00      	nop
1a002144:	10000038 	.word	0x10000038
1a002148:	e0001000 	.word	0xe0001000

1a00214c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00214c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00214e:	4d0b      	ldr	r5, [pc, #44]	; (1a00217c <gpioObtainPinInit+0x30>)
1a002150:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002154:	182c      	adds	r4, r5, r0
1a002156:	5628      	ldrsb	r0, [r5, r0]
1a002158:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00215a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00215e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002160:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002164:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002166:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00216a:	9b02      	ldr	r3, [sp, #8]
1a00216c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00216e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002172:	9b03      	ldr	r3, [sp, #12]
1a002174:	701a      	strb	r2, [r3, #0]
}
1a002176:	bc30      	pop	{r4, r5}
1a002178:	4770      	bx	lr
1a00217a:	bf00      	nop
1a00217c:	1a004588 	.word	0x1a004588

1a002180 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002180:	f110 0f02 	cmn.w	r0, #2
1a002184:	f000 80c7 	beq.w	1a002316 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002188:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00218c:	f000 80c5 	beq.w	1a00231a <gpioInit+0x19a>
{
1a002190:	b570      	push	{r4, r5, r6, lr}
1a002192:	b084      	sub	sp, #16
1a002194:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002196:	2300      	movs	r3, #0
1a002198:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00219c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0021a0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0021a4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0021a8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0021ac:	f10d 030b 	add.w	r3, sp, #11
1a0021b0:	9301      	str	r3, [sp, #4]
1a0021b2:	ab03      	add	r3, sp, #12
1a0021b4:	9300      	str	r3, [sp, #0]
1a0021b6:	f10d 030d 	add.w	r3, sp, #13
1a0021ba:	f10d 020e 	add.w	r2, sp, #14
1a0021be:	f10d 010f 	add.w	r1, sp, #15
1a0021c2:	f7ff ffc3 	bl	1a00214c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0021c6:	2c05      	cmp	r4, #5
1a0021c8:	f200 80a9 	bhi.w	1a00231e <gpioInit+0x19e>
1a0021cc:	e8df f004 	tbb	[pc, r4]
1a0021d0:	45278109 	.word	0x45278109
1a0021d4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0021d6:	4853      	ldr	r0, [pc, #332]	; (1a002324 <gpioInit+0x1a4>)
1a0021d8:	f7ff fade 	bl	1a001798 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0021dc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0021de:	b004      	add	sp, #16
1a0021e0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0021e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0021ee:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0021f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021f6:	494c      	ldr	r1, [pc, #304]	; (1a002328 <gpioInit+0x1a8>)
1a0021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002200:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002204:	2001      	movs	r0, #1
1a002206:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00220a:	4c46      	ldr	r4, [pc, #280]	; (1a002324 <gpioInit+0x1a4>)
1a00220c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002210:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002214:	ea22 0201 	bic.w	r2, r2, r1
1a002218:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00221c:	e7df      	b.n	1a0021de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00221e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002222:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002226:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00222a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00222e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002232:	493d      	ldr	r1, [pc, #244]	; (1a002328 <gpioInit+0x1a8>)
1a002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002238:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00223c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002240:	2001      	movs	r0, #1
1a002242:	fa00 f102 	lsl.w	r1, r0, r2
1a002246:	4c37      	ldr	r4, [pc, #220]	; (1a002324 <gpioInit+0x1a4>)
1a002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00224c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002250:	ea22 0201 	bic.w	r2, r2, r1
1a002254:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002258:	e7c1      	b.n	1a0021de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00225a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00225e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002262:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002266:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00226a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00226e:	492e      	ldr	r1, [pc, #184]	; (1a002328 <gpioInit+0x1a8>)
1a002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002274:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002278:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00227c:	2001      	movs	r0, #1
1a00227e:	fa00 f102 	lsl.w	r1, r0, r2
1a002282:	4c28      	ldr	r4, [pc, #160]	; (1a002324 <gpioInit+0x1a4>)
1a002284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002288:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00228c:	ea22 0201 	bic.w	r2, r2, r1
1a002290:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002294:	e7a3      	b.n	1a0021de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002296:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00229a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00229e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0022a2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0022a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022aa:	491f      	ldr	r1, [pc, #124]	; (1a002328 <gpioInit+0x1a8>)
1a0022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0022b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0022b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022b8:	2001      	movs	r0, #1
1a0022ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0022be:	4c19      	ldr	r4, [pc, #100]	; (1a002324 <gpioInit+0x1a4>)
1a0022c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0022c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0022c8:	ea22 0201 	bic.w	r2, r2, r1
1a0022cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0022d0:	e785      	b.n	1a0021de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0022d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0022de:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0022e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022e6:	4910      	ldr	r1, [pc, #64]	; (1a002328 <gpioInit+0x1a8>)
1a0022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0022ec:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0022f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022f4:	2001      	movs	r0, #1
1a0022f6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0022fa:	4b0a      	ldr	r3, [pc, #40]	; (1a002324 <gpioInit+0x1a4>)
1a0022fc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002300:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002304:	4331      	orrs	r1, r6
1a002306:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00230a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00230c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002310:	2100      	movs	r1, #0
1a002312:	5499      	strb	r1, [r3, r2]
1a002314:	e763      	b.n	1a0021de <gpioInit+0x5e>
	  return FALSE;
1a002316:	2000      	movs	r0, #0
1a002318:	4770      	bx	lr
	  return FALSE;
1a00231a:	2000      	movs	r0, #0
}
1a00231c:	4770      	bx	lr
      ret_val = 0;
1a00231e:	2000      	movs	r0, #0
1a002320:	e75d      	b.n	1a0021de <gpioInit+0x5e>
1a002322:	bf00      	nop
1a002324:	400f4000 	.word	0x400f4000
1a002328:	40086000 	.word	0x40086000

1a00232c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a00232c:	f110 0f02 	cmn.w	r0, #2
1a002330:	d02d      	beq.n	1a00238e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a002332:	f1b0 3fff 	cmp.w	r0, #4294967295
1a002336:	d02c      	beq.n	1a002392 <gpioWrite+0x66>
{
1a002338:	b510      	push	{r4, lr}
1a00233a:	b084      	sub	sp, #16
1a00233c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00233e:	2300      	movs	r3, #0
1a002340:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002344:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002348:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00234c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002350:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002354:	f10d 030b 	add.w	r3, sp, #11
1a002358:	9301      	str	r3, [sp, #4]
1a00235a:	ab03      	add	r3, sp, #12
1a00235c:	9300      	str	r3, [sp, #0]
1a00235e:	f10d 030d 	add.w	r3, sp, #13
1a002362:	f10d 020e 	add.w	r2, sp, #14
1a002366:	f10d 010f 	add.w	r1, sp, #15
1a00236a:	f7ff feef 	bl	1a00214c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00236e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002372:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002376:	1c21      	adds	r1, r4, #0
1a002378:	bf18      	it	ne
1a00237a:	2101      	movne	r1, #1
1a00237c:	015b      	lsls	r3, r3, #5
1a00237e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002382:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002386:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002388:	2001      	movs	r0, #1
}
1a00238a:	b004      	add	sp, #16
1a00238c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00238e:	2000      	movs	r0, #0
1a002390:	4770      	bx	lr
	  return FALSE;
1a002392:	2000      	movs	r0, #0
}
1a002394:	4770      	bx	lr

1a002396 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a002396:	f110 0f02 	cmn.w	r0, #2
1a00239a:	d02c      	beq.n	1a0023f6 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a00239c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0023a0:	d02b      	beq.n	1a0023fa <gpioRead+0x64>
{
1a0023a2:	b500      	push	{lr}
1a0023a4:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0023a6:	2300      	movs	r3, #0
1a0023a8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0023ac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0023b0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0023b4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0023b8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0023bc:	f10d 030b 	add.w	r3, sp, #11
1a0023c0:	9301      	str	r3, [sp, #4]
1a0023c2:	ab03      	add	r3, sp, #12
1a0023c4:	9300      	str	r3, [sp, #0]
1a0023c6:	f10d 030d 	add.w	r3, sp, #13
1a0023ca:	f10d 020e 	add.w	r2, sp, #14
1a0023ce:	f10d 010f 	add.w	r1, sp, #15
1a0023d2:	f7ff febb 	bl	1a00214c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0023d6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0023da:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0023de:	015b      	lsls	r3, r3, #5
1a0023e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0023e4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0023e8:	5c98      	ldrb	r0, [r3, r2]
1a0023ea:	3000      	adds	r0, #0
1a0023ec:	bf18      	it	ne
1a0023ee:	2001      	movne	r0, #1

   return ret_val;
}
1a0023f0:	b005      	add	sp, #20
1a0023f2:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0023f6:	2001      	movs	r0, #1
1a0023f8:	4770      	bx	lr
      return FALSE;
1a0023fa:	2000      	movs	r0, #0
}
1a0023fc:	4770      	bx	lr
1a0023fe:	Address 0x1a0023fe is out of bounds.


1a002400 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a002400:	b130      	cbz	r0, 1a002410 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a002402:	4a05      	ldr	r2, [pc, #20]	; (1a002418 <tickCallbackSet+0x18>)
1a002404:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a002406:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a002408:	b121      	cbz	r1, 1a002414 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a00240a:	4b04      	ldr	r3, [pc, #16]	; (1a00241c <tickCallbackSet+0x1c>)
1a00240c:	6019      	str	r1, [r3, #0]
1a00240e:	4770      	bx	lr
         retVal = FALSE;
1a002410:	2000      	movs	r0, #0
1a002412:	e7f9      	b.n	1a002408 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a002414:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a002416:	4770      	bx	lr
1a002418:	100000f8 	.word	0x100000f8
1a00241c:	100000ec 	.word	0x100000ec

1a002420 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a002420:	b118      	cbz	r0, 1a00242a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a002422:	4b04      	ldr	r3, [pc, #16]	; (1a002434 <tickPowerSet+0x14>)
1a002424:	2207      	movs	r2, #7
1a002426:	601a      	str	r2, [r3, #0]
1a002428:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00242a:	4b02      	ldr	r3, [pc, #8]	; (1a002434 <tickPowerSet+0x14>)
1a00242c:	2200      	movs	r2, #0
1a00242e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a002430:	4770      	bx	lr
1a002432:	bf00      	nop
1a002434:	e000e010 	.word	0xe000e010

1a002438 <tickInit>:
{
1a002438:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00243a:	ea50 0401 	orrs.w	r4, r0, r1
1a00243e:	d02a      	beq.n	1a002496 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a002440:	f110 32ff 	adds.w	r2, r0, #4294967295
1a002444:	f141 33ff 	adc.w	r3, r1, #4294967295
1a002448:	2b00      	cmp	r3, #0
1a00244a:	bf08      	it	eq
1a00244c:	2a32      	cmpeq	r2, #50	; 0x32
1a00244e:	d227      	bcs.n	1a0024a0 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a002450:	4b14      	ldr	r3, [pc, #80]	; (1a0024a4 <tickInit+0x6c>)
1a002452:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a002456:	4b14      	ldr	r3, [pc, #80]	; (1a0024a8 <tickInit+0x70>)
1a002458:	681b      	ldr	r3, [r3, #0]
1a00245a:	fba3 4500 	umull	r4, r5, r3, r0
1a00245e:	fb03 5501 	mla	r5, r3, r1, r5
1a002462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a002466:	2300      	movs	r3, #0
1a002468:	4620      	mov	r0, r4
1a00246a:	4629      	mov	r1, r5
1a00246c:	f000 fe6c 	bl	1a003148 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a002470:	3801      	subs	r0, #1
1a002472:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002476:	d209      	bcs.n	1a00248c <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002478:	4b0c      	ldr	r3, [pc, #48]	; (1a0024ac <tickInit+0x74>)
1a00247a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00247c:	4a0c      	ldr	r2, [pc, #48]	; (1a0024b0 <tickInit+0x78>)
1a00247e:	21e0      	movs	r1, #224	; 0xe0
1a002480:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a002484:	2200      	movs	r2, #0
1a002486:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002488:	2207      	movs	r2, #7
1a00248a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00248c:	2001      	movs	r0, #1
1a00248e:	f7ff ffc7 	bl	1a002420 <tickPowerSet>
      bool_t ret_val = 1;
1a002492:	2001      	movs	r0, #1
}
1a002494:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a002496:	2000      	movs	r0, #0
1a002498:	f7ff ffc2 	bl	1a002420 <tickPowerSet>
         ret_val = 0;
1a00249c:	2000      	movs	r0, #0
1a00249e:	e7f9      	b.n	1a002494 <tickInit+0x5c>
            ret_val = 0;
1a0024a0:	2000      	movs	r0, #0
1a0024a2:	e7f7      	b.n	1a002494 <tickInit+0x5c>
1a0024a4:	10000040 	.word	0x10000040
1a0024a8:	100002f0 	.word	0x100002f0
1a0024ac:	e000e010 	.word	0xe000e010
1a0024b0:	e000ed00 	.word	0xe000ed00

1a0024b4 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0024b4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0024b6:	4a07      	ldr	r2, [pc, #28]	; (1a0024d4 <SysTick_Handler+0x20>)
1a0024b8:	6813      	ldr	r3, [r2, #0]
1a0024ba:	6851      	ldr	r1, [r2, #4]
1a0024bc:	3301      	adds	r3, #1
1a0024be:	f141 0100 	adc.w	r1, r1, #0
1a0024c2:	6013      	str	r3, [r2, #0]
1a0024c4:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0024c6:	4b04      	ldr	r3, [pc, #16]	; (1a0024d8 <SysTick_Handler+0x24>)
1a0024c8:	681b      	ldr	r3, [r3, #0]
1a0024ca:	b113      	cbz	r3, 1a0024d2 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0024cc:	4a03      	ldr	r2, [pc, #12]	; (1a0024dc <SysTick_Handler+0x28>)
1a0024ce:	6810      	ldr	r0, [r2, #0]
1a0024d0:	4798      	blx	r3
   }
}
1a0024d2:	bd08      	pop	{r3, pc}
1a0024d4:	100000f0 	.word	0x100000f0
1a0024d8:	100000f8 	.word	0x100000f8
1a0024dc:	100000ec 	.word	0x100000ec

1a0024e0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0024e4:	4680      	mov	r8, r0
1a0024e6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0024e8:	4c19      	ldr	r4, [pc, #100]	; (1a002550 <uartInit+0x70>)
1a0024ea:	0045      	lsls	r5, r0, #1
1a0024ec:	182a      	adds	r2, r5, r0
1a0024ee:	0093      	lsls	r3, r2, #2
1a0024f0:	18e6      	adds	r6, r4, r3
1a0024f2:	58e7      	ldr	r7, [r4, r3]
1a0024f4:	4638      	mov	r0, r7
1a0024f6:	f7ff fd47 	bl	1a001f88 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0024fa:	4649      	mov	r1, r9
1a0024fc:	4638      	mov	r0, r7
1a0024fe:	f7ff fd6d 	bl	1a001fdc <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a002502:	2307      	movs	r3, #7
1a002504:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002506:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002508:	2301      	movs	r3, #1
1a00250a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00250c:	7930      	ldrb	r0, [r6, #4]
1a00250e:	7973      	ldrb	r3, [r6, #5]
1a002510:	79b2      	ldrb	r2, [r6, #6]
1a002512:	f042 0218 	orr.w	r2, r2, #24
1a002516:	490f      	ldr	r1, [pc, #60]	; (1a002554 <uartInit+0x74>)
1a002518:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002520:	79f0      	ldrb	r0, [r6, #7]
1a002522:	7a33      	ldrb	r3, [r6, #8]
1a002524:	7a72      	ldrb	r2, [r6, #9]
1a002526:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00252a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002532:	f1b8 0f01 	cmp.w	r8, #1
1a002536:	d001      	beq.n	1a00253c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00253c:	4a06      	ldr	r2, [pc, #24]	; (1a002558 <uartInit+0x78>)
1a00253e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002540:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002544:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002546:	221a      	movs	r2, #26
1a002548:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00254c:	e7f4      	b.n	1a002538 <uartInit+0x58>
1a00254e:	bf00      	nop
1a002550:	1a004670 	.word	0x1a004670
1a002554:	40086000 	.word	0x40086000
1a002558:	40081000 	.word	0x40081000

1a00255c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00255c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00255e:	4b04      	ldr	r3, [pc, #16]	; (1a002570 <USB0_IRQHandler+0x14>)
1a002560:	681b      	ldr	r3, [r3, #0]
1a002562:	681b      	ldr	r3, [r3, #0]
1a002564:	68db      	ldr	r3, [r3, #12]
1a002566:	4a03      	ldr	r2, [pc, #12]	; (1a002574 <USB0_IRQHandler+0x18>)
1a002568:	6810      	ldr	r0, [r2, #0]
1a00256a:	4798      	blx	r3
}
1a00256c:	bd08      	pop	{r3, pc}
1a00256e:	bf00      	nop
1a002570:	100002f4 	.word	0x100002f4
1a002574:	100000fc 	.word	0x100000fc

1a002578 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002578:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00257a:	f7ff fa1f 	bl	1a0019bc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00257e:	4b1a      	ldr	r3, [pc, #104]	; (1a0025e8 <boardInit+0x70>)
1a002580:	6818      	ldr	r0, [r3, #0]
1a002582:	f7ff fdd5 	bl	1a002130 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a002586:	2001      	movs	r0, #1
1a002588:	2100      	movs	r1, #0
1a00258a:	f7ff ff55 	bl	1a002438 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00258e:	2105      	movs	r1, #5
1a002590:	2000      	movs	r0, #0
1a002592:	f7ff fdf5 	bl	1a002180 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002596:	2100      	movs	r1, #0
1a002598:	2024      	movs	r0, #36	; 0x24
1a00259a:	f7ff fdf1 	bl	1a002180 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00259e:	2100      	movs	r1, #0
1a0025a0:	2025      	movs	r0, #37	; 0x25
1a0025a2:	f7ff fded 	bl	1a002180 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0025a6:	2100      	movs	r1, #0
1a0025a8:	2026      	movs	r0, #38	; 0x26
1a0025aa:	f7ff fde9 	bl	1a002180 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0025ae:	2100      	movs	r1, #0
1a0025b0:	2027      	movs	r0, #39	; 0x27
1a0025b2:	f7ff fde5 	bl	1a002180 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0025b6:	2101      	movs	r1, #1
1a0025b8:	2028      	movs	r0, #40	; 0x28
1a0025ba:	f7ff fde1 	bl	1a002180 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0025be:	2101      	movs	r1, #1
1a0025c0:	2029      	movs	r0, #41	; 0x29
1a0025c2:	f7ff fddd 	bl	1a002180 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0025c6:	2101      	movs	r1, #1
1a0025c8:	202a      	movs	r0, #42	; 0x2a
1a0025ca:	f7ff fdd9 	bl	1a002180 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0025ce:	2101      	movs	r1, #1
1a0025d0:	202b      	movs	r0, #43	; 0x2b
1a0025d2:	f7ff fdd5 	bl	1a002180 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0025d6:	2101      	movs	r1, #1
1a0025d8:	202c      	movs	r0, #44	; 0x2c
1a0025da:	f7ff fdd1 	bl	1a002180 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0025de:	2101      	movs	r1, #1
1a0025e0:	202d      	movs	r0, #45	; 0x2d
1a0025e2:	f7ff fdcd 	bl	1a002180 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0025e6:	bd08      	pop	{r3, pc}
1a0025e8:	100002f0 	.word	0x100002f0

1a0025ec <delayInaccurateUs>:
   delay = INACCURATE_TO_MS * delay_ms;
   for( i=delay; i>0; i-- );
}

void delayInaccurateUs( tick_t delay_us )
{
1a0025ec:	b530      	push	{r4, r5, lr}
1a0025ee:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a0025f0:	1803      	adds	r3, r0, r0
1a0025f2:	eb41 0201 	adc.w	r2, r1, r1
1a0025f6:	1818      	adds	r0, r3, r0
1a0025f8:	eb42 0101 	adc.w	r1, r2, r1
1a0025fc:	010b      	lsls	r3, r1, #4
1a0025fe:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a002602:	0102      	lsls	r2, r0, #4
1a002604:	1880      	adds	r0, r0, r2
1a002606:	eb43 0101 	adc.w	r1, r3, r1
1a00260a:	008b      	lsls	r3, r1, #2
1a00260c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a002610:	0082      	lsls	r2, r0, #2
1a002612:	4610      	mov	r0, r2
1a002614:	4619      	mov	r1, r3
1a002616:	220a      	movs	r2, #10
1a002618:	2300      	movs	r3, #0
1a00261a:	f000 fd95 	bl	1a003148 <__aeabi_uldivmod>
1a00261e:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a002622:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002626:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00262a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00262e:	4313      	orrs	r3, r2
1a002630:	d008      	beq.n	1a002644 <delayInaccurateUs+0x58>
1a002632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002636:	f112 34ff 	adds.w	r4, r2, #4294967295
1a00263a:	f143 35ff 	adc.w	r5, r3, #4294967295
1a00263e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a002642:	e7f2      	b.n	1a00262a <delayInaccurateUs+0x3e>
}
1a002644:	b005      	add	sp, #20
1a002646:	bd30      	pop	{r4, r5, pc}

1a002648 <dht11_TimeOutReset>:

uint32_t dht11_timeout;
uint32_t dht11_timeout_max;
static void dht11_TimeOutReset(uint32_t max)
{
   if(0 < max) {
1a002648:	b130      	cbz	r0, 1a002658 <dht11_TimeOutReset+0x10>
      dht11_timeout_max = max;
1a00264a:	4a06      	ldr	r2, [pc, #24]	; (1a002664 <dht11_TimeOutReset+0x1c>)
1a00264c:	6010      	str	r0, [r2, #0]
   } else {
      dht11_timeout_max = DHT11_TIMEOUT_MAX;
   }
   dht11_timeout = dht11_timeout_max;
1a00264e:	4b05      	ldr	r3, [pc, #20]	; (1a002664 <dht11_TimeOutReset+0x1c>)
1a002650:	681a      	ldr	r2, [r3, #0]
1a002652:	4b05      	ldr	r3, [pc, #20]	; (1a002668 <dht11_TimeOutReset+0x20>)
1a002654:	601a      	str	r2, [r3, #0]
}
1a002656:	4770      	bx	lr
      dht11_timeout_max = DHT11_TIMEOUT_MAX;
1a002658:	4b02      	ldr	r3, [pc, #8]	; (1a002664 <dht11_TimeOutReset+0x1c>)
1a00265a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00265e:	601a      	str	r2, [r3, #0]
1a002660:	e7f5      	b.n	1a00264e <dht11_TimeOutReset+0x6>
1a002662:	bf00      	nop
1a002664:	100002fc 	.word	0x100002fc
1a002668:	100002f8 	.word	0x100002f8

1a00266c <dht11_TimeOutCheck>:

static bool_t dht11_TimeOutCheck(void)
{
1a00266c:	b508      	push	{r3, lr}
   if(0 < dht11_timeout) {
1a00266e:	4b06      	ldr	r3, [pc, #24]	; (1a002688 <dht11_TimeOutCheck+0x1c>)
1a002670:	681b      	ldr	r3, [r3, #0]
1a002672:	b123      	cbz	r3, 1a00267e <dht11_TimeOutCheck+0x12>
      dht11_timeout--;
1a002674:	3b01      	subs	r3, #1
1a002676:	4a04      	ldr	r2, [pc, #16]	; (1a002688 <dht11_TimeOutCheck+0x1c>)
1a002678:	6013      	str	r3, [r2, #0]
      return TRUE;
1a00267a:	2001      	movs	r0, #1
   }
   dht11_TimeOutReset(0);
   return FALSE;
}
1a00267c:	bd08      	pop	{r3, pc}
   dht11_TimeOutReset(0);
1a00267e:	2000      	movs	r0, #0
1a002680:	f7ff ffe2 	bl	1a002648 <dht11_TimeOutReset>
   return FALSE;
1a002684:	2000      	movs	r0, #0
1a002686:	e7f9      	b.n	1a00267c <dht11_TimeOutCheck+0x10>
1a002688:	100002f8 	.word	0x100002f8

1a00268c <dht11_ProcessData>:
static bool_t dht11_ProcessData(void)
{
   int i, i_i, i_f, j;
   uint32_t valf, valt;

   valf = dht11_ticks_array[0];
1a00268c:	4b25      	ldr	r3, [pc, #148]	; (1a002724 <dht11_ProcessData+0x98>)
1a00268e:	6819      	ldr	r1, [r3, #0]
   valt = dht11_ticks_array[1];
1a002690:	6858      	ldr	r0, [r3, #4]
   for(i = 2; i < 81; i++) {
1a002692:	2302      	movs	r3, #2
1a002694:	e000      	b.n	1a002698 <dht11_ProcessData+0xc>
1a002696:	3301      	adds	r3, #1
1a002698:	2b50      	cmp	r3, #80	; 0x50
1a00269a:	dc08      	bgt.n	1a0026ae <dht11_ProcessData+0x22>
      if((valf <= dht11_ticks_array[i]) || (valt <= dht11_ticks_array[i])) {
1a00269c:	4a21      	ldr	r2, [pc, #132]	; (1a002724 <dht11_ProcessData+0x98>)
1a00269e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0026a2:	428a      	cmp	r2, r1
1a0026a4:	d239      	bcs.n	1a00271a <dht11_ProcessData+0x8e>
1a0026a6:	4282      	cmp	r2, r0
1a0026a8:	d3f5      	bcc.n	1a002696 <dht11_ProcessData+0xa>
         return FALSE;
1a0026aa:	2000      	movs	r0, #0
   if(crc != dht11_byte[4]) {
      return FALSE;
   }

   return TRUE;
}
1a0026ac:	4770      	bx	lr
{
1a0026ae:	b470      	push	{r4, r5, r6}
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a0026b0:	2100      	movs	r1, #0
   i_i = 2;
1a0026b2:	2602      	movs	r6, #2
1a0026b4:	e017      	b.n	1a0026e6 <dht11_ProcessData+0x5a>
            dht11_byte[j] = (dht11_byte[j] << 1) | 0x01;
1a0026b6:	481c      	ldr	r0, [pc, #112]	; (1a002728 <dht11_ProcessData+0x9c>)
1a0026b8:	5c42      	ldrb	r2, [r0, r1]
1a0026ba:	0052      	lsls	r2, r2, #1
1a0026bc:	f042 0201 	orr.w	r2, r2, #1
1a0026c0:	5442      	strb	r2, [r0, r1]
      for(i = i_i; i < i_f; i = i + 2) {
1a0026c2:	3302      	adds	r3, #2
1a0026c4:	42ab      	cmp	r3, r5
1a0026c6:	da0c      	bge.n	1a0026e2 <dht11_ProcessData+0x56>
         valf = dht11_ticks_array[i];
1a0026c8:	4a16      	ldr	r2, [pc, #88]	; (1a002724 <dht11_ProcessData+0x98>)
1a0026ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
         valt = dht11_ticks_array[i+1];
1a0026ce:	1c5c      	adds	r4, r3, #1
1a0026d0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
         if(valt < valf) {
1a0026d4:	4290      	cmp	r0, r2
1a0026d6:	d9ee      	bls.n	1a0026b6 <dht11_ProcessData+0x2a>
            dht11_byte[j] = (dht11_byte[j] << 1);
1a0026d8:	4813      	ldr	r0, [pc, #76]	; (1a002728 <dht11_ProcessData+0x9c>)
1a0026da:	5c42      	ldrb	r2, [r0, r1]
1a0026dc:	0052      	lsls	r2, r2, #1
1a0026de:	5442      	strb	r2, [r0, r1]
1a0026e0:	e7ef      	b.n	1a0026c2 <dht11_ProcessData+0x36>
      i_i = i_f + 1;
1a0026e2:	3610      	adds	r6, #16
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a0026e4:	3101      	adds	r1, #1
1a0026e6:	2904      	cmp	r1, #4
1a0026e8:	dc06      	bgt.n	1a0026f8 <dht11_ProcessData+0x6c>
      dht11_byte[j] = 0x00;
1a0026ea:	4b0f      	ldr	r3, [pc, #60]	; (1a002728 <dht11_ProcessData+0x9c>)
1a0026ec:	2200      	movs	r2, #0
1a0026ee:	545a      	strb	r2, [r3, r1]
      i_f = i_i + 8 * 2 - 1;
1a0026f0:	f106 050f 	add.w	r5, r6, #15
      for(i = i_i; i < i_f; i = i + 2) {
1a0026f4:	4633      	mov	r3, r6
1a0026f6:	e7e5      	b.n	1a0026c4 <dht11_ProcessData+0x38>
   crc = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3];
1a0026f8:	4a0b      	ldr	r2, [pc, #44]	; (1a002728 <dht11_ProcessData+0x9c>)
1a0026fa:	7813      	ldrb	r3, [r2, #0]
1a0026fc:	7851      	ldrb	r1, [r2, #1]
1a0026fe:	440b      	add	r3, r1
1a002700:	7891      	ldrb	r1, [r2, #2]
1a002702:	fa51 f383 	uxtab	r3, r1, r3
1a002706:	78d1      	ldrb	r1, [r2, #3]
1a002708:	fa51 f383 	uxtab	r3, r1, r3
1a00270c:	b2db      	uxtb	r3, r3
   if(crc != dht11_byte[4]) {
1a00270e:	7912      	ldrb	r2, [r2, #4]
1a002710:	429a      	cmp	r2, r3
1a002712:	d104      	bne.n	1a00271e <dht11_ProcessData+0x92>
   return TRUE;
1a002714:	2001      	movs	r0, #1
}
1a002716:	bc70      	pop	{r4, r5, r6}
1a002718:	4770      	bx	lr
         return FALSE;
1a00271a:	2000      	movs	r0, #0
1a00271c:	4770      	bx	lr
      return FALSE;
1a00271e:	2000      	movs	r0, #0
1a002720:	e7f9      	b.n	1a002716 <dht11_ProcessData+0x8a>
1a002722:	bf00      	nop
1a002724:	1000010c 	.word	0x1000010c
1a002728:	10000104 	.word	0x10000104

1a00272c <dht11_GPIO_High>:
{
1a00272c:	b508      	push	{r3, lr}
   gpioInit( dht11Pin, GPIO_INPUT_PULLUP );
1a00272e:	2102      	movs	r1, #2
1a002730:	4b02      	ldr	r3, [pc, #8]	; (1a00273c <dht11_GPIO_High+0x10>)
1a002732:	f993 0000 	ldrsb.w	r0, [r3]
1a002736:	f7ff fd23 	bl	1a002180 <gpioInit>
}
1a00273a:	bd08      	pop	{r3, pc}
1a00273c:	10000100 	.word	0x10000100

1a002740 <dht11_GPIO_Low>:
{
1a002740:	b510      	push	{r4, lr}
   gpioInit( dht11Pin, GPIO_OUTPUT );
1a002742:	4c06      	ldr	r4, [pc, #24]	; (1a00275c <dht11_GPIO_Low+0x1c>)
1a002744:	2101      	movs	r1, #1
1a002746:	f994 0000 	ldrsb.w	r0, [r4]
1a00274a:	f7ff fd19 	bl	1a002180 <gpioInit>
   gpioWrite( dht11Pin, FALSE);
1a00274e:	2100      	movs	r1, #0
1a002750:	f994 0000 	ldrsb.w	r0, [r4]
1a002754:	f7ff fdea 	bl	1a00232c <gpioWrite>
}
1a002758:	bd10      	pop	{r4, pc}
1a00275a:	bf00      	nop
1a00275c:	10000100 	.word	0x10000100

1a002760 <dht11_GPIO_Read>:
{
1a002760:	b508      	push	{r3, lr}
   return gpioRead( dht11Pin );
1a002762:	4b03      	ldr	r3, [pc, #12]	; (1a002770 <dht11_GPIO_Read+0x10>)
1a002764:	f993 0000 	ldrsb.w	r0, [r3]
1a002768:	f7ff fe15 	bl	1a002396 <gpioRead>
}
1a00276c:	bd08      	pop	{r3, pc}
1a00276e:	bf00      	nop
1a002770:	10000100 	.word	0x10000100

1a002774 <dht11_StartRead>:
{
1a002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dht11_GPIO_Low();
1a002776:	f7ff ffe3 	bl	1a002740 <dht11_GPIO_Low>
   delayInaccurateUs(500);
1a00277a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00277e:	2100      	movs	r1, #0
1a002780:	f7ff ff34 	bl	1a0025ec <delayInaccurateUs>
   dht11_GPIO_High();
1a002784:	f7ff ffd2 	bl	1a00272c <dht11_GPIO_High>
   uint32_t n_bit          = 0;
1a002788:	2600      	movs	r6, #0
   uint32_t n_tick         = 0;
1a00278a:	4635      	mov	r5, r6
   bool_t   flag_loop_end	= FALSE;
1a00278c:	4637      	mov	r7, r6
   uint8_t  state          = dht11_state_start;
1a00278e:	4634      	mov	r4, r6
   while(FALSE == flag_loop_end) {
1a002790:	e044      	b.n	1a00281c <dht11_StartRead+0xa8>
         flag_loop_end = TRUE;
1a002792:	2701      	movs	r7, #1
1a002794:	e03f      	b.n	1a002816 <dht11_StartRead+0xa2>
         dht11_TimeOutReset(DHT11_TIMEOUT_MAX);
1a002796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00279a:	f7ff ff55 	bl	1a002648 <dht11_TimeOutReset>
         while(dht11_state_start == state) {
1a00279e:	e003      	b.n	1a0027a8 <dht11_StartRead+0x34>
            if(!dht11_TimeOutCheck()) {
1a0027a0:	f7ff ff64 	bl	1a00266c <dht11_TimeOutCheck>
1a0027a4:	2800      	cmp	r0, #0
1a0027a6:	d04d      	beq.n	1a002844 <dht11_StartRead+0xd0>
         while(dht11_state_start == state) {
1a0027a8:	bbac      	cbnz	r4, 1a002816 <dht11_StartRead+0xa2>
            if(dht11_GPIO_Read() == FALSE) {
1a0027aa:	f7ff ffd9 	bl	1a002760 <dht11_GPIO_Read>
1a0027ae:	2800      	cmp	r0, #0
1a0027b0:	d1f6      	bne.n	1a0027a0 <dht11_StartRead+0x2c>
               state = dht11_state_low;
1a0027b2:	2401      	movs	r4, #1
1a0027b4:	e7f4      	b.n	1a0027a0 <dht11_StartRead+0x2c>
         dht11_TimeOutReset(0);
1a0027b6:	2000      	movs	r0, #0
1a0027b8:	f7ff ff46 	bl	1a002648 <dht11_TimeOutReset>
         while(dht11_state_low == state) {
1a0027bc:	2c01      	cmp	r4, #1
1a0027be:	d12a      	bne.n	1a002816 <dht11_StartRead+0xa2>
            n_tick++;
1a0027c0:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == TRUE) {
1a0027c2:	f7ff ffcd 	bl	1a002760 <dht11_GPIO_Read>
1a0027c6:	2801      	cmp	r0, #1
1a0027c8:	d005      	beq.n	1a0027d6 <dht11_StartRead+0x62>
            if(!dht11_TimeOutCheck()) {
1a0027ca:	f7ff ff4f 	bl	1a00266c <dht11_TimeOutCheck>
1a0027ce:	2800      	cmp	r0, #0
1a0027d0:	d1f4      	bne.n	1a0027bc <dht11_StartRead+0x48>
               state = dht11_state_timeout;
1a0027d2:	2403      	movs	r4, #3
1a0027d4:	e7f2      	b.n	1a0027bc <dht11_StartRead+0x48>
               dht11_ticks_array[n_bit] = n_tick;
1a0027d6:	4b1f      	ldr	r3, [pc, #124]	; (1a002854 <dht11_StartRead+0xe0>)
1a0027d8:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a0027dc:	3601      	adds	r6, #1
               n_tick = 0;
1a0027de:	2500      	movs	r5, #0
               state = dht11_state_high;
1a0027e0:	2402      	movs	r4, #2
1a0027e2:	e7f2      	b.n	1a0027ca <dht11_StartRead+0x56>
         dht11_TimeOutReset(0);
1a0027e4:	2000      	movs	r0, #0
1a0027e6:	f7ff ff2f 	bl	1a002648 <dht11_TimeOutReset>
         while(dht11_state_high == state) {
1a0027ea:	2c02      	cmp	r4, #2
1a0027ec:	d113      	bne.n	1a002816 <dht11_StartRead+0xa2>
            n_tick++;
1a0027ee:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == FALSE) {
1a0027f0:	f7ff ffb6 	bl	1a002760 <dht11_GPIO_Read>
1a0027f4:	b928      	cbnz	r0, 1a002802 <dht11_StartRead+0x8e>
               dht11_ticks_array[n_bit] = n_tick;
1a0027f6:	4b17      	ldr	r3, [pc, #92]	; (1a002854 <dht11_StartRead+0xe0>)
1a0027f8:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a0027fc:	3601      	adds	r6, #1
               n_tick = 0;
1a0027fe:	2500      	movs	r5, #0
               state = dht11_state_low;
1a002800:	2401      	movs	r4, #1
            if(!dht11_TimeOutCheck()) {
1a002802:	f7ff ff33 	bl	1a00266c <dht11_TimeOutCheck>
1a002806:	2800      	cmp	r0, #0
1a002808:	d1ef      	bne.n	1a0027ea <dht11_StartRead+0x76>
               state = dht11_state_timeout;
1a00280a:	2403      	movs	r4, #3
1a00280c:	e7ed      	b.n	1a0027ea <dht11_StartRead+0x76>
    	  printf( "State_timeout\r\n");
1a00280e:	4812      	ldr	r0, [pc, #72]	; (1a002858 <dht11_StartRead+0xe4>)
1a002810:	f001 fc0c 	bl	1a00402c <puts>
         state = dht11_state_end;
1a002814:	2405      	movs	r4, #5
      if(DHT11_LEN_dht11_ticks_array <= n_bit) {
1a002816:	2e51      	cmp	r6, #81	; 0x51
1a002818:	d900      	bls.n	1a00281c <dht11_StartRead+0xa8>
         state = dht11_state_end;
1a00281a:	2405      	movs	r4, #5
   while(FALSE == flag_loop_end) {
1a00281c:	b9a7      	cbnz	r7, 1a002848 <dht11_StartRead+0xd4>
      switch(state) {
1a00281e:	2c05      	cmp	r4, #5
1a002820:	d80e      	bhi.n	1a002840 <dht11_StartRead+0xcc>
1a002822:	a301      	add	r3, pc, #4	; (adr r3, 1a002828 <dht11_StartRead+0xb4>)
1a002824:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
1a002828:	1a002797 	.word	0x1a002797
1a00282c:	1a0027b7 	.word	0x1a0027b7
1a002830:	1a0027e5 	.word	0x1a0027e5
1a002834:	1a00280f 	.word	0x1a00280f
1a002838:	1a002841 	.word	0x1a002841
1a00283c:	1a002793 	.word	0x1a002793
         state = dht11_state_end;
1a002840:	2405      	movs	r4, #5
1a002842:	e7e8      	b.n	1a002816 <dht11_StartRead+0xa2>
               state = dht11_state_timeout;
1a002844:	2403      	movs	r4, #3
1a002846:	e7e6      	b.n	1a002816 <dht11_StartRead+0xa2>
   if(82 == n_bit) {
1a002848:	2e52      	cmp	r6, #82	; 0x52
1a00284a:	d000      	beq.n	1a00284e <dht11_StartRead+0xda>
   return FALSE;
1a00284c:	2700      	movs	r7, #0
}
1a00284e:	4638      	mov	r0, r7
1a002850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002852:	bf00      	nop
1a002854:	1000010c 	.word	0x1000010c
1a002858:	1a0046b8 	.word	0x1a0046b8

1a00285c <dht11Init>:
	pos++;
	dst[pos] = '\0';
}

void dht11Init( int32_t gpio )
{
1a00285c:	b508      	push	{r3, lr}
   dht11Pin = (int32_t)gpio;
1a00285e:	4b02      	ldr	r3, [pc, #8]	; (1a002868 <dht11Init+0xc>)
1a002860:	6018      	str	r0, [r3, #0]
   dht11_GPIO_High();
1a002862:	f7ff ff63 	bl	1a00272c <dht11_GPIO_High>
}
1a002866:	bd08      	pop	{r3, pc}
1a002868:	10000100 	.word	0x10000100
1a00286c:	ffffffff 	.word	0xffffffff

1a002870 <dht11Read>:

bool_t dht11Read( float *phum, float *ptemp )
{
1a002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002872:	4606      	mov	r6, r0
1a002874:	460d      	mov	r5, r1
   if(TRUE == dht11_StartRead()) {
1a002876:	f7ff ff7d 	bl	1a002774 <dht11_StartRead>
1a00287a:	2801      	cmp	r0, #1
1a00287c:	d002      	beq.n	1a002884 <dht11Read+0x14>
        	 *ptemp *= -1;
         }
         return TRUE;
      }
   }
   return FALSE;
1a00287e:	2400      	movs	r4, #0
}
1a002880:	4620      	mov	r0, r4
1a002882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(TRUE == dht11_ProcessData()) {
1a002884:	f7ff ff02 	bl	1a00268c <dht11_ProcessData>
1a002888:	4604      	mov	r4, r0
1a00288a:	2801      	cmp	r0, #1
1a00288c:	d001      	beq.n	1a002892 <dht11Read+0x22>
   return FALSE;
1a00288e:	2400      	movs	r4, #0
1a002890:	e7f6      	b.n	1a002880 <dht11Read+0x10>
         *phum 	= (dht11_byte[0]) << 8 | (dht11_byte[1]);
1a002892:	4f1d      	ldr	r7, [pc, #116]	; (1a002908 <dht11Read+0x98>)
1a002894:	783b      	ldrb	r3, [r7, #0]
1a002896:	7878      	ldrb	r0, [r7, #1]
1a002898:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
         *phum 	*= 0.1;
1a00289c:	ee07 0a90 	vmov	s15, r0
1a0028a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0028a4:	ee17 0a90 	vmov	r0, s15
1a0028a8:	f000 f994 	bl	1a002bd4 <__aeabi_f2d>
1a0028ac:	a314      	add	r3, pc, #80	; (adr r3, 1a002900 <dht11Read+0x90>)
1a0028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0028b2:	f000 f9e7 	bl	1a002c84 <__aeabi_dmul>
1a0028b6:	f000 fbf7 	bl	1a0030a8 <__aeabi_d2f>
1a0028ba:	6030      	str	r0, [r6, #0]
         *ptemp = (dht11_byte[2] & 0x7F) << 8 | (dht11_byte[3]);
1a0028bc:	78be      	ldrb	r6, [r7, #2]
1a0028be:	0230      	lsls	r0, r6, #8
1a0028c0:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
1a0028c4:	78fb      	ldrb	r3, [r7, #3]
1a0028c6:	4318      	orrs	r0, r3
         *ptemp *= 0.1;
1a0028c8:	ee07 0a90 	vmov	s15, r0
1a0028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0028d0:	ee17 0a90 	vmov	r0, s15
1a0028d4:	f000 f97e 	bl	1a002bd4 <__aeabi_f2d>
1a0028d8:	a309      	add	r3, pc, #36	; (adr r3, 1a002900 <dht11Read+0x90>)
1a0028da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0028de:	f000 f9d1 	bl	1a002c84 <__aeabi_dmul>
1a0028e2:	f000 fbe1 	bl	1a0030a8 <__aeabi_d2f>
1a0028e6:	6028      	str	r0, [r5, #0]
         if (dht11_byte[2] & 0x80) {
1a0028e8:	f016 0f80 	tst.w	r6, #128	; 0x80
1a0028ec:	d0c8      	beq.n	1a002880 <dht11Read+0x10>
        	 *ptemp *= -1;
1a0028ee:	ee07 0a90 	vmov	s15, r0
1a0028f2:	eef1 7a67 	vneg.f32	s15, s15
1a0028f6:	edc5 7a00 	vstr	s15, [r5]
         return TRUE;
1a0028fa:	e7c1      	b.n	1a002880 <dht11Read+0x10>
1a0028fc:	f3af 8000 	nop.w
1a002900:	9999999a 	.word	0x9999999a
1a002904:	3fb99999 	.word	0x3fb99999
1a002908:	10000104 	.word	0x10000104

1a00290c <__aeabi_drsub>:
1a00290c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002910:	e002      	b.n	1a002918 <__adddf3>
1a002912:	bf00      	nop

1a002914 <__aeabi_dsub>:
1a002914:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002918 <__adddf3>:
1a002918:	b530      	push	{r4, r5, lr}
1a00291a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00291e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002922:	ea94 0f05 	teq	r4, r5
1a002926:	bf08      	it	eq
1a002928:	ea90 0f02 	teqeq	r0, r2
1a00292c:	bf1f      	itttt	ne
1a00292e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002932:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002936:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00293a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00293e:	f000 80e2 	beq.w	1a002b06 <__adddf3+0x1ee>
1a002942:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002946:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00294a:	bfb8      	it	lt
1a00294c:	426d      	neglt	r5, r5
1a00294e:	dd0c      	ble.n	1a00296a <__adddf3+0x52>
1a002950:	442c      	add	r4, r5
1a002952:	ea80 0202 	eor.w	r2, r0, r2
1a002956:	ea81 0303 	eor.w	r3, r1, r3
1a00295a:	ea82 0000 	eor.w	r0, r2, r0
1a00295e:	ea83 0101 	eor.w	r1, r3, r1
1a002962:	ea80 0202 	eor.w	r2, r0, r2
1a002966:	ea81 0303 	eor.w	r3, r1, r3
1a00296a:	2d36      	cmp	r5, #54	; 0x36
1a00296c:	bf88      	it	hi
1a00296e:	bd30      	pophi	{r4, r5, pc}
1a002970:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002974:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002978:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00297c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002980:	d002      	beq.n	1a002988 <__adddf3+0x70>
1a002982:	4240      	negs	r0, r0
1a002984:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002988:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00298c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002990:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002994:	d002      	beq.n	1a00299c <__adddf3+0x84>
1a002996:	4252      	negs	r2, r2
1a002998:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00299c:	ea94 0f05 	teq	r4, r5
1a0029a0:	f000 80a7 	beq.w	1a002af2 <__adddf3+0x1da>
1a0029a4:	f1a4 0401 	sub.w	r4, r4, #1
1a0029a8:	f1d5 0e20 	rsbs	lr, r5, #32
1a0029ac:	db0d      	blt.n	1a0029ca <__adddf3+0xb2>
1a0029ae:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0029b2:	fa22 f205 	lsr.w	r2, r2, r5
1a0029b6:	1880      	adds	r0, r0, r2
1a0029b8:	f141 0100 	adc.w	r1, r1, #0
1a0029bc:	fa03 f20e 	lsl.w	r2, r3, lr
1a0029c0:	1880      	adds	r0, r0, r2
1a0029c2:	fa43 f305 	asr.w	r3, r3, r5
1a0029c6:	4159      	adcs	r1, r3
1a0029c8:	e00e      	b.n	1a0029e8 <__adddf3+0xd0>
1a0029ca:	f1a5 0520 	sub.w	r5, r5, #32
1a0029ce:	f10e 0e20 	add.w	lr, lr, #32
1a0029d2:	2a01      	cmp	r2, #1
1a0029d4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0029d8:	bf28      	it	cs
1a0029da:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0029de:	fa43 f305 	asr.w	r3, r3, r5
1a0029e2:	18c0      	adds	r0, r0, r3
1a0029e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0029e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0029ec:	d507      	bpl.n	1a0029fe <__adddf3+0xe6>
1a0029ee:	f04f 0e00 	mov.w	lr, #0
1a0029f2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0029f6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0029fa:	eb6e 0101 	sbc.w	r1, lr, r1
1a0029fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002a02:	d31b      	bcc.n	1a002a3c <__adddf3+0x124>
1a002a04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002a08:	d30c      	bcc.n	1a002a24 <__adddf3+0x10c>
1a002a0a:	0849      	lsrs	r1, r1, #1
1a002a0c:	ea5f 0030 	movs.w	r0, r0, rrx
1a002a10:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002a14:	f104 0401 	add.w	r4, r4, #1
1a002a18:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002a1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002a20:	f080 809a 	bcs.w	1a002b58 <__adddf3+0x240>
1a002a24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002a28:	bf08      	it	eq
1a002a2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002a2e:	f150 0000 	adcs.w	r0, r0, #0
1a002a32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002a36:	ea41 0105 	orr.w	r1, r1, r5
1a002a3a:	bd30      	pop	{r4, r5, pc}
1a002a3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002a40:	4140      	adcs	r0, r0
1a002a42:	eb41 0101 	adc.w	r1, r1, r1
1a002a46:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002a4a:	f1a4 0401 	sub.w	r4, r4, #1
1a002a4e:	d1e9      	bne.n	1a002a24 <__adddf3+0x10c>
1a002a50:	f091 0f00 	teq	r1, #0
1a002a54:	bf04      	itt	eq
1a002a56:	4601      	moveq	r1, r0
1a002a58:	2000      	moveq	r0, #0
1a002a5a:	fab1 f381 	clz	r3, r1
1a002a5e:	bf08      	it	eq
1a002a60:	3320      	addeq	r3, #32
1a002a62:	f1a3 030b 	sub.w	r3, r3, #11
1a002a66:	f1b3 0220 	subs.w	r2, r3, #32
1a002a6a:	da0c      	bge.n	1a002a86 <__adddf3+0x16e>
1a002a6c:	320c      	adds	r2, #12
1a002a6e:	dd08      	ble.n	1a002a82 <__adddf3+0x16a>
1a002a70:	f102 0c14 	add.w	ip, r2, #20
1a002a74:	f1c2 020c 	rsb	r2, r2, #12
1a002a78:	fa01 f00c 	lsl.w	r0, r1, ip
1a002a7c:	fa21 f102 	lsr.w	r1, r1, r2
1a002a80:	e00c      	b.n	1a002a9c <__adddf3+0x184>
1a002a82:	f102 0214 	add.w	r2, r2, #20
1a002a86:	bfd8      	it	le
1a002a88:	f1c2 0c20 	rsble	ip, r2, #32
1a002a8c:	fa01 f102 	lsl.w	r1, r1, r2
1a002a90:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002a94:	bfdc      	itt	le
1a002a96:	ea41 010c 	orrle.w	r1, r1, ip
1a002a9a:	4090      	lslle	r0, r2
1a002a9c:	1ae4      	subs	r4, r4, r3
1a002a9e:	bfa2      	ittt	ge
1a002aa0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002aa4:	4329      	orrge	r1, r5
1a002aa6:	bd30      	popge	{r4, r5, pc}
1a002aa8:	ea6f 0404 	mvn.w	r4, r4
1a002aac:	3c1f      	subs	r4, #31
1a002aae:	da1c      	bge.n	1a002aea <__adddf3+0x1d2>
1a002ab0:	340c      	adds	r4, #12
1a002ab2:	dc0e      	bgt.n	1a002ad2 <__adddf3+0x1ba>
1a002ab4:	f104 0414 	add.w	r4, r4, #20
1a002ab8:	f1c4 0220 	rsb	r2, r4, #32
1a002abc:	fa20 f004 	lsr.w	r0, r0, r4
1a002ac0:	fa01 f302 	lsl.w	r3, r1, r2
1a002ac4:	ea40 0003 	orr.w	r0, r0, r3
1a002ac8:	fa21 f304 	lsr.w	r3, r1, r4
1a002acc:	ea45 0103 	orr.w	r1, r5, r3
1a002ad0:	bd30      	pop	{r4, r5, pc}
1a002ad2:	f1c4 040c 	rsb	r4, r4, #12
1a002ad6:	f1c4 0220 	rsb	r2, r4, #32
1a002ada:	fa20 f002 	lsr.w	r0, r0, r2
1a002ade:	fa01 f304 	lsl.w	r3, r1, r4
1a002ae2:	ea40 0003 	orr.w	r0, r0, r3
1a002ae6:	4629      	mov	r1, r5
1a002ae8:	bd30      	pop	{r4, r5, pc}
1a002aea:	fa21 f004 	lsr.w	r0, r1, r4
1a002aee:	4629      	mov	r1, r5
1a002af0:	bd30      	pop	{r4, r5, pc}
1a002af2:	f094 0f00 	teq	r4, #0
1a002af6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002afa:	bf06      	itte	eq
1a002afc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002b00:	3401      	addeq	r4, #1
1a002b02:	3d01      	subne	r5, #1
1a002b04:	e74e      	b.n	1a0029a4 <__adddf3+0x8c>
1a002b06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002b0a:	bf18      	it	ne
1a002b0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002b10:	d029      	beq.n	1a002b66 <__adddf3+0x24e>
1a002b12:	ea94 0f05 	teq	r4, r5
1a002b16:	bf08      	it	eq
1a002b18:	ea90 0f02 	teqeq	r0, r2
1a002b1c:	d005      	beq.n	1a002b2a <__adddf3+0x212>
1a002b1e:	ea54 0c00 	orrs.w	ip, r4, r0
1a002b22:	bf04      	itt	eq
1a002b24:	4619      	moveq	r1, r3
1a002b26:	4610      	moveq	r0, r2
1a002b28:	bd30      	pop	{r4, r5, pc}
1a002b2a:	ea91 0f03 	teq	r1, r3
1a002b2e:	bf1e      	ittt	ne
1a002b30:	2100      	movne	r1, #0
1a002b32:	2000      	movne	r0, #0
1a002b34:	bd30      	popne	{r4, r5, pc}
1a002b36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002b3a:	d105      	bne.n	1a002b48 <__adddf3+0x230>
1a002b3c:	0040      	lsls	r0, r0, #1
1a002b3e:	4149      	adcs	r1, r1
1a002b40:	bf28      	it	cs
1a002b42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002b46:	bd30      	pop	{r4, r5, pc}
1a002b48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002b4c:	bf3c      	itt	cc
1a002b4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002b52:	bd30      	popcc	{r4, r5, pc}
1a002b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002b58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002b5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002b60:	f04f 0000 	mov.w	r0, #0
1a002b64:	bd30      	pop	{r4, r5, pc}
1a002b66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002b6a:	bf1a      	itte	ne
1a002b6c:	4619      	movne	r1, r3
1a002b6e:	4610      	movne	r0, r2
1a002b70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002b74:	bf1c      	itt	ne
1a002b76:	460b      	movne	r3, r1
1a002b78:	4602      	movne	r2, r0
1a002b7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002b7e:	bf06      	itte	eq
1a002b80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002b84:	ea91 0f03 	teqeq	r1, r3
1a002b88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002b8c:	bd30      	pop	{r4, r5, pc}
1a002b8e:	bf00      	nop

1a002b90 <__aeabi_ui2d>:
1a002b90:	f090 0f00 	teq	r0, #0
1a002b94:	bf04      	itt	eq
1a002b96:	2100      	moveq	r1, #0
1a002b98:	4770      	bxeq	lr
1a002b9a:	b530      	push	{r4, r5, lr}
1a002b9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002ba0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002ba4:	f04f 0500 	mov.w	r5, #0
1a002ba8:	f04f 0100 	mov.w	r1, #0
1a002bac:	e750      	b.n	1a002a50 <__adddf3+0x138>
1a002bae:	bf00      	nop

1a002bb0 <__aeabi_i2d>:
1a002bb0:	f090 0f00 	teq	r0, #0
1a002bb4:	bf04      	itt	eq
1a002bb6:	2100      	moveq	r1, #0
1a002bb8:	4770      	bxeq	lr
1a002bba:	b530      	push	{r4, r5, lr}
1a002bbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002bc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002bc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002bc8:	bf48      	it	mi
1a002bca:	4240      	negmi	r0, r0
1a002bcc:	f04f 0100 	mov.w	r1, #0
1a002bd0:	e73e      	b.n	1a002a50 <__adddf3+0x138>
1a002bd2:	bf00      	nop

1a002bd4 <__aeabi_f2d>:
1a002bd4:	0042      	lsls	r2, r0, #1
1a002bd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002bda:	ea4f 0131 	mov.w	r1, r1, rrx
1a002bde:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002be2:	bf1f      	itttt	ne
1a002be4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002be8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002bec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002bf0:	4770      	bxne	lr
1a002bf2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002bf6:	bf08      	it	eq
1a002bf8:	4770      	bxeq	lr
1a002bfa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a002bfe:	bf04      	itt	eq
1a002c00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002c04:	4770      	bxeq	lr
1a002c06:	b530      	push	{r4, r5, lr}
1a002c08:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002c10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002c14:	e71c      	b.n	1a002a50 <__adddf3+0x138>
1a002c16:	bf00      	nop

1a002c18 <__aeabi_ul2d>:
1a002c18:	ea50 0201 	orrs.w	r2, r0, r1
1a002c1c:	bf08      	it	eq
1a002c1e:	4770      	bxeq	lr
1a002c20:	b530      	push	{r4, r5, lr}
1a002c22:	f04f 0500 	mov.w	r5, #0
1a002c26:	e00a      	b.n	1a002c3e <__aeabi_l2d+0x16>

1a002c28 <__aeabi_l2d>:
1a002c28:	ea50 0201 	orrs.w	r2, r0, r1
1a002c2c:	bf08      	it	eq
1a002c2e:	4770      	bxeq	lr
1a002c30:	b530      	push	{r4, r5, lr}
1a002c32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002c36:	d502      	bpl.n	1a002c3e <__aeabi_l2d+0x16>
1a002c38:	4240      	negs	r0, r0
1a002c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002c3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002c42:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002c46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002c4a:	f43f aed8 	beq.w	1a0029fe <__adddf3+0xe6>
1a002c4e:	f04f 0203 	mov.w	r2, #3
1a002c52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002c56:	bf18      	it	ne
1a002c58:	3203      	addne	r2, #3
1a002c5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002c5e:	bf18      	it	ne
1a002c60:	3203      	addne	r2, #3
1a002c62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002c66:	f1c2 0320 	rsb	r3, r2, #32
1a002c6a:	fa00 fc03 	lsl.w	ip, r0, r3
1a002c6e:	fa20 f002 	lsr.w	r0, r0, r2
1a002c72:	fa01 fe03 	lsl.w	lr, r1, r3
1a002c76:	ea40 000e 	orr.w	r0, r0, lr
1a002c7a:	fa21 f102 	lsr.w	r1, r1, r2
1a002c7e:	4414      	add	r4, r2
1a002c80:	e6bd      	b.n	1a0029fe <__adddf3+0xe6>
1a002c82:	bf00      	nop

1a002c84 <__aeabi_dmul>:
1a002c84:	b570      	push	{r4, r5, r6, lr}
1a002c86:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002c8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002c8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002c92:	bf1d      	ittte	ne
1a002c94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002c98:	ea94 0f0c 	teqne	r4, ip
1a002c9c:	ea95 0f0c 	teqne	r5, ip
1a002ca0:	f000 f8de 	bleq	1a002e60 <__aeabi_dmul+0x1dc>
1a002ca4:	442c      	add	r4, r5
1a002ca6:	ea81 0603 	eor.w	r6, r1, r3
1a002caa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002cae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002cb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002cb6:	bf18      	it	ne
1a002cb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002cbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002cc4:	d038      	beq.n	1a002d38 <__aeabi_dmul+0xb4>
1a002cc6:	fba0 ce02 	umull	ip, lr, r0, r2
1a002cca:	f04f 0500 	mov.w	r5, #0
1a002cce:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002cd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002cd6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002cda:	f04f 0600 	mov.w	r6, #0
1a002cde:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002ce2:	f09c 0f00 	teq	ip, #0
1a002ce6:	bf18      	it	ne
1a002ce8:	f04e 0e01 	orrne.w	lr, lr, #1
1a002cec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002cf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002cf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002cf8:	d204      	bcs.n	1a002d04 <__aeabi_dmul+0x80>
1a002cfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002cfe:	416d      	adcs	r5, r5
1a002d00:	eb46 0606 	adc.w	r6, r6, r6
1a002d04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002d08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002d0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002d10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002d14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002d18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002d1c:	bf88      	it	hi
1a002d1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002d22:	d81e      	bhi.n	1a002d62 <__aeabi_dmul+0xde>
1a002d24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002d28:	bf08      	it	eq
1a002d2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002d2e:	f150 0000 	adcs.w	r0, r0, #0
1a002d32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002d36:	bd70      	pop	{r4, r5, r6, pc}
1a002d38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002d3c:	ea46 0101 	orr.w	r1, r6, r1
1a002d40:	ea40 0002 	orr.w	r0, r0, r2
1a002d44:	ea81 0103 	eor.w	r1, r1, r3
1a002d48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002d4c:	bfc2      	ittt	gt
1a002d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002d56:	bd70      	popgt	{r4, r5, r6, pc}
1a002d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002d5c:	f04f 0e00 	mov.w	lr, #0
1a002d60:	3c01      	subs	r4, #1
1a002d62:	f300 80ab 	bgt.w	1a002ebc <__aeabi_dmul+0x238>
1a002d66:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002d6a:	bfde      	ittt	le
1a002d6c:	2000      	movle	r0, #0
1a002d6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002d72:	bd70      	pople	{r4, r5, r6, pc}
1a002d74:	f1c4 0400 	rsb	r4, r4, #0
1a002d78:	3c20      	subs	r4, #32
1a002d7a:	da35      	bge.n	1a002de8 <__aeabi_dmul+0x164>
1a002d7c:	340c      	adds	r4, #12
1a002d7e:	dc1b      	bgt.n	1a002db8 <__aeabi_dmul+0x134>
1a002d80:	f104 0414 	add.w	r4, r4, #20
1a002d84:	f1c4 0520 	rsb	r5, r4, #32
1a002d88:	fa00 f305 	lsl.w	r3, r0, r5
1a002d8c:	fa20 f004 	lsr.w	r0, r0, r4
1a002d90:	fa01 f205 	lsl.w	r2, r1, r5
1a002d94:	ea40 0002 	orr.w	r0, r0, r2
1a002d98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002d9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002da0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002da4:	fa21 f604 	lsr.w	r6, r1, r4
1a002da8:	eb42 0106 	adc.w	r1, r2, r6
1a002dac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002db0:	bf08      	it	eq
1a002db2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002db6:	bd70      	pop	{r4, r5, r6, pc}
1a002db8:	f1c4 040c 	rsb	r4, r4, #12
1a002dbc:	f1c4 0520 	rsb	r5, r4, #32
1a002dc0:	fa00 f304 	lsl.w	r3, r0, r4
1a002dc4:	fa20 f005 	lsr.w	r0, r0, r5
1a002dc8:	fa01 f204 	lsl.w	r2, r1, r4
1a002dcc:	ea40 0002 	orr.w	r0, r0, r2
1a002dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002dd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002dd8:	f141 0100 	adc.w	r1, r1, #0
1a002ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002de0:	bf08      	it	eq
1a002de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002de6:	bd70      	pop	{r4, r5, r6, pc}
1a002de8:	f1c4 0520 	rsb	r5, r4, #32
1a002dec:	fa00 f205 	lsl.w	r2, r0, r5
1a002df0:	ea4e 0e02 	orr.w	lr, lr, r2
1a002df4:	fa20 f304 	lsr.w	r3, r0, r4
1a002df8:	fa01 f205 	lsl.w	r2, r1, r5
1a002dfc:	ea43 0302 	orr.w	r3, r3, r2
1a002e00:	fa21 f004 	lsr.w	r0, r1, r4
1a002e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e08:	fa21 f204 	lsr.w	r2, r1, r4
1a002e0c:	ea20 0002 	bic.w	r0, r0, r2
1a002e10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002e14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002e18:	bf08      	it	eq
1a002e1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002e1e:	bd70      	pop	{r4, r5, r6, pc}
1a002e20:	f094 0f00 	teq	r4, #0
1a002e24:	d10f      	bne.n	1a002e46 <__aeabi_dmul+0x1c2>
1a002e26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002e2a:	0040      	lsls	r0, r0, #1
1a002e2c:	eb41 0101 	adc.w	r1, r1, r1
1a002e30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002e34:	bf08      	it	eq
1a002e36:	3c01      	subeq	r4, #1
1a002e38:	d0f7      	beq.n	1a002e2a <__aeabi_dmul+0x1a6>
1a002e3a:	ea41 0106 	orr.w	r1, r1, r6
1a002e3e:	f095 0f00 	teq	r5, #0
1a002e42:	bf18      	it	ne
1a002e44:	4770      	bxne	lr
1a002e46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002e4a:	0052      	lsls	r2, r2, #1
1a002e4c:	eb43 0303 	adc.w	r3, r3, r3
1a002e50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002e54:	bf08      	it	eq
1a002e56:	3d01      	subeq	r5, #1
1a002e58:	d0f7      	beq.n	1a002e4a <__aeabi_dmul+0x1c6>
1a002e5a:	ea43 0306 	orr.w	r3, r3, r6
1a002e5e:	4770      	bx	lr
1a002e60:	ea94 0f0c 	teq	r4, ip
1a002e64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002e68:	bf18      	it	ne
1a002e6a:	ea95 0f0c 	teqne	r5, ip
1a002e6e:	d00c      	beq.n	1a002e8a <__aeabi_dmul+0x206>
1a002e70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002e74:	bf18      	it	ne
1a002e76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002e7a:	d1d1      	bne.n	1a002e20 <__aeabi_dmul+0x19c>
1a002e7c:	ea81 0103 	eor.w	r1, r1, r3
1a002e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e84:	f04f 0000 	mov.w	r0, #0
1a002e88:	bd70      	pop	{r4, r5, r6, pc}
1a002e8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002e8e:	bf06      	itte	eq
1a002e90:	4610      	moveq	r0, r2
1a002e92:	4619      	moveq	r1, r3
1a002e94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002e98:	d019      	beq.n	1a002ece <__aeabi_dmul+0x24a>
1a002e9a:	ea94 0f0c 	teq	r4, ip
1a002e9e:	d102      	bne.n	1a002ea6 <__aeabi_dmul+0x222>
1a002ea0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002ea4:	d113      	bne.n	1a002ece <__aeabi_dmul+0x24a>
1a002ea6:	ea95 0f0c 	teq	r5, ip
1a002eaa:	d105      	bne.n	1a002eb8 <__aeabi_dmul+0x234>
1a002eac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002eb0:	bf1c      	itt	ne
1a002eb2:	4610      	movne	r0, r2
1a002eb4:	4619      	movne	r1, r3
1a002eb6:	d10a      	bne.n	1a002ece <__aeabi_dmul+0x24a>
1a002eb8:	ea81 0103 	eor.w	r1, r1, r3
1a002ebc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ec0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002ec4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002ec8:	f04f 0000 	mov.w	r0, #0
1a002ecc:	bd70      	pop	{r4, r5, r6, pc}
1a002ece:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002ed2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002ed6:	bd70      	pop	{r4, r5, r6, pc}

1a002ed8 <__aeabi_ddiv>:
1a002ed8:	b570      	push	{r4, r5, r6, lr}
1a002eda:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002ede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002ee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002ee6:	bf1d      	ittte	ne
1a002ee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002eec:	ea94 0f0c 	teqne	r4, ip
1a002ef0:	ea95 0f0c 	teqne	r5, ip
1a002ef4:	f000 f8a7 	bleq	1a003046 <__aeabi_ddiv+0x16e>
1a002ef8:	eba4 0405 	sub.w	r4, r4, r5
1a002efc:	ea81 0e03 	eor.w	lr, r1, r3
1a002f00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002f04:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002f08:	f000 8088 	beq.w	1a00301c <__aeabi_ddiv+0x144>
1a002f0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002f10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002f14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002f18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002f1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002f20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002f24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002f28:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002f2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002f30:	429d      	cmp	r5, r3
1a002f32:	bf08      	it	eq
1a002f34:	4296      	cmpeq	r6, r2
1a002f36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002f3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002f3e:	d202      	bcs.n	1a002f46 <__aeabi_ddiv+0x6e>
1a002f40:	085b      	lsrs	r3, r3, #1
1a002f42:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f46:	1ab6      	subs	r6, r6, r2
1a002f48:	eb65 0503 	sbc.w	r5, r5, r3
1a002f4c:	085b      	lsrs	r3, r3, #1
1a002f4e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002f56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002f5a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f62:	bf22      	ittt	cs
1a002f64:	1ab6      	subcs	r6, r6, r2
1a002f66:	4675      	movcs	r5, lr
1a002f68:	ea40 000c 	orrcs.w	r0, r0, ip
1a002f6c:	085b      	lsrs	r3, r3, #1
1a002f6e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f72:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f76:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f7a:	bf22      	ittt	cs
1a002f7c:	1ab6      	subcs	r6, r6, r2
1a002f7e:	4675      	movcs	r5, lr
1a002f80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002f84:	085b      	lsrs	r3, r3, #1
1a002f86:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f8a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f92:	bf22      	ittt	cs
1a002f94:	1ab6      	subcs	r6, r6, r2
1a002f96:	4675      	movcs	r5, lr
1a002f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002f9c:	085b      	lsrs	r3, r3, #1
1a002f9e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002fa2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002faa:	bf22      	ittt	cs
1a002fac:	1ab6      	subcs	r6, r6, r2
1a002fae:	4675      	movcs	r5, lr
1a002fb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002fb4:	ea55 0e06 	orrs.w	lr, r5, r6
1a002fb8:	d018      	beq.n	1a002fec <__aeabi_ddiv+0x114>
1a002fba:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002fbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002fc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002fc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002fca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002fce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002fd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002fd6:	d1c0      	bne.n	1a002f5a <__aeabi_ddiv+0x82>
1a002fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002fdc:	d10b      	bne.n	1a002ff6 <__aeabi_ddiv+0x11e>
1a002fde:	ea41 0100 	orr.w	r1, r1, r0
1a002fe2:	f04f 0000 	mov.w	r0, #0
1a002fe6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002fea:	e7b6      	b.n	1a002f5a <__aeabi_ddiv+0x82>
1a002fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002ff0:	bf04      	itt	eq
1a002ff2:	4301      	orreq	r1, r0
1a002ff4:	2000      	moveq	r0, #0
1a002ff6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002ffa:	bf88      	it	hi
1a002ffc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003000:	f63f aeaf 	bhi.w	1a002d62 <__aeabi_dmul+0xde>
1a003004:	ebb5 0c03 	subs.w	ip, r5, r3
1a003008:	bf04      	itt	eq
1a00300a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00300e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003012:	f150 0000 	adcs.w	r0, r0, #0
1a003016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00301a:	bd70      	pop	{r4, r5, r6, pc}
1a00301c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003020:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003024:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003028:	bfc2      	ittt	gt
1a00302a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00302e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003032:	bd70      	popgt	{r4, r5, r6, pc}
1a003034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003038:	f04f 0e00 	mov.w	lr, #0
1a00303c:	3c01      	subs	r4, #1
1a00303e:	e690      	b.n	1a002d62 <__aeabi_dmul+0xde>
1a003040:	ea45 0e06 	orr.w	lr, r5, r6
1a003044:	e68d      	b.n	1a002d62 <__aeabi_dmul+0xde>
1a003046:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00304a:	ea94 0f0c 	teq	r4, ip
1a00304e:	bf08      	it	eq
1a003050:	ea95 0f0c 	teqeq	r5, ip
1a003054:	f43f af3b 	beq.w	1a002ece <__aeabi_dmul+0x24a>
1a003058:	ea94 0f0c 	teq	r4, ip
1a00305c:	d10a      	bne.n	1a003074 <__aeabi_ddiv+0x19c>
1a00305e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003062:	f47f af34 	bne.w	1a002ece <__aeabi_dmul+0x24a>
1a003066:	ea95 0f0c 	teq	r5, ip
1a00306a:	f47f af25 	bne.w	1a002eb8 <__aeabi_dmul+0x234>
1a00306e:	4610      	mov	r0, r2
1a003070:	4619      	mov	r1, r3
1a003072:	e72c      	b.n	1a002ece <__aeabi_dmul+0x24a>
1a003074:	ea95 0f0c 	teq	r5, ip
1a003078:	d106      	bne.n	1a003088 <__aeabi_ddiv+0x1b0>
1a00307a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00307e:	f43f aefd 	beq.w	1a002e7c <__aeabi_dmul+0x1f8>
1a003082:	4610      	mov	r0, r2
1a003084:	4619      	mov	r1, r3
1a003086:	e722      	b.n	1a002ece <__aeabi_dmul+0x24a>
1a003088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00308c:	bf18      	it	ne
1a00308e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003092:	f47f aec5 	bne.w	1a002e20 <__aeabi_dmul+0x19c>
1a003096:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00309a:	f47f af0d 	bne.w	1a002eb8 <__aeabi_dmul+0x234>
1a00309e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0030a2:	f47f aeeb 	bne.w	1a002e7c <__aeabi_dmul+0x1f8>
1a0030a6:	e712      	b.n	1a002ece <__aeabi_dmul+0x24a>

1a0030a8 <__aeabi_d2f>:
1a0030a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0030ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0030b0:	bf24      	itt	cs
1a0030b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0030b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0030ba:	d90d      	bls.n	1a0030d8 <__aeabi_d2f+0x30>
1a0030bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0030c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0030c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0030c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0030cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0030d0:	bf08      	it	eq
1a0030d2:	f020 0001 	biceq.w	r0, r0, #1
1a0030d6:	4770      	bx	lr
1a0030d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0030dc:	d121      	bne.n	1a003122 <__aeabi_d2f+0x7a>
1a0030de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0030e2:	bfbc      	itt	lt
1a0030e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0030e8:	4770      	bxlt	lr
1a0030ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0030ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0030f2:	f1c2 0218 	rsb	r2, r2, #24
1a0030f6:	f1c2 0c20 	rsb	ip, r2, #32
1a0030fa:	fa10 f30c 	lsls.w	r3, r0, ip
1a0030fe:	fa20 f002 	lsr.w	r0, r0, r2
1a003102:	bf18      	it	ne
1a003104:	f040 0001 	orrne.w	r0, r0, #1
1a003108:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00310c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a003110:	fa03 fc0c 	lsl.w	ip, r3, ip
1a003114:	ea40 000c 	orr.w	r0, r0, ip
1a003118:	fa23 f302 	lsr.w	r3, r3, r2
1a00311c:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a003120:	e7cc      	b.n	1a0030bc <__aeabi_d2f+0x14>
1a003122:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a003126:	d107      	bne.n	1a003138 <__aeabi_d2f+0x90>
1a003128:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a00312c:	bf1e      	ittt	ne
1a00312e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a003132:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a003136:	4770      	bxne	lr
1a003138:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a00313c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a003140:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a003144:	4770      	bx	lr
1a003146:	bf00      	nop

1a003148 <__aeabi_uldivmod>:
1a003148:	b953      	cbnz	r3, 1a003160 <__aeabi_uldivmod+0x18>
1a00314a:	b94a      	cbnz	r2, 1a003160 <__aeabi_uldivmod+0x18>
1a00314c:	2900      	cmp	r1, #0
1a00314e:	bf08      	it	eq
1a003150:	2800      	cmpeq	r0, #0
1a003152:	bf1c      	itt	ne
1a003154:	f04f 31ff 	movne.w	r1, #4294967295
1a003158:	f04f 30ff 	movne.w	r0, #4294967295
1a00315c:	f000 b974 	b.w	1a003448 <__aeabi_idiv0>
1a003160:	f1ad 0c08 	sub.w	ip, sp, #8
1a003164:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003168:	f000 f806 	bl	1a003178 <__udivmoddi4>
1a00316c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003174:	b004      	add	sp, #16
1a003176:	4770      	bx	lr

1a003178 <__udivmoddi4>:
1a003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00317c:	9e08      	ldr	r6, [sp, #32]
1a00317e:	4604      	mov	r4, r0
1a003180:	4688      	mov	r8, r1
1a003182:	2b00      	cmp	r3, #0
1a003184:	f040 8085 	bne.w	1a003292 <__udivmoddi4+0x11a>
1a003188:	428a      	cmp	r2, r1
1a00318a:	4615      	mov	r5, r2
1a00318c:	d948      	bls.n	1a003220 <__udivmoddi4+0xa8>
1a00318e:	fab2 f282 	clz	r2, r2
1a003192:	b14a      	cbz	r2, 1a0031a8 <__udivmoddi4+0x30>
1a003194:	f1c2 0720 	rsb	r7, r2, #32
1a003198:	fa01 f302 	lsl.w	r3, r1, r2
1a00319c:	fa20 f707 	lsr.w	r7, r0, r7
1a0031a0:	4095      	lsls	r5, r2
1a0031a2:	ea47 0803 	orr.w	r8, r7, r3
1a0031a6:	4094      	lsls	r4, r2
1a0031a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0031ac:	0c23      	lsrs	r3, r4, #16
1a0031ae:	fbb8 f7fe 	udiv	r7, r8, lr
1a0031b2:	fa1f fc85 	uxth.w	ip, r5
1a0031b6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0031ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0031be:	fb07 f10c 	mul.w	r1, r7, ip
1a0031c2:	4299      	cmp	r1, r3
1a0031c4:	d909      	bls.n	1a0031da <__udivmoddi4+0x62>
1a0031c6:	18eb      	adds	r3, r5, r3
1a0031c8:	f107 30ff 	add.w	r0, r7, #4294967295
1a0031cc:	f080 80e3 	bcs.w	1a003396 <__udivmoddi4+0x21e>
1a0031d0:	4299      	cmp	r1, r3
1a0031d2:	f240 80e0 	bls.w	1a003396 <__udivmoddi4+0x21e>
1a0031d6:	3f02      	subs	r7, #2
1a0031d8:	442b      	add	r3, r5
1a0031da:	1a5b      	subs	r3, r3, r1
1a0031dc:	b2a4      	uxth	r4, r4
1a0031de:	fbb3 f0fe 	udiv	r0, r3, lr
1a0031e2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0031e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0031ea:	fb00 fc0c 	mul.w	ip, r0, ip
1a0031ee:	45a4      	cmp	ip, r4
1a0031f0:	d909      	bls.n	1a003206 <__udivmoddi4+0x8e>
1a0031f2:	192c      	adds	r4, r5, r4
1a0031f4:	f100 33ff 	add.w	r3, r0, #4294967295
1a0031f8:	f080 80cb 	bcs.w	1a003392 <__udivmoddi4+0x21a>
1a0031fc:	45a4      	cmp	ip, r4
1a0031fe:	f240 80c8 	bls.w	1a003392 <__udivmoddi4+0x21a>
1a003202:	3802      	subs	r0, #2
1a003204:	442c      	add	r4, r5
1a003206:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00320a:	eba4 040c 	sub.w	r4, r4, ip
1a00320e:	2700      	movs	r7, #0
1a003210:	b11e      	cbz	r6, 1a00321a <__udivmoddi4+0xa2>
1a003212:	40d4      	lsrs	r4, r2
1a003214:	2300      	movs	r3, #0
1a003216:	e9c6 4300 	strd	r4, r3, [r6]
1a00321a:	4639      	mov	r1, r7
1a00321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003220:	2a00      	cmp	r2, #0
1a003222:	d053      	beq.n	1a0032cc <__udivmoddi4+0x154>
1a003224:	fab2 f282 	clz	r2, r2
1a003228:	2a00      	cmp	r2, #0
1a00322a:	f040 80b6 	bne.w	1a00339a <__udivmoddi4+0x222>
1a00322e:	1b49      	subs	r1, r1, r5
1a003230:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003234:	fa1f f885 	uxth.w	r8, r5
1a003238:	2701      	movs	r7, #1
1a00323a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00323e:	0c23      	lsrs	r3, r4, #16
1a003240:	fb0e 111c 	mls	r1, lr, ip, r1
1a003244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003248:	fb08 f10c 	mul.w	r1, r8, ip
1a00324c:	4299      	cmp	r1, r3
1a00324e:	d907      	bls.n	1a003260 <__udivmoddi4+0xe8>
1a003250:	18eb      	adds	r3, r5, r3
1a003252:	f10c 30ff 	add.w	r0, ip, #4294967295
1a003256:	d202      	bcs.n	1a00325e <__udivmoddi4+0xe6>
1a003258:	4299      	cmp	r1, r3
1a00325a:	f200 80ec 	bhi.w	1a003436 <__udivmoddi4+0x2be>
1a00325e:	4684      	mov	ip, r0
1a003260:	1a59      	subs	r1, r3, r1
1a003262:	b2a3      	uxth	r3, r4
1a003264:	fbb1 f0fe 	udiv	r0, r1, lr
1a003268:	fb0e 1410 	mls	r4, lr, r0, r1
1a00326c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003270:	fb08 f800 	mul.w	r8, r8, r0
1a003274:	45a0      	cmp	r8, r4
1a003276:	d907      	bls.n	1a003288 <__udivmoddi4+0x110>
1a003278:	192c      	adds	r4, r5, r4
1a00327a:	f100 33ff 	add.w	r3, r0, #4294967295
1a00327e:	d202      	bcs.n	1a003286 <__udivmoddi4+0x10e>
1a003280:	45a0      	cmp	r8, r4
1a003282:	f200 80dc 	bhi.w	1a00343e <__udivmoddi4+0x2c6>
1a003286:	4618      	mov	r0, r3
1a003288:	eba4 0408 	sub.w	r4, r4, r8
1a00328c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003290:	e7be      	b.n	1a003210 <__udivmoddi4+0x98>
1a003292:	428b      	cmp	r3, r1
1a003294:	d908      	bls.n	1a0032a8 <__udivmoddi4+0x130>
1a003296:	2e00      	cmp	r6, #0
1a003298:	d078      	beq.n	1a00338c <__udivmoddi4+0x214>
1a00329a:	2700      	movs	r7, #0
1a00329c:	e9c6 0100 	strd	r0, r1, [r6]
1a0032a0:	4638      	mov	r0, r7
1a0032a2:	4639      	mov	r1, r7
1a0032a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0032a8:	fab3 f783 	clz	r7, r3
1a0032ac:	b97f      	cbnz	r7, 1a0032ce <__udivmoddi4+0x156>
1a0032ae:	428b      	cmp	r3, r1
1a0032b0:	d302      	bcc.n	1a0032b8 <__udivmoddi4+0x140>
1a0032b2:	4282      	cmp	r2, r0
1a0032b4:	f200 80bd 	bhi.w	1a003432 <__udivmoddi4+0x2ba>
1a0032b8:	1a84      	subs	r4, r0, r2
1a0032ba:	eb61 0303 	sbc.w	r3, r1, r3
1a0032be:	2001      	movs	r0, #1
1a0032c0:	4698      	mov	r8, r3
1a0032c2:	2e00      	cmp	r6, #0
1a0032c4:	d0a9      	beq.n	1a00321a <__udivmoddi4+0xa2>
1a0032c6:	e9c6 4800 	strd	r4, r8, [r6]
1a0032ca:	e7a6      	b.n	1a00321a <__udivmoddi4+0xa2>
1a0032cc:	deff      	udf	#255	; 0xff
1a0032ce:	f1c7 0520 	rsb	r5, r7, #32
1a0032d2:	40bb      	lsls	r3, r7
1a0032d4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0032d8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0032dc:	fa01 f407 	lsl.w	r4, r1, r7
1a0032e0:	fa20 f805 	lsr.w	r8, r0, r5
1a0032e4:	fa21 f305 	lsr.w	r3, r1, r5
1a0032e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0032ec:	ea48 0404 	orr.w	r4, r8, r4
1a0032f0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0032f4:	0c21      	lsrs	r1, r4, #16
1a0032f6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0032fa:	fa1f f88c 	uxth.w	r8, ip
1a0032fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003302:	fb09 fa08 	mul.w	sl, r9, r8
1a003306:	459a      	cmp	sl, r3
1a003308:	fa02 f207 	lsl.w	r2, r2, r7
1a00330c:	fa00 f107 	lsl.w	r1, r0, r7
1a003310:	d90b      	bls.n	1a00332a <__udivmoddi4+0x1b2>
1a003312:	eb1c 0303 	adds.w	r3, ip, r3
1a003316:	f109 30ff 	add.w	r0, r9, #4294967295
1a00331a:	f080 8088 	bcs.w	1a00342e <__udivmoddi4+0x2b6>
1a00331e:	459a      	cmp	sl, r3
1a003320:	f240 8085 	bls.w	1a00342e <__udivmoddi4+0x2b6>
1a003324:	f1a9 0902 	sub.w	r9, r9, #2
1a003328:	4463      	add	r3, ip
1a00332a:	eba3 030a 	sub.w	r3, r3, sl
1a00332e:	b2a4      	uxth	r4, r4
1a003330:	fbb3 f0fe 	udiv	r0, r3, lr
1a003334:	fb0e 3310 	mls	r3, lr, r0, r3
1a003338:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00333c:	fb00 f808 	mul.w	r8, r0, r8
1a003340:	45a0      	cmp	r8, r4
1a003342:	d908      	bls.n	1a003356 <__udivmoddi4+0x1de>
1a003344:	eb1c 0404 	adds.w	r4, ip, r4
1a003348:	f100 33ff 	add.w	r3, r0, #4294967295
1a00334c:	d26b      	bcs.n	1a003426 <__udivmoddi4+0x2ae>
1a00334e:	45a0      	cmp	r8, r4
1a003350:	d969      	bls.n	1a003426 <__udivmoddi4+0x2ae>
1a003352:	3802      	subs	r0, #2
1a003354:	4464      	add	r4, ip
1a003356:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00335a:	eba4 0408 	sub.w	r4, r4, r8
1a00335e:	fba0 8902 	umull	r8, r9, r0, r2
1a003362:	454c      	cmp	r4, r9
1a003364:	46c6      	mov	lr, r8
1a003366:	464b      	mov	r3, r9
1a003368:	d354      	bcc.n	1a003414 <__udivmoddi4+0x29c>
1a00336a:	d051      	beq.n	1a003410 <__udivmoddi4+0x298>
1a00336c:	2e00      	cmp	r6, #0
1a00336e:	d069      	beq.n	1a003444 <__udivmoddi4+0x2cc>
1a003370:	ebb1 020e 	subs.w	r2, r1, lr
1a003374:	eb64 0403 	sbc.w	r4, r4, r3
1a003378:	fa04 f505 	lsl.w	r5, r4, r5
1a00337c:	fa22 f307 	lsr.w	r3, r2, r7
1a003380:	40fc      	lsrs	r4, r7
1a003382:	431d      	orrs	r5, r3
1a003384:	e9c6 5400 	strd	r5, r4, [r6]
1a003388:	2700      	movs	r7, #0
1a00338a:	e746      	b.n	1a00321a <__udivmoddi4+0xa2>
1a00338c:	4637      	mov	r7, r6
1a00338e:	4630      	mov	r0, r6
1a003390:	e743      	b.n	1a00321a <__udivmoddi4+0xa2>
1a003392:	4618      	mov	r0, r3
1a003394:	e737      	b.n	1a003206 <__udivmoddi4+0x8e>
1a003396:	4607      	mov	r7, r0
1a003398:	e71f      	b.n	1a0031da <__udivmoddi4+0x62>
1a00339a:	f1c2 0320 	rsb	r3, r2, #32
1a00339e:	fa20 f703 	lsr.w	r7, r0, r3
1a0033a2:	4095      	lsls	r5, r2
1a0033a4:	fa01 f002 	lsl.w	r0, r1, r2
1a0033a8:	fa21 f303 	lsr.w	r3, r1, r3
1a0033ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0033b0:	4338      	orrs	r0, r7
1a0033b2:	0c01      	lsrs	r1, r0, #16
1a0033b4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0033b8:	fa1f f885 	uxth.w	r8, r5
1a0033bc:	fb0e 3317 	mls	r3, lr, r7, r3
1a0033c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0033c4:	fb07 f308 	mul.w	r3, r7, r8
1a0033c8:	428b      	cmp	r3, r1
1a0033ca:	fa04 f402 	lsl.w	r4, r4, r2
1a0033ce:	d907      	bls.n	1a0033e0 <__udivmoddi4+0x268>
1a0033d0:	1869      	adds	r1, r5, r1
1a0033d2:	f107 3cff 	add.w	ip, r7, #4294967295
1a0033d6:	d228      	bcs.n	1a00342a <__udivmoddi4+0x2b2>
1a0033d8:	428b      	cmp	r3, r1
1a0033da:	d926      	bls.n	1a00342a <__udivmoddi4+0x2b2>
1a0033dc:	3f02      	subs	r7, #2
1a0033de:	4429      	add	r1, r5
1a0033e0:	1acb      	subs	r3, r1, r3
1a0033e2:	b281      	uxth	r1, r0
1a0033e4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0033e8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0033ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0033f0:	fb00 f308 	mul.w	r3, r0, r8
1a0033f4:	428b      	cmp	r3, r1
1a0033f6:	d907      	bls.n	1a003408 <__udivmoddi4+0x290>
1a0033f8:	1869      	adds	r1, r5, r1
1a0033fa:	f100 3cff 	add.w	ip, r0, #4294967295
1a0033fe:	d210      	bcs.n	1a003422 <__udivmoddi4+0x2aa>
1a003400:	428b      	cmp	r3, r1
1a003402:	d90e      	bls.n	1a003422 <__udivmoddi4+0x2aa>
1a003404:	3802      	subs	r0, #2
1a003406:	4429      	add	r1, r5
1a003408:	1ac9      	subs	r1, r1, r3
1a00340a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00340e:	e714      	b.n	1a00323a <__udivmoddi4+0xc2>
1a003410:	4541      	cmp	r1, r8
1a003412:	d2ab      	bcs.n	1a00336c <__udivmoddi4+0x1f4>
1a003414:	ebb8 0e02 	subs.w	lr, r8, r2
1a003418:	eb69 020c 	sbc.w	r2, r9, ip
1a00341c:	3801      	subs	r0, #1
1a00341e:	4613      	mov	r3, r2
1a003420:	e7a4      	b.n	1a00336c <__udivmoddi4+0x1f4>
1a003422:	4660      	mov	r0, ip
1a003424:	e7f0      	b.n	1a003408 <__udivmoddi4+0x290>
1a003426:	4618      	mov	r0, r3
1a003428:	e795      	b.n	1a003356 <__udivmoddi4+0x1de>
1a00342a:	4667      	mov	r7, ip
1a00342c:	e7d8      	b.n	1a0033e0 <__udivmoddi4+0x268>
1a00342e:	4681      	mov	r9, r0
1a003430:	e77b      	b.n	1a00332a <__udivmoddi4+0x1b2>
1a003432:	4638      	mov	r0, r7
1a003434:	e745      	b.n	1a0032c2 <__udivmoddi4+0x14a>
1a003436:	f1ac 0c02 	sub.w	ip, ip, #2
1a00343a:	442b      	add	r3, r5
1a00343c:	e710      	b.n	1a003260 <__udivmoddi4+0xe8>
1a00343e:	3802      	subs	r0, #2
1a003440:	442c      	add	r4, r5
1a003442:	e721      	b.n	1a003288 <__udivmoddi4+0x110>
1a003444:	4637      	mov	r7, r6
1a003446:	e6e8      	b.n	1a00321a <__udivmoddi4+0xa2>

1a003448 <__aeabi_idiv0>:
1a003448:	4770      	bx	lr
1a00344a:	bf00      	nop

1a00344c <__sflush_r>:
1a00344c:	898a      	ldrh	r2, [r1, #12]
1a00344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003452:	4605      	mov	r5, r0
1a003454:	0710      	lsls	r0, r2, #28
1a003456:	460c      	mov	r4, r1
1a003458:	d458      	bmi.n	1a00350c <__sflush_r+0xc0>
1a00345a:	684b      	ldr	r3, [r1, #4]
1a00345c:	2b00      	cmp	r3, #0
1a00345e:	dc05      	bgt.n	1a00346c <__sflush_r+0x20>
1a003460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003462:	2b00      	cmp	r3, #0
1a003464:	dc02      	bgt.n	1a00346c <__sflush_r+0x20>
1a003466:	2000      	movs	r0, #0
1a003468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00346c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00346e:	2e00      	cmp	r6, #0
1a003470:	d0f9      	beq.n	1a003466 <__sflush_r+0x1a>
1a003472:	2300      	movs	r3, #0
1a003474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003478:	682f      	ldr	r7, [r5, #0]
1a00347a:	602b      	str	r3, [r5, #0]
1a00347c:	d032      	beq.n	1a0034e4 <__sflush_r+0x98>
1a00347e:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003480:	89a3      	ldrh	r3, [r4, #12]
1a003482:	075a      	lsls	r2, r3, #29
1a003484:	d505      	bpl.n	1a003492 <__sflush_r+0x46>
1a003486:	6863      	ldr	r3, [r4, #4]
1a003488:	1ac0      	subs	r0, r0, r3
1a00348a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00348c:	b10b      	cbz	r3, 1a003492 <__sflush_r+0x46>
1a00348e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003490:	1ac0      	subs	r0, r0, r3
1a003492:	2300      	movs	r3, #0
1a003494:	4602      	mov	r2, r0
1a003496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003498:	6a21      	ldr	r1, [r4, #32]
1a00349a:	4628      	mov	r0, r5
1a00349c:	47b0      	blx	r6
1a00349e:	1c43      	adds	r3, r0, #1
1a0034a0:	89a3      	ldrh	r3, [r4, #12]
1a0034a2:	d106      	bne.n	1a0034b2 <__sflush_r+0x66>
1a0034a4:	6829      	ldr	r1, [r5, #0]
1a0034a6:	291d      	cmp	r1, #29
1a0034a8:	d849      	bhi.n	1a00353e <__sflush_r+0xf2>
1a0034aa:	4a2a      	ldr	r2, [pc, #168]	; (1a003554 <__sflush_r+0x108>)
1a0034ac:	40ca      	lsrs	r2, r1
1a0034ae:	07d6      	lsls	r6, r2, #31
1a0034b0:	d545      	bpl.n	1a00353e <__sflush_r+0xf2>
1a0034b2:	2200      	movs	r2, #0
1a0034b4:	6062      	str	r2, [r4, #4]
1a0034b6:	04d9      	lsls	r1, r3, #19
1a0034b8:	6922      	ldr	r2, [r4, #16]
1a0034ba:	6022      	str	r2, [r4, #0]
1a0034bc:	d504      	bpl.n	1a0034c8 <__sflush_r+0x7c>
1a0034be:	1c42      	adds	r2, r0, #1
1a0034c0:	d101      	bne.n	1a0034c6 <__sflush_r+0x7a>
1a0034c2:	682b      	ldr	r3, [r5, #0]
1a0034c4:	b903      	cbnz	r3, 1a0034c8 <__sflush_r+0x7c>
1a0034c6:	6560      	str	r0, [r4, #84]	; 0x54
1a0034c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0034ca:	602f      	str	r7, [r5, #0]
1a0034cc:	2900      	cmp	r1, #0
1a0034ce:	d0ca      	beq.n	1a003466 <__sflush_r+0x1a>
1a0034d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0034d4:	4299      	cmp	r1, r3
1a0034d6:	d002      	beq.n	1a0034de <__sflush_r+0x92>
1a0034d8:	4628      	mov	r0, r5
1a0034da:	f000 f99d 	bl	1a003818 <_free_r>
1a0034de:	2000      	movs	r0, #0
1a0034e0:	6360      	str	r0, [r4, #52]	; 0x34
1a0034e2:	e7c1      	b.n	1a003468 <__sflush_r+0x1c>
1a0034e4:	6a21      	ldr	r1, [r4, #32]
1a0034e6:	2301      	movs	r3, #1
1a0034e8:	4628      	mov	r0, r5
1a0034ea:	47b0      	blx	r6
1a0034ec:	1c41      	adds	r1, r0, #1
1a0034ee:	d1c7      	bne.n	1a003480 <__sflush_r+0x34>
1a0034f0:	682b      	ldr	r3, [r5, #0]
1a0034f2:	2b00      	cmp	r3, #0
1a0034f4:	d0c4      	beq.n	1a003480 <__sflush_r+0x34>
1a0034f6:	2b1d      	cmp	r3, #29
1a0034f8:	d001      	beq.n	1a0034fe <__sflush_r+0xb2>
1a0034fa:	2b16      	cmp	r3, #22
1a0034fc:	d101      	bne.n	1a003502 <__sflush_r+0xb6>
1a0034fe:	602f      	str	r7, [r5, #0]
1a003500:	e7b1      	b.n	1a003466 <__sflush_r+0x1a>
1a003502:	89a3      	ldrh	r3, [r4, #12]
1a003504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003508:	81a3      	strh	r3, [r4, #12]
1a00350a:	e7ad      	b.n	1a003468 <__sflush_r+0x1c>
1a00350c:	690f      	ldr	r7, [r1, #16]
1a00350e:	2f00      	cmp	r7, #0
1a003510:	d0a9      	beq.n	1a003466 <__sflush_r+0x1a>
1a003512:	0793      	lsls	r3, r2, #30
1a003514:	680e      	ldr	r6, [r1, #0]
1a003516:	bf08      	it	eq
1a003518:	694b      	ldreq	r3, [r1, #20]
1a00351a:	600f      	str	r7, [r1, #0]
1a00351c:	bf18      	it	ne
1a00351e:	2300      	movne	r3, #0
1a003520:	eba6 0807 	sub.w	r8, r6, r7
1a003524:	608b      	str	r3, [r1, #8]
1a003526:	f1b8 0f00 	cmp.w	r8, #0
1a00352a:	dd9c      	ble.n	1a003466 <__sflush_r+0x1a>
1a00352c:	4643      	mov	r3, r8
1a00352e:	463a      	mov	r2, r7
1a003530:	6a21      	ldr	r1, [r4, #32]
1a003532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003534:	4628      	mov	r0, r5
1a003536:	47b0      	blx	r6
1a003538:	2800      	cmp	r0, #0
1a00353a:	dc06      	bgt.n	1a00354a <__sflush_r+0xfe>
1a00353c:	89a3      	ldrh	r3, [r4, #12]
1a00353e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003542:	81a3      	strh	r3, [r4, #12]
1a003544:	f04f 30ff 	mov.w	r0, #4294967295
1a003548:	e78e      	b.n	1a003468 <__sflush_r+0x1c>
1a00354a:	4407      	add	r7, r0
1a00354c:	eba8 0800 	sub.w	r8, r8, r0
1a003550:	e7e9      	b.n	1a003526 <__sflush_r+0xda>
1a003552:	bf00      	nop
1a003554:	20400001 	.word	0x20400001

1a003558 <_fflush_r>:
1a003558:	b538      	push	{r3, r4, r5, lr}
1a00355a:	690b      	ldr	r3, [r1, #16]
1a00355c:	4605      	mov	r5, r0
1a00355e:	460c      	mov	r4, r1
1a003560:	b913      	cbnz	r3, 1a003568 <_fflush_r+0x10>
1a003562:	2500      	movs	r5, #0
1a003564:	4628      	mov	r0, r5
1a003566:	bd38      	pop	{r3, r4, r5, pc}
1a003568:	b118      	cbz	r0, 1a003572 <_fflush_r+0x1a>
1a00356a:	6983      	ldr	r3, [r0, #24]
1a00356c:	b90b      	cbnz	r3, 1a003572 <_fflush_r+0x1a>
1a00356e:	f000 f887 	bl	1a003680 <__sinit>
1a003572:	4b14      	ldr	r3, [pc, #80]	; (1a0035c4 <_fflush_r+0x6c>)
1a003574:	429c      	cmp	r4, r3
1a003576:	d11b      	bne.n	1a0035b0 <_fflush_r+0x58>
1a003578:	686c      	ldr	r4, [r5, #4]
1a00357a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00357e:	2b00      	cmp	r3, #0
1a003580:	d0ef      	beq.n	1a003562 <_fflush_r+0xa>
1a003582:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003584:	07d0      	lsls	r0, r2, #31
1a003586:	d404      	bmi.n	1a003592 <_fflush_r+0x3a>
1a003588:	0599      	lsls	r1, r3, #22
1a00358a:	d402      	bmi.n	1a003592 <_fflush_r+0x3a>
1a00358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00358e:	f000 f938 	bl	1a003802 <__retarget_lock_acquire_recursive>
1a003592:	4628      	mov	r0, r5
1a003594:	4621      	mov	r1, r4
1a003596:	f7ff ff59 	bl	1a00344c <__sflush_r>
1a00359a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00359c:	07da      	lsls	r2, r3, #31
1a00359e:	4605      	mov	r5, r0
1a0035a0:	d4e0      	bmi.n	1a003564 <_fflush_r+0xc>
1a0035a2:	89a3      	ldrh	r3, [r4, #12]
1a0035a4:	059b      	lsls	r3, r3, #22
1a0035a6:	d4dd      	bmi.n	1a003564 <_fflush_r+0xc>
1a0035a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0035aa:	f000 f92b 	bl	1a003804 <__retarget_lock_release_recursive>
1a0035ae:	e7d9      	b.n	1a003564 <_fflush_r+0xc>
1a0035b0:	4b05      	ldr	r3, [pc, #20]	; (1a0035c8 <_fflush_r+0x70>)
1a0035b2:	429c      	cmp	r4, r3
1a0035b4:	d101      	bne.n	1a0035ba <_fflush_r+0x62>
1a0035b6:	68ac      	ldr	r4, [r5, #8]
1a0035b8:	e7df      	b.n	1a00357a <_fflush_r+0x22>
1a0035ba:	4b04      	ldr	r3, [pc, #16]	; (1a0035cc <_fflush_r+0x74>)
1a0035bc:	429c      	cmp	r4, r3
1a0035be:	bf08      	it	eq
1a0035c0:	68ec      	ldreq	r4, [r5, #12]
1a0035c2:	e7da      	b.n	1a00357a <_fflush_r+0x22>
1a0035c4:	1a0046e8 	.word	0x1a0046e8
1a0035c8:	1a004708 	.word	0x1a004708
1a0035cc:	1a0046c8 	.word	0x1a0046c8

1a0035d0 <std>:
1a0035d0:	2300      	movs	r3, #0
1a0035d2:	b510      	push	{r4, lr}
1a0035d4:	4604      	mov	r4, r0
1a0035d6:	e9c0 3300 	strd	r3, r3, [r0]
1a0035da:	6083      	str	r3, [r0, #8]
1a0035dc:	8181      	strh	r1, [r0, #12]
1a0035de:	6643      	str	r3, [r0, #100]	; 0x64
1a0035e0:	81c2      	strh	r2, [r0, #14]
1a0035e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0035e6:	6183      	str	r3, [r0, #24]
1a0035e8:	4619      	mov	r1, r3
1a0035ea:	2208      	movs	r2, #8
1a0035ec:	305c      	adds	r0, #92	; 0x5c
1a0035ee:	f000 f90a 	bl	1a003806 <memset>
1a0035f2:	4b05      	ldr	r3, [pc, #20]	; (1a003608 <std+0x38>)
1a0035f4:	6263      	str	r3, [r4, #36]	; 0x24
1a0035f6:	4b05      	ldr	r3, [pc, #20]	; (1a00360c <std+0x3c>)
1a0035f8:	62a3      	str	r3, [r4, #40]	; 0x28
1a0035fa:	4b05      	ldr	r3, [pc, #20]	; (1a003610 <std+0x40>)
1a0035fc:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0035fe:	4b05      	ldr	r3, [pc, #20]	; (1a003614 <std+0x44>)
1a003600:	6224      	str	r4, [r4, #32]
1a003602:	6323      	str	r3, [r4, #48]	; 0x30
1a003604:	bd10      	pop	{r4, pc}
1a003606:	bf00      	nop
1a003608:	1a00403d 	.word	0x1a00403d
1a00360c:	1a00405f 	.word	0x1a00405f
1a003610:	1a004097 	.word	0x1a004097
1a003614:	1a0040bb 	.word	0x1a0040bb

1a003618 <_cleanup_r>:
1a003618:	4901      	ldr	r1, [pc, #4]	; (1a003620 <_cleanup_r+0x8>)
1a00361a:	f000 b8af 	b.w	1a00377c <_fwalk_reent>
1a00361e:	bf00      	nop
1a003620:	1a003559 	.word	0x1a003559

1a003624 <__sfmoreglue>:
1a003624:	b570      	push	{r4, r5, r6, lr}
1a003626:	1e4a      	subs	r2, r1, #1
1a003628:	2568      	movs	r5, #104	; 0x68
1a00362a:	4355      	muls	r5, r2
1a00362c:	460e      	mov	r6, r1
1a00362e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003632:	f000 f93f 	bl	1a0038b4 <_malloc_r>
1a003636:	4604      	mov	r4, r0
1a003638:	b140      	cbz	r0, 1a00364c <__sfmoreglue+0x28>
1a00363a:	2100      	movs	r1, #0
1a00363c:	e9c0 1600 	strd	r1, r6, [r0]
1a003640:	300c      	adds	r0, #12
1a003642:	60a0      	str	r0, [r4, #8]
1a003644:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003648:	f000 f8dd 	bl	1a003806 <memset>
1a00364c:	4620      	mov	r0, r4
1a00364e:	bd70      	pop	{r4, r5, r6, pc}

1a003650 <__sfp_lock_acquire>:
1a003650:	4801      	ldr	r0, [pc, #4]	; (1a003658 <__sfp_lock_acquire+0x8>)
1a003652:	f000 b8d6 	b.w	1a003802 <__retarget_lock_acquire_recursive>
1a003656:	bf00      	nop
1a003658:	10000308 	.word	0x10000308

1a00365c <__sfp_lock_release>:
1a00365c:	4801      	ldr	r0, [pc, #4]	; (1a003664 <__sfp_lock_release+0x8>)
1a00365e:	f000 b8d1 	b.w	1a003804 <__retarget_lock_release_recursive>
1a003662:	bf00      	nop
1a003664:	10000308 	.word	0x10000308

1a003668 <__sinit_lock_acquire>:
1a003668:	4801      	ldr	r0, [pc, #4]	; (1a003670 <__sinit_lock_acquire+0x8>)
1a00366a:	f000 b8ca 	b.w	1a003802 <__retarget_lock_acquire_recursive>
1a00366e:	bf00      	nop
1a003670:	10000303 	.word	0x10000303

1a003674 <__sinit_lock_release>:
1a003674:	4801      	ldr	r0, [pc, #4]	; (1a00367c <__sinit_lock_release+0x8>)
1a003676:	f000 b8c5 	b.w	1a003804 <__retarget_lock_release_recursive>
1a00367a:	bf00      	nop
1a00367c:	10000303 	.word	0x10000303

1a003680 <__sinit>:
1a003680:	b510      	push	{r4, lr}
1a003682:	4604      	mov	r4, r0
1a003684:	f7ff fff0 	bl	1a003668 <__sinit_lock_acquire>
1a003688:	69a3      	ldr	r3, [r4, #24]
1a00368a:	b11b      	cbz	r3, 1a003694 <__sinit+0x14>
1a00368c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003690:	f7ff bff0 	b.w	1a003674 <__sinit_lock_release>
1a003694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003698:	6523      	str	r3, [r4, #80]	; 0x50
1a00369a:	4b13      	ldr	r3, [pc, #76]	; (1a0036e8 <__sinit+0x68>)
1a00369c:	4a13      	ldr	r2, [pc, #76]	; (1a0036ec <__sinit+0x6c>)
1a00369e:	681b      	ldr	r3, [r3, #0]
1a0036a0:	62a2      	str	r2, [r4, #40]	; 0x28
1a0036a2:	42a3      	cmp	r3, r4
1a0036a4:	bf04      	itt	eq
1a0036a6:	2301      	moveq	r3, #1
1a0036a8:	61a3      	streq	r3, [r4, #24]
1a0036aa:	4620      	mov	r0, r4
1a0036ac:	f000 f820 	bl	1a0036f0 <__sfp>
1a0036b0:	6060      	str	r0, [r4, #4]
1a0036b2:	4620      	mov	r0, r4
1a0036b4:	f000 f81c 	bl	1a0036f0 <__sfp>
1a0036b8:	60a0      	str	r0, [r4, #8]
1a0036ba:	4620      	mov	r0, r4
1a0036bc:	f000 f818 	bl	1a0036f0 <__sfp>
1a0036c0:	2200      	movs	r2, #0
1a0036c2:	60e0      	str	r0, [r4, #12]
1a0036c4:	2104      	movs	r1, #4
1a0036c6:	6860      	ldr	r0, [r4, #4]
1a0036c8:	f7ff ff82 	bl	1a0035d0 <std>
1a0036cc:	2201      	movs	r2, #1
1a0036ce:	2109      	movs	r1, #9
1a0036d0:	68a0      	ldr	r0, [r4, #8]
1a0036d2:	f7ff ff7d 	bl	1a0035d0 <std>
1a0036d6:	2202      	movs	r2, #2
1a0036d8:	2112      	movs	r1, #18
1a0036da:	68e0      	ldr	r0, [r4, #12]
1a0036dc:	f7ff ff78 	bl	1a0035d0 <std>
1a0036e0:	2301      	movs	r3, #1
1a0036e2:	61a3      	str	r3, [r4, #24]
1a0036e4:	e7d2      	b.n	1a00368c <__sinit+0xc>
1a0036e6:	bf00      	nop
1a0036e8:	1a004728 	.word	0x1a004728
1a0036ec:	1a003619 	.word	0x1a003619

1a0036f0 <__sfp>:
1a0036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0036f2:	4607      	mov	r7, r0
1a0036f4:	f7ff ffac 	bl	1a003650 <__sfp_lock_acquire>
1a0036f8:	4b1e      	ldr	r3, [pc, #120]	; (1a003774 <__sfp+0x84>)
1a0036fa:	681e      	ldr	r6, [r3, #0]
1a0036fc:	69b3      	ldr	r3, [r6, #24]
1a0036fe:	b913      	cbnz	r3, 1a003706 <__sfp+0x16>
1a003700:	4630      	mov	r0, r6
1a003702:	f7ff ffbd 	bl	1a003680 <__sinit>
1a003706:	3648      	adds	r6, #72	; 0x48
1a003708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a00370c:	3b01      	subs	r3, #1
1a00370e:	d503      	bpl.n	1a003718 <__sfp+0x28>
1a003710:	6833      	ldr	r3, [r6, #0]
1a003712:	b30b      	cbz	r3, 1a003758 <__sfp+0x68>
1a003714:	6836      	ldr	r6, [r6, #0]
1a003716:	e7f7      	b.n	1a003708 <__sfp+0x18>
1a003718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a00371c:	b9d5      	cbnz	r5, 1a003754 <__sfp+0x64>
1a00371e:	4b16      	ldr	r3, [pc, #88]	; (1a003778 <__sfp+0x88>)
1a003720:	60e3      	str	r3, [r4, #12]
1a003722:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003726:	6665      	str	r5, [r4, #100]	; 0x64
1a003728:	f000 f86a 	bl	1a003800 <__retarget_lock_init_recursive>
1a00372c:	f7ff ff96 	bl	1a00365c <__sfp_lock_release>
1a003730:	6025      	str	r5, [r4, #0]
1a003732:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a003736:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a00373a:	61a5      	str	r5, [r4, #24]
1a00373c:	2208      	movs	r2, #8
1a00373e:	4629      	mov	r1, r5
1a003740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003744:	f000 f85f 	bl	1a003806 <memset>
1a003748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a00374c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003750:	4620      	mov	r0, r4
1a003752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003754:	3468      	adds	r4, #104	; 0x68
1a003756:	e7d9      	b.n	1a00370c <__sfp+0x1c>
1a003758:	2104      	movs	r1, #4
1a00375a:	4638      	mov	r0, r7
1a00375c:	f7ff ff62 	bl	1a003624 <__sfmoreglue>
1a003760:	4604      	mov	r4, r0
1a003762:	6030      	str	r0, [r6, #0]
1a003764:	2800      	cmp	r0, #0
1a003766:	d1d5      	bne.n	1a003714 <__sfp+0x24>
1a003768:	f7ff ff78 	bl	1a00365c <__sfp_lock_release>
1a00376c:	230c      	movs	r3, #12
1a00376e:	603b      	str	r3, [r7, #0]
1a003770:	e7ee      	b.n	1a003750 <__sfp+0x60>
1a003772:	bf00      	nop
1a003774:	1a004728 	.word	0x1a004728
1a003778:	ffff0001 	.word	0xffff0001

1a00377c <_fwalk_reent>:
1a00377c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003780:	4680      	mov	r8, r0
1a003782:	4689      	mov	r9, r1
1a003784:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003788:	2600      	movs	r6, #0
1a00378a:	b914      	cbnz	r4, 1a003792 <_fwalk_reent+0x16>
1a00378c:	4630      	mov	r0, r6
1a00378e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003792:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003796:	3f01      	subs	r7, #1
1a003798:	d501      	bpl.n	1a00379e <_fwalk_reent+0x22>
1a00379a:	6824      	ldr	r4, [r4, #0]
1a00379c:	e7f5      	b.n	1a00378a <_fwalk_reent+0xe>
1a00379e:	89ab      	ldrh	r3, [r5, #12]
1a0037a0:	2b01      	cmp	r3, #1
1a0037a2:	d907      	bls.n	1a0037b4 <_fwalk_reent+0x38>
1a0037a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0037a8:	3301      	adds	r3, #1
1a0037aa:	d003      	beq.n	1a0037b4 <_fwalk_reent+0x38>
1a0037ac:	4629      	mov	r1, r5
1a0037ae:	4640      	mov	r0, r8
1a0037b0:	47c8      	blx	r9
1a0037b2:	4306      	orrs	r6, r0
1a0037b4:	3568      	adds	r5, #104	; 0x68
1a0037b6:	e7ee      	b.n	1a003796 <_fwalk_reent+0x1a>

1a0037b8 <__libc_init_array>:
1a0037b8:	b570      	push	{r4, r5, r6, lr}
1a0037ba:	4d0d      	ldr	r5, [pc, #52]	; (1a0037f0 <__libc_init_array+0x38>)
1a0037bc:	4c0d      	ldr	r4, [pc, #52]	; (1a0037f4 <__libc_init_array+0x3c>)
1a0037be:	1b64      	subs	r4, r4, r5
1a0037c0:	10a4      	asrs	r4, r4, #2
1a0037c2:	2600      	movs	r6, #0
1a0037c4:	42a6      	cmp	r6, r4
1a0037c6:	d109      	bne.n	1a0037dc <__libc_init_array+0x24>
1a0037c8:	4d0b      	ldr	r5, [pc, #44]	; (1a0037f8 <__libc_init_array+0x40>)
1a0037ca:	4c0c      	ldr	r4, [pc, #48]	; (1a0037fc <__libc_init_array+0x44>)
1a0037cc:	f7fd fd97 	bl	1a0012fe <_init>
1a0037d0:	1b64      	subs	r4, r4, r5
1a0037d2:	10a4      	asrs	r4, r4, #2
1a0037d4:	2600      	movs	r6, #0
1a0037d6:	42a6      	cmp	r6, r4
1a0037d8:	d105      	bne.n	1a0037e6 <__libc_init_array+0x2e>
1a0037da:	bd70      	pop	{r4, r5, r6, pc}
1a0037dc:	f855 3b04 	ldr.w	r3, [r5], #4
1a0037e0:	4798      	blx	r3
1a0037e2:	3601      	adds	r6, #1
1a0037e4:	e7ee      	b.n	1a0037c4 <__libc_init_array+0xc>
1a0037e6:	f855 3b04 	ldr.w	r3, [r5], #4
1a0037ea:	4798      	blx	r3
1a0037ec:	3601      	adds	r6, #1
1a0037ee:	e7f2      	b.n	1a0037d6 <__libc_init_array+0x1e>
1a0037f0:	1a004760 	.word	0x1a004760
1a0037f4:	1a004760 	.word	0x1a004760
1a0037f8:	1a004760 	.word	0x1a004760
1a0037fc:	1a004764 	.word	0x1a004764

1a003800 <__retarget_lock_init_recursive>:
1a003800:	4770      	bx	lr

1a003802 <__retarget_lock_acquire_recursive>:
1a003802:	4770      	bx	lr

1a003804 <__retarget_lock_release_recursive>:
1a003804:	4770      	bx	lr

1a003806 <memset>:
1a003806:	4402      	add	r2, r0
1a003808:	4603      	mov	r3, r0
1a00380a:	4293      	cmp	r3, r2
1a00380c:	d100      	bne.n	1a003810 <memset+0xa>
1a00380e:	4770      	bx	lr
1a003810:	f803 1b01 	strb.w	r1, [r3], #1
1a003814:	e7f9      	b.n	1a00380a <memset+0x4>
1a003816:	Address 0x1a003816 is out of bounds.


1a003818 <_free_r>:
1a003818:	b538      	push	{r3, r4, r5, lr}
1a00381a:	4605      	mov	r5, r0
1a00381c:	2900      	cmp	r1, #0
1a00381e:	d045      	beq.n	1a0038ac <_free_r+0x94>
1a003820:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003824:	1f0c      	subs	r4, r1, #4
1a003826:	2b00      	cmp	r3, #0
1a003828:	bfb8      	it	lt
1a00382a:	18e4      	addlt	r4, r4, r3
1a00382c:	f000 fdc0 	bl	1a0043b0 <__malloc_lock>
1a003830:	4a1f      	ldr	r2, [pc, #124]	; (1a0038b0 <_free_r+0x98>)
1a003832:	6813      	ldr	r3, [r2, #0]
1a003834:	4610      	mov	r0, r2
1a003836:	b933      	cbnz	r3, 1a003846 <_free_r+0x2e>
1a003838:	6063      	str	r3, [r4, #4]
1a00383a:	6014      	str	r4, [r2, #0]
1a00383c:	4628      	mov	r0, r5
1a00383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003842:	f000 bdbb 	b.w	1a0043bc <__malloc_unlock>
1a003846:	42a3      	cmp	r3, r4
1a003848:	d90c      	bls.n	1a003864 <_free_r+0x4c>
1a00384a:	6821      	ldr	r1, [r4, #0]
1a00384c:	1862      	adds	r2, r4, r1
1a00384e:	4293      	cmp	r3, r2
1a003850:	bf04      	itt	eq
1a003852:	681a      	ldreq	r2, [r3, #0]
1a003854:	685b      	ldreq	r3, [r3, #4]
1a003856:	6063      	str	r3, [r4, #4]
1a003858:	bf04      	itt	eq
1a00385a:	1852      	addeq	r2, r2, r1
1a00385c:	6022      	streq	r2, [r4, #0]
1a00385e:	6004      	str	r4, [r0, #0]
1a003860:	e7ec      	b.n	1a00383c <_free_r+0x24>
1a003862:	4613      	mov	r3, r2
1a003864:	685a      	ldr	r2, [r3, #4]
1a003866:	b10a      	cbz	r2, 1a00386c <_free_r+0x54>
1a003868:	42a2      	cmp	r2, r4
1a00386a:	d9fa      	bls.n	1a003862 <_free_r+0x4a>
1a00386c:	6819      	ldr	r1, [r3, #0]
1a00386e:	1858      	adds	r0, r3, r1
1a003870:	42a0      	cmp	r0, r4
1a003872:	d10b      	bne.n	1a00388c <_free_r+0x74>
1a003874:	6820      	ldr	r0, [r4, #0]
1a003876:	4401      	add	r1, r0
1a003878:	1858      	adds	r0, r3, r1
1a00387a:	4282      	cmp	r2, r0
1a00387c:	6019      	str	r1, [r3, #0]
1a00387e:	d1dd      	bne.n	1a00383c <_free_r+0x24>
1a003880:	6810      	ldr	r0, [r2, #0]
1a003882:	6852      	ldr	r2, [r2, #4]
1a003884:	605a      	str	r2, [r3, #4]
1a003886:	4401      	add	r1, r0
1a003888:	6019      	str	r1, [r3, #0]
1a00388a:	e7d7      	b.n	1a00383c <_free_r+0x24>
1a00388c:	d902      	bls.n	1a003894 <_free_r+0x7c>
1a00388e:	230c      	movs	r3, #12
1a003890:	602b      	str	r3, [r5, #0]
1a003892:	e7d3      	b.n	1a00383c <_free_r+0x24>
1a003894:	6820      	ldr	r0, [r4, #0]
1a003896:	1821      	adds	r1, r4, r0
1a003898:	428a      	cmp	r2, r1
1a00389a:	bf04      	itt	eq
1a00389c:	6811      	ldreq	r1, [r2, #0]
1a00389e:	6852      	ldreq	r2, [r2, #4]
1a0038a0:	6062      	str	r2, [r4, #4]
1a0038a2:	bf04      	itt	eq
1a0038a4:	1809      	addeq	r1, r1, r0
1a0038a6:	6021      	streq	r1, [r4, #0]
1a0038a8:	605c      	str	r4, [r3, #4]
1a0038aa:	e7c7      	b.n	1a00383c <_free_r+0x24>
1a0038ac:	bd38      	pop	{r3, r4, r5, pc}
1a0038ae:	bf00      	nop
1a0038b0:	10000254 	.word	0x10000254

1a0038b4 <_malloc_r>:
1a0038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0038b6:	1ccd      	adds	r5, r1, #3
1a0038b8:	f025 0503 	bic.w	r5, r5, #3
1a0038bc:	3508      	adds	r5, #8
1a0038be:	2d0c      	cmp	r5, #12
1a0038c0:	bf38      	it	cc
1a0038c2:	250c      	movcc	r5, #12
1a0038c4:	2d00      	cmp	r5, #0
1a0038c6:	4606      	mov	r6, r0
1a0038c8:	db01      	blt.n	1a0038ce <_malloc_r+0x1a>
1a0038ca:	42a9      	cmp	r1, r5
1a0038cc:	d903      	bls.n	1a0038d6 <_malloc_r+0x22>
1a0038ce:	230c      	movs	r3, #12
1a0038d0:	6033      	str	r3, [r6, #0]
1a0038d2:	2000      	movs	r0, #0
1a0038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0038d6:	f000 fd6b 	bl	1a0043b0 <__malloc_lock>
1a0038da:	4921      	ldr	r1, [pc, #132]	; (1a003960 <_malloc_r+0xac>)
1a0038dc:	680a      	ldr	r2, [r1, #0]
1a0038de:	4614      	mov	r4, r2
1a0038e0:	b99c      	cbnz	r4, 1a00390a <_malloc_r+0x56>
1a0038e2:	4f20      	ldr	r7, [pc, #128]	; (1a003964 <_malloc_r+0xb0>)
1a0038e4:	683b      	ldr	r3, [r7, #0]
1a0038e6:	b923      	cbnz	r3, 1a0038f2 <_malloc_r+0x3e>
1a0038e8:	4621      	mov	r1, r4
1a0038ea:	4630      	mov	r0, r6
1a0038ec:	f7fd fd5c 	bl	1a0013a8 <_sbrk_r>
1a0038f0:	6038      	str	r0, [r7, #0]
1a0038f2:	4629      	mov	r1, r5
1a0038f4:	4630      	mov	r0, r6
1a0038f6:	f7fd fd57 	bl	1a0013a8 <_sbrk_r>
1a0038fa:	1c43      	adds	r3, r0, #1
1a0038fc:	d123      	bne.n	1a003946 <_malloc_r+0x92>
1a0038fe:	230c      	movs	r3, #12
1a003900:	6033      	str	r3, [r6, #0]
1a003902:	4630      	mov	r0, r6
1a003904:	f000 fd5a 	bl	1a0043bc <__malloc_unlock>
1a003908:	e7e3      	b.n	1a0038d2 <_malloc_r+0x1e>
1a00390a:	6823      	ldr	r3, [r4, #0]
1a00390c:	1b5b      	subs	r3, r3, r5
1a00390e:	d417      	bmi.n	1a003940 <_malloc_r+0x8c>
1a003910:	2b0b      	cmp	r3, #11
1a003912:	d903      	bls.n	1a00391c <_malloc_r+0x68>
1a003914:	6023      	str	r3, [r4, #0]
1a003916:	441c      	add	r4, r3
1a003918:	6025      	str	r5, [r4, #0]
1a00391a:	e004      	b.n	1a003926 <_malloc_r+0x72>
1a00391c:	6863      	ldr	r3, [r4, #4]
1a00391e:	42a2      	cmp	r2, r4
1a003920:	bf0c      	ite	eq
1a003922:	600b      	streq	r3, [r1, #0]
1a003924:	6053      	strne	r3, [r2, #4]
1a003926:	4630      	mov	r0, r6
1a003928:	f000 fd48 	bl	1a0043bc <__malloc_unlock>
1a00392c:	f104 000b 	add.w	r0, r4, #11
1a003930:	1d23      	adds	r3, r4, #4
1a003932:	f020 0007 	bic.w	r0, r0, #7
1a003936:	1ac2      	subs	r2, r0, r3
1a003938:	d0cc      	beq.n	1a0038d4 <_malloc_r+0x20>
1a00393a:	1a1b      	subs	r3, r3, r0
1a00393c:	50a3      	str	r3, [r4, r2]
1a00393e:	e7c9      	b.n	1a0038d4 <_malloc_r+0x20>
1a003940:	4622      	mov	r2, r4
1a003942:	6864      	ldr	r4, [r4, #4]
1a003944:	e7cc      	b.n	1a0038e0 <_malloc_r+0x2c>
1a003946:	1cc4      	adds	r4, r0, #3
1a003948:	f024 0403 	bic.w	r4, r4, #3
1a00394c:	42a0      	cmp	r0, r4
1a00394e:	d0e3      	beq.n	1a003918 <_malloc_r+0x64>
1a003950:	1a21      	subs	r1, r4, r0
1a003952:	4630      	mov	r0, r6
1a003954:	f7fd fd28 	bl	1a0013a8 <_sbrk_r>
1a003958:	3001      	adds	r0, #1
1a00395a:	d1dd      	bne.n	1a003918 <_malloc_r+0x64>
1a00395c:	e7cf      	b.n	1a0038fe <_malloc_r+0x4a>
1a00395e:	bf00      	nop
1a003960:	10000254 	.word	0x10000254
1a003964:	10000258 	.word	0x10000258

1a003968 <__sfputc_r>:
1a003968:	6893      	ldr	r3, [r2, #8]
1a00396a:	3b01      	subs	r3, #1
1a00396c:	2b00      	cmp	r3, #0
1a00396e:	b410      	push	{r4}
1a003970:	6093      	str	r3, [r2, #8]
1a003972:	da08      	bge.n	1a003986 <__sfputc_r+0x1e>
1a003974:	6994      	ldr	r4, [r2, #24]
1a003976:	42a3      	cmp	r3, r4
1a003978:	db01      	blt.n	1a00397e <__sfputc_r+0x16>
1a00397a:	290a      	cmp	r1, #10
1a00397c:	d103      	bne.n	1a003986 <__sfputc_r+0x1e>
1a00397e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003982:	f000 bb9f 	b.w	1a0040c4 <__swbuf_r>
1a003986:	6813      	ldr	r3, [r2, #0]
1a003988:	1c58      	adds	r0, r3, #1
1a00398a:	6010      	str	r0, [r2, #0]
1a00398c:	7019      	strb	r1, [r3, #0]
1a00398e:	4608      	mov	r0, r1
1a003990:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003994:	4770      	bx	lr

1a003996 <__sfputs_r>:
1a003996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003998:	4606      	mov	r6, r0
1a00399a:	460f      	mov	r7, r1
1a00399c:	4614      	mov	r4, r2
1a00399e:	18d5      	adds	r5, r2, r3
1a0039a0:	42ac      	cmp	r4, r5
1a0039a2:	d101      	bne.n	1a0039a8 <__sfputs_r+0x12>
1a0039a4:	2000      	movs	r0, #0
1a0039a6:	e007      	b.n	1a0039b8 <__sfputs_r+0x22>
1a0039a8:	463a      	mov	r2, r7
1a0039aa:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0039ae:	4630      	mov	r0, r6
1a0039b0:	f7ff ffda 	bl	1a003968 <__sfputc_r>
1a0039b4:	1c43      	adds	r3, r0, #1
1a0039b6:	d1f3      	bne.n	1a0039a0 <__sfputs_r+0xa>
1a0039b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0039ba:	Address 0x1a0039ba is out of bounds.


1a0039bc <_vfiprintf_r>:
1a0039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0039c0:	460d      	mov	r5, r1
1a0039c2:	b09d      	sub	sp, #116	; 0x74
1a0039c4:	4614      	mov	r4, r2
1a0039c6:	461e      	mov	r6, r3
1a0039c8:	4607      	mov	r7, r0
1a0039ca:	b118      	cbz	r0, 1a0039d4 <_vfiprintf_r+0x18>
1a0039cc:	6983      	ldr	r3, [r0, #24]
1a0039ce:	b90b      	cbnz	r3, 1a0039d4 <_vfiprintf_r+0x18>
1a0039d0:	f7ff fe56 	bl	1a003680 <__sinit>
1a0039d4:	4b85      	ldr	r3, [pc, #532]	; (1a003bec <_vfiprintf_r+0x230>)
1a0039d6:	429d      	cmp	r5, r3
1a0039d8:	d11b      	bne.n	1a003a12 <_vfiprintf_r+0x56>
1a0039da:	687d      	ldr	r5, [r7, #4]
1a0039dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0039de:	07d9      	lsls	r1, r3, #31
1a0039e0:	d405      	bmi.n	1a0039ee <_vfiprintf_r+0x32>
1a0039e2:	89ab      	ldrh	r3, [r5, #12]
1a0039e4:	059a      	lsls	r2, r3, #22
1a0039e6:	d402      	bmi.n	1a0039ee <_vfiprintf_r+0x32>
1a0039e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0039ea:	f7ff ff0a 	bl	1a003802 <__retarget_lock_acquire_recursive>
1a0039ee:	89ab      	ldrh	r3, [r5, #12]
1a0039f0:	071b      	lsls	r3, r3, #28
1a0039f2:	d501      	bpl.n	1a0039f8 <_vfiprintf_r+0x3c>
1a0039f4:	692b      	ldr	r3, [r5, #16]
1a0039f6:	b9eb      	cbnz	r3, 1a003a34 <_vfiprintf_r+0x78>
1a0039f8:	4629      	mov	r1, r5
1a0039fa:	4638      	mov	r0, r7
1a0039fc:	f000 fbb4 	bl	1a004168 <__swsetup_r>
1a003a00:	b1c0      	cbz	r0, 1a003a34 <_vfiprintf_r+0x78>
1a003a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003a04:	07d8      	lsls	r0, r3, #31
1a003a06:	d50e      	bpl.n	1a003a26 <_vfiprintf_r+0x6a>
1a003a08:	f04f 30ff 	mov.w	r0, #4294967295
1a003a0c:	b01d      	add	sp, #116	; 0x74
1a003a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003a12:	4b77      	ldr	r3, [pc, #476]	; (1a003bf0 <_vfiprintf_r+0x234>)
1a003a14:	429d      	cmp	r5, r3
1a003a16:	d101      	bne.n	1a003a1c <_vfiprintf_r+0x60>
1a003a18:	68bd      	ldr	r5, [r7, #8]
1a003a1a:	e7df      	b.n	1a0039dc <_vfiprintf_r+0x20>
1a003a1c:	4b75      	ldr	r3, [pc, #468]	; (1a003bf4 <_vfiprintf_r+0x238>)
1a003a1e:	429d      	cmp	r5, r3
1a003a20:	bf08      	it	eq
1a003a22:	68fd      	ldreq	r5, [r7, #12]
1a003a24:	e7da      	b.n	1a0039dc <_vfiprintf_r+0x20>
1a003a26:	89ab      	ldrh	r3, [r5, #12]
1a003a28:	0599      	lsls	r1, r3, #22
1a003a2a:	d4ed      	bmi.n	1a003a08 <_vfiprintf_r+0x4c>
1a003a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003a2e:	f7ff fee9 	bl	1a003804 <__retarget_lock_release_recursive>
1a003a32:	e7e9      	b.n	1a003a08 <_vfiprintf_r+0x4c>
1a003a34:	2300      	movs	r3, #0
1a003a36:	9309      	str	r3, [sp, #36]	; 0x24
1a003a38:	2320      	movs	r3, #32
1a003a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003a3e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a003bf8 <_vfiprintf_r+0x23c>
1a003a42:	9603      	str	r6, [sp, #12]
1a003a44:	2330      	movs	r3, #48	; 0x30
1a003a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003a4a:	f04f 0a01 	mov.w	sl, #1
1a003a4e:	4623      	mov	r3, r4
1a003a50:	461e      	mov	r6, r3
1a003a52:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003a56:	b10a      	cbz	r2, 1a003a5c <_vfiprintf_r+0xa0>
1a003a58:	2a25      	cmp	r2, #37	; 0x25
1a003a5a:	d1f9      	bne.n	1a003a50 <_vfiprintf_r+0x94>
1a003a5c:	ebb6 0b04 	subs.w	fp, r6, r4
1a003a60:	d00b      	beq.n	1a003a7a <_vfiprintf_r+0xbe>
1a003a62:	465b      	mov	r3, fp
1a003a64:	4622      	mov	r2, r4
1a003a66:	4629      	mov	r1, r5
1a003a68:	4638      	mov	r0, r7
1a003a6a:	f7ff ff94 	bl	1a003996 <__sfputs_r>
1a003a6e:	3001      	adds	r0, #1
1a003a70:	f000 80a3 	beq.w	1a003bba <_vfiprintf_r+0x1fe>
1a003a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a76:	445b      	add	r3, fp
1a003a78:	9309      	str	r3, [sp, #36]	; 0x24
1a003a7a:	7833      	ldrb	r3, [r6, #0]
1a003a7c:	2b00      	cmp	r3, #0
1a003a7e:	f000 809c 	beq.w	1a003bba <_vfiprintf_r+0x1fe>
1a003a82:	2300      	movs	r3, #0
1a003a84:	f04f 32ff 	mov.w	r2, #4294967295
1a003a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003a8c:	3601      	adds	r6, #1
1a003a8e:	9304      	str	r3, [sp, #16]
1a003a90:	9307      	str	r3, [sp, #28]
1a003a92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003a96:	931a      	str	r3, [sp, #104]	; 0x68
1a003a98:	4634      	mov	r4, r6
1a003a9a:	2205      	movs	r2, #5
1a003a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003aa0:	4855      	ldr	r0, [pc, #340]	; (1a003bf8 <_vfiprintf_r+0x23c>)
1a003aa2:	f000 fc35 	bl	1a004310 <memchr>
1a003aa6:	9b04      	ldr	r3, [sp, #16]
1a003aa8:	b9c0      	cbnz	r0, 1a003adc <_vfiprintf_r+0x120>
1a003aaa:	06da      	lsls	r2, r3, #27
1a003aac:	bf44      	itt	mi
1a003aae:	2220      	movmi	r2, #32
1a003ab0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003ab4:	0718      	lsls	r0, r3, #28
1a003ab6:	bf44      	itt	mi
1a003ab8:	222b      	movmi	r2, #43	; 0x2b
1a003aba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003abe:	7832      	ldrb	r2, [r6, #0]
1a003ac0:	2a2a      	cmp	r2, #42	; 0x2a
1a003ac2:	d013      	beq.n	1a003aec <_vfiprintf_r+0x130>
1a003ac4:	9a07      	ldr	r2, [sp, #28]
1a003ac6:	4634      	mov	r4, r6
1a003ac8:	2000      	movs	r0, #0
1a003aca:	260a      	movs	r6, #10
1a003acc:	4621      	mov	r1, r4
1a003ace:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003ad2:	3b30      	subs	r3, #48	; 0x30
1a003ad4:	2b09      	cmp	r3, #9
1a003ad6:	d94b      	bls.n	1a003b70 <_vfiprintf_r+0x1b4>
1a003ad8:	b970      	cbnz	r0, 1a003af8 <_vfiprintf_r+0x13c>
1a003ada:	e014      	b.n	1a003b06 <_vfiprintf_r+0x14a>
1a003adc:	eba0 0009 	sub.w	r0, r0, r9
1a003ae0:	fa0a f000 	lsl.w	r0, sl, r0
1a003ae4:	4318      	orrs	r0, r3
1a003ae6:	9004      	str	r0, [sp, #16]
1a003ae8:	4626      	mov	r6, r4
1a003aea:	e7d5      	b.n	1a003a98 <_vfiprintf_r+0xdc>
1a003aec:	9a03      	ldr	r2, [sp, #12]
1a003aee:	1d11      	adds	r1, r2, #4
1a003af0:	6812      	ldr	r2, [r2, #0]
1a003af2:	9103      	str	r1, [sp, #12]
1a003af4:	2a00      	cmp	r2, #0
1a003af6:	db01      	blt.n	1a003afc <_vfiprintf_r+0x140>
1a003af8:	9207      	str	r2, [sp, #28]
1a003afa:	e004      	b.n	1a003b06 <_vfiprintf_r+0x14a>
1a003afc:	4252      	negs	r2, r2
1a003afe:	f043 0302 	orr.w	r3, r3, #2
1a003b02:	9207      	str	r2, [sp, #28]
1a003b04:	9304      	str	r3, [sp, #16]
1a003b06:	7823      	ldrb	r3, [r4, #0]
1a003b08:	2b2e      	cmp	r3, #46	; 0x2e
1a003b0a:	d10c      	bne.n	1a003b26 <_vfiprintf_r+0x16a>
1a003b0c:	7863      	ldrb	r3, [r4, #1]
1a003b0e:	2b2a      	cmp	r3, #42	; 0x2a
1a003b10:	d133      	bne.n	1a003b7a <_vfiprintf_r+0x1be>
1a003b12:	9b03      	ldr	r3, [sp, #12]
1a003b14:	1d1a      	adds	r2, r3, #4
1a003b16:	681b      	ldr	r3, [r3, #0]
1a003b18:	9203      	str	r2, [sp, #12]
1a003b1a:	2b00      	cmp	r3, #0
1a003b1c:	bfb8      	it	lt
1a003b1e:	f04f 33ff 	movlt.w	r3, #4294967295
1a003b22:	3402      	adds	r4, #2
1a003b24:	9305      	str	r3, [sp, #20]
1a003b26:	4e35      	ldr	r6, [pc, #212]	; (1a003bfc <_vfiprintf_r+0x240>)
1a003b28:	7821      	ldrb	r1, [r4, #0]
1a003b2a:	2203      	movs	r2, #3
1a003b2c:	4630      	mov	r0, r6
1a003b2e:	f000 fbef 	bl	1a004310 <memchr>
1a003b32:	b138      	cbz	r0, 1a003b44 <_vfiprintf_r+0x188>
1a003b34:	2340      	movs	r3, #64	; 0x40
1a003b36:	1b80      	subs	r0, r0, r6
1a003b38:	fa03 f000 	lsl.w	r0, r3, r0
1a003b3c:	9b04      	ldr	r3, [sp, #16]
1a003b3e:	4303      	orrs	r3, r0
1a003b40:	3401      	adds	r4, #1
1a003b42:	9304      	str	r3, [sp, #16]
1a003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003b48:	482d      	ldr	r0, [pc, #180]	; (1a003c00 <_vfiprintf_r+0x244>)
1a003b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003b4e:	2206      	movs	r2, #6
1a003b50:	f000 fbde 	bl	1a004310 <memchr>
1a003b54:	2800      	cmp	r0, #0
1a003b56:	d03f      	beq.n	1a003bd8 <_vfiprintf_r+0x21c>
1a003b58:	4b2a      	ldr	r3, [pc, #168]	; (1a003c04 <_vfiprintf_r+0x248>)
1a003b5a:	bb13      	cbnz	r3, 1a003ba2 <_vfiprintf_r+0x1e6>
1a003b5c:	9b03      	ldr	r3, [sp, #12]
1a003b5e:	3307      	adds	r3, #7
1a003b60:	f023 0307 	bic.w	r3, r3, #7
1a003b64:	3308      	adds	r3, #8
1a003b66:	9303      	str	r3, [sp, #12]
1a003b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003b6a:	4443      	add	r3, r8
1a003b6c:	9309      	str	r3, [sp, #36]	; 0x24
1a003b6e:	e76e      	b.n	1a003a4e <_vfiprintf_r+0x92>
1a003b70:	fb06 3202 	mla	r2, r6, r2, r3
1a003b74:	2001      	movs	r0, #1
1a003b76:	460c      	mov	r4, r1
1a003b78:	e7a8      	b.n	1a003acc <_vfiprintf_r+0x110>
1a003b7a:	2300      	movs	r3, #0
1a003b7c:	3401      	adds	r4, #1
1a003b7e:	9305      	str	r3, [sp, #20]
1a003b80:	4619      	mov	r1, r3
1a003b82:	260a      	movs	r6, #10
1a003b84:	4620      	mov	r0, r4
1a003b86:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003b8a:	3a30      	subs	r2, #48	; 0x30
1a003b8c:	2a09      	cmp	r2, #9
1a003b8e:	d903      	bls.n	1a003b98 <_vfiprintf_r+0x1dc>
1a003b90:	2b00      	cmp	r3, #0
1a003b92:	d0c8      	beq.n	1a003b26 <_vfiprintf_r+0x16a>
1a003b94:	9105      	str	r1, [sp, #20]
1a003b96:	e7c6      	b.n	1a003b26 <_vfiprintf_r+0x16a>
1a003b98:	fb06 2101 	mla	r1, r6, r1, r2
1a003b9c:	2301      	movs	r3, #1
1a003b9e:	4604      	mov	r4, r0
1a003ba0:	e7f0      	b.n	1a003b84 <_vfiprintf_r+0x1c8>
1a003ba2:	ab03      	add	r3, sp, #12
1a003ba4:	9300      	str	r3, [sp, #0]
1a003ba6:	462a      	mov	r2, r5
1a003ba8:	4b17      	ldr	r3, [pc, #92]	; (1a003c08 <_vfiprintf_r+0x24c>)
1a003baa:	a904      	add	r1, sp, #16
1a003bac:	4638      	mov	r0, r7
1a003bae:	f3af 8000 	nop.w
1a003bb2:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003bb6:	4680      	mov	r8, r0
1a003bb8:	d1d6      	bne.n	1a003b68 <_vfiprintf_r+0x1ac>
1a003bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003bbc:	07d9      	lsls	r1, r3, #31
1a003bbe:	d405      	bmi.n	1a003bcc <_vfiprintf_r+0x210>
1a003bc0:	89ab      	ldrh	r3, [r5, #12]
1a003bc2:	059a      	lsls	r2, r3, #22
1a003bc4:	d402      	bmi.n	1a003bcc <_vfiprintf_r+0x210>
1a003bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003bc8:	f7ff fe1c 	bl	1a003804 <__retarget_lock_release_recursive>
1a003bcc:	89ab      	ldrh	r3, [r5, #12]
1a003bce:	065b      	lsls	r3, r3, #25
1a003bd0:	f53f af1a 	bmi.w	1a003a08 <_vfiprintf_r+0x4c>
1a003bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003bd6:	e719      	b.n	1a003a0c <_vfiprintf_r+0x50>
1a003bd8:	ab03      	add	r3, sp, #12
1a003bda:	9300      	str	r3, [sp, #0]
1a003bdc:	462a      	mov	r2, r5
1a003bde:	4b0a      	ldr	r3, [pc, #40]	; (1a003c08 <_vfiprintf_r+0x24c>)
1a003be0:	a904      	add	r1, sp, #16
1a003be2:	4638      	mov	r0, r7
1a003be4:	f000 f888 	bl	1a003cf8 <_printf_i>
1a003be8:	e7e3      	b.n	1a003bb2 <_vfiprintf_r+0x1f6>
1a003bea:	bf00      	nop
1a003bec:	1a0046e8 	.word	0x1a0046e8
1a003bf0:	1a004708 	.word	0x1a004708
1a003bf4:	1a0046c8 	.word	0x1a0046c8
1a003bf8:	1a00472c 	.word	0x1a00472c
1a003bfc:	1a004732 	.word	0x1a004732
1a003c00:	1a004736 	.word	0x1a004736
1a003c04:	00000000 	.word	0x00000000
1a003c08:	1a003997 	.word	0x1a003997

1a003c0c <_printf_common>:
1a003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003c10:	4691      	mov	r9, r2
1a003c12:	461f      	mov	r7, r3
1a003c14:	688a      	ldr	r2, [r1, #8]
1a003c16:	690b      	ldr	r3, [r1, #16]
1a003c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003c1c:	4293      	cmp	r3, r2
1a003c1e:	bfb8      	it	lt
1a003c20:	4613      	movlt	r3, r2
1a003c22:	f8c9 3000 	str.w	r3, [r9]
1a003c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003c2a:	4606      	mov	r6, r0
1a003c2c:	460c      	mov	r4, r1
1a003c2e:	b112      	cbz	r2, 1a003c36 <_printf_common+0x2a>
1a003c30:	3301      	adds	r3, #1
1a003c32:	f8c9 3000 	str.w	r3, [r9]
1a003c36:	6823      	ldr	r3, [r4, #0]
1a003c38:	0699      	lsls	r1, r3, #26
1a003c3a:	bf42      	ittt	mi
1a003c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a003c40:	3302      	addmi	r3, #2
1a003c42:	f8c9 3000 	strmi.w	r3, [r9]
1a003c46:	6825      	ldr	r5, [r4, #0]
1a003c48:	f015 0506 	ands.w	r5, r5, #6
1a003c4c:	d107      	bne.n	1a003c5e <_printf_common+0x52>
1a003c4e:	f104 0a19 	add.w	sl, r4, #25
1a003c52:	68e3      	ldr	r3, [r4, #12]
1a003c54:	f8d9 2000 	ldr.w	r2, [r9]
1a003c58:	1a9b      	subs	r3, r3, r2
1a003c5a:	42ab      	cmp	r3, r5
1a003c5c:	dc28      	bgt.n	1a003cb0 <_printf_common+0xa4>
1a003c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003c62:	6822      	ldr	r2, [r4, #0]
1a003c64:	3300      	adds	r3, #0
1a003c66:	bf18      	it	ne
1a003c68:	2301      	movne	r3, #1
1a003c6a:	0692      	lsls	r2, r2, #26
1a003c6c:	d42d      	bmi.n	1a003cca <_printf_common+0xbe>
1a003c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003c72:	4639      	mov	r1, r7
1a003c74:	4630      	mov	r0, r6
1a003c76:	47c0      	blx	r8
1a003c78:	3001      	adds	r0, #1
1a003c7a:	d020      	beq.n	1a003cbe <_printf_common+0xb2>
1a003c7c:	6823      	ldr	r3, [r4, #0]
1a003c7e:	68e5      	ldr	r5, [r4, #12]
1a003c80:	f8d9 2000 	ldr.w	r2, [r9]
1a003c84:	f003 0306 	and.w	r3, r3, #6
1a003c88:	2b04      	cmp	r3, #4
1a003c8a:	bf08      	it	eq
1a003c8c:	1aad      	subeq	r5, r5, r2
1a003c8e:	68a3      	ldr	r3, [r4, #8]
1a003c90:	6922      	ldr	r2, [r4, #16]
1a003c92:	bf0c      	ite	eq
1a003c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a003c98:	2500      	movne	r5, #0
1a003c9a:	4293      	cmp	r3, r2
1a003c9c:	bfc4      	itt	gt
1a003c9e:	1a9b      	subgt	r3, r3, r2
1a003ca0:	18ed      	addgt	r5, r5, r3
1a003ca2:	f04f 0900 	mov.w	r9, #0
1a003ca6:	341a      	adds	r4, #26
1a003ca8:	454d      	cmp	r5, r9
1a003caa:	d11a      	bne.n	1a003ce2 <_printf_common+0xd6>
1a003cac:	2000      	movs	r0, #0
1a003cae:	e008      	b.n	1a003cc2 <_printf_common+0xb6>
1a003cb0:	2301      	movs	r3, #1
1a003cb2:	4652      	mov	r2, sl
1a003cb4:	4639      	mov	r1, r7
1a003cb6:	4630      	mov	r0, r6
1a003cb8:	47c0      	blx	r8
1a003cba:	3001      	adds	r0, #1
1a003cbc:	d103      	bne.n	1a003cc6 <_printf_common+0xba>
1a003cbe:	f04f 30ff 	mov.w	r0, #4294967295
1a003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003cc6:	3501      	adds	r5, #1
1a003cc8:	e7c3      	b.n	1a003c52 <_printf_common+0x46>
1a003cca:	18e1      	adds	r1, r4, r3
1a003ccc:	1c5a      	adds	r2, r3, #1
1a003cce:	2030      	movs	r0, #48	; 0x30
1a003cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003cd4:	4422      	add	r2, r4
1a003cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a003cda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a003cde:	3302      	adds	r3, #2
1a003ce0:	e7c5      	b.n	1a003c6e <_printf_common+0x62>
1a003ce2:	2301      	movs	r3, #1
1a003ce4:	4622      	mov	r2, r4
1a003ce6:	4639      	mov	r1, r7
1a003ce8:	4630      	mov	r0, r6
1a003cea:	47c0      	blx	r8
1a003cec:	3001      	adds	r0, #1
1a003cee:	d0e6      	beq.n	1a003cbe <_printf_common+0xb2>
1a003cf0:	f109 0901 	add.w	r9, r9, #1
1a003cf4:	e7d8      	b.n	1a003ca8 <_printf_common+0x9c>
1a003cf6:	Address 0x1a003cf6 is out of bounds.


1a003cf8 <_printf_i>:
1a003cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003cfc:	4606      	mov	r6, r0
1a003cfe:	460c      	mov	r4, r1
1a003d00:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a003d04:	7e09      	ldrb	r1, [r1, #24]
1a003d06:	b085      	sub	sp, #20
1a003d08:	296e      	cmp	r1, #110	; 0x6e
1a003d0a:	4698      	mov	r8, r3
1a003d0c:	4617      	mov	r7, r2
1a003d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003d10:	f000 80ba 	beq.w	1a003e88 <_printf_i+0x190>
1a003d14:	d824      	bhi.n	1a003d60 <_printf_i+0x68>
1a003d16:	2963      	cmp	r1, #99	; 0x63
1a003d18:	d039      	beq.n	1a003d8e <_printf_i+0x96>
1a003d1a:	d80a      	bhi.n	1a003d32 <_printf_i+0x3a>
1a003d1c:	2900      	cmp	r1, #0
1a003d1e:	f000 80c3 	beq.w	1a003ea8 <_printf_i+0x1b0>
1a003d22:	2958      	cmp	r1, #88	; 0x58
1a003d24:	f000 8091 	beq.w	1a003e4a <_printf_i+0x152>
1a003d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003d2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a003d30:	e035      	b.n	1a003d9e <_printf_i+0xa6>
1a003d32:	2964      	cmp	r1, #100	; 0x64
1a003d34:	d001      	beq.n	1a003d3a <_printf_i+0x42>
1a003d36:	2969      	cmp	r1, #105	; 0x69
1a003d38:	d1f6      	bne.n	1a003d28 <_printf_i+0x30>
1a003d3a:	6825      	ldr	r5, [r4, #0]
1a003d3c:	681a      	ldr	r2, [r3, #0]
1a003d3e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a003d42:	f102 0104 	add.w	r1, r2, #4
1a003d46:	d02c      	beq.n	1a003da2 <_printf_i+0xaa>
1a003d48:	6812      	ldr	r2, [r2, #0]
1a003d4a:	6019      	str	r1, [r3, #0]
1a003d4c:	2a00      	cmp	r2, #0
1a003d4e:	da03      	bge.n	1a003d58 <_printf_i+0x60>
1a003d50:	232d      	movs	r3, #45	; 0x2d
1a003d52:	4252      	negs	r2, r2
1a003d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003d58:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a003f18 <_printf_i+0x220>
1a003d5c:	230a      	movs	r3, #10
1a003d5e:	e03f      	b.n	1a003de0 <_printf_i+0xe8>
1a003d60:	2973      	cmp	r1, #115	; 0x73
1a003d62:	f000 80a5 	beq.w	1a003eb0 <_printf_i+0x1b8>
1a003d66:	d808      	bhi.n	1a003d7a <_printf_i+0x82>
1a003d68:	296f      	cmp	r1, #111	; 0x6f
1a003d6a:	d021      	beq.n	1a003db0 <_printf_i+0xb8>
1a003d6c:	2970      	cmp	r1, #112	; 0x70
1a003d6e:	d1db      	bne.n	1a003d28 <_printf_i+0x30>
1a003d70:	6822      	ldr	r2, [r4, #0]
1a003d72:	f042 0220 	orr.w	r2, r2, #32
1a003d76:	6022      	str	r2, [r4, #0]
1a003d78:	e003      	b.n	1a003d82 <_printf_i+0x8a>
1a003d7a:	2975      	cmp	r1, #117	; 0x75
1a003d7c:	d018      	beq.n	1a003db0 <_printf_i+0xb8>
1a003d7e:	2978      	cmp	r1, #120	; 0x78
1a003d80:	d1d2      	bne.n	1a003d28 <_printf_i+0x30>
1a003d82:	2278      	movs	r2, #120	; 0x78
1a003d84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a003d88:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a003f1c <_printf_i+0x224>
1a003d8c:	e061      	b.n	1a003e52 <_printf_i+0x15a>
1a003d8e:	681a      	ldr	r2, [r3, #0]
1a003d90:	1d11      	adds	r1, r2, #4
1a003d92:	6019      	str	r1, [r3, #0]
1a003d94:	6813      	ldr	r3, [r2, #0]
1a003d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003d9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003d9e:	2301      	movs	r3, #1
1a003da0:	e093      	b.n	1a003eca <_printf_i+0x1d2>
1a003da2:	6812      	ldr	r2, [r2, #0]
1a003da4:	6019      	str	r1, [r3, #0]
1a003da6:	f015 0f40 	tst.w	r5, #64	; 0x40
1a003daa:	bf18      	it	ne
1a003dac:	b212      	sxthne	r2, r2
1a003dae:	e7cd      	b.n	1a003d4c <_printf_i+0x54>
1a003db0:	f8d4 c000 	ldr.w	ip, [r4]
1a003db4:	681a      	ldr	r2, [r3, #0]
1a003db6:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003dba:	f102 0504 	add.w	r5, r2, #4
1a003dbe:	601d      	str	r5, [r3, #0]
1a003dc0:	d001      	beq.n	1a003dc6 <_printf_i+0xce>
1a003dc2:	6812      	ldr	r2, [r2, #0]
1a003dc4:	e003      	b.n	1a003dce <_printf_i+0xd6>
1a003dc6:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a003dca:	d0fa      	beq.n	1a003dc2 <_printf_i+0xca>
1a003dcc:	8812      	ldrh	r2, [r2, #0]
1a003dce:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a003f18 <_printf_i+0x220>
1a003dd2:	296f      	cmp	r1, #111	; 0x6f
1a003dd4:	bf0c      	ite	eq
1a003dd6:	2308      	moveq	r3, #8
1a003dd8:	230a      	movne	r3, #10
1a003dda:	2100      	movs	r1, #0
1a003ddc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003de0:	6865      	ldr	r5, [r4, #4]
1a003de2:	60a5      	str	r5, [r4, #8]
1a003de4:	2d00      	cmp	r5, #0
1a003de6:	bfa2      	ittt	ge
1a003de8:	6821      	ldrge	r1, [r4, #0]
1a003dea:	f021 0104 	bicge.w	r1, r1, #4
1a003dee:	6021      	strge	r1, [r4, #0]
1a003df0:	b90a      	cbnz	r2, 1a003df6 <_printf_i+0xfe>
1a003df2:	2d00      	cmp	r5, #0
1a003df4:	d046      	beq.n	1a003e84 <_printf_i+0x18c>
1a003df6:	4605      	mov	r5, r0
1a003df8:	fbb2 f1f3 	udiv	r1, r2, r3
1a003dfc:	fb03 2e11 	mls	lr, r3, r1, r2
1a003e00:	4293      	cmp	r3, r2
1a003e02:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a003e06:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a003e0a:	d939      	bls.n	1a003e80 <_printf_i+0x188>
1a003e0c:	2b08      	cmp	r3, #8
1a003e0e:	d10b      	bne.n	1a003e28 <_printf_i+0x130>
1a003e10:	6823      	ldr	r3, [r4, #0]
1a003e12:	07da      	lsls	r2, r3, #31
1a003e14:	d508      	bpl.n	1a003e28 <_printf_i+0x130>
1a003e16:	6923      	ldr	r3, [r4, #16]
1a003e18:	6862      	ldr	r2, [r4, #4]
1a003e1a:	429a      	cmp	r2, r3
1a003e1c:	bfde      	ittt	le
1a003e1e:	2330      	movle	r3, #48	; 0x30
1a003e20:	f805 3c01 	strble.w	r3, [r5, #-1]
1a003e24:	f105 35ff 	addle.w	r5, r5, #4294967295
1a003e28:	1b40      	subs	r0, r0, r5
1a003e2a:	6120      	str	r0, [r4, #16]
1a003e2c:	f8cd 8000 	str.w	r8, [sp]
1a003e30:	463b      	mov	r3, r7
1a003e32:	aa03      	add	r2, sp, #12
1a003e34:	4621      	mov	r1, r4
1a003e36:	4630      	mov	r0, r6
1a003e38:	f7ff fee8 	bl	1a003c0c <_printf_common>
1a003e3c:	3001      	adds	r0, #1
1a003e3e:	d149      	bne.n	1a003ed4 <_printf_i+0x1dc>
1a003e40:	f04f 30ff 	mov.w	r0, #4294967295
1a003e44:	b005      	add	sp, #20
1a003e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003e4a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a003f18 <_printf_i+0x220>
1a003e4e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a003e52:	681d      	ldr	r5, [r3, #0]
1a003e54:	6821      	ldr	r1, [r4, #0]
1a003e56:	f855 2b04 	ldr.w	r2, [r5], #4
1a003e5a:	601d      	str	r5, [r3, #0]
1a003e5c:	060d      	lsls	r5, r1, #24
1a003e5e:	d50b      	bpl.n	1a003e78 <_printf_i+0x180>
1a003e60:	07cd      	lsls	r5, r1, #31
1a003e62:	bf44      	itt	mi
1a003e64:	f041 0120 	orrmi.w	r1, r1, #32
1a003e68:	6021      	strmi	r1, [r4, #0]
1a003e6a:	b91a      	cbnz	r2, 1a003e74 <_printf_i+0x17c>
1a003e6c:	6823      	ldr	r3, [r4, #0]
1a003e6e:	f023 0320 	bic.w	r3, r3, #32
1a003e72:	6023      	str	r3, [r4, #0]
1a003e74:	2310      	movs	r3, #16
1a003e76:	e7b0      	b.n	1a003dda <_printf_i+0xe2>
1a003e78:	064b      	lsls	r3, r1, #25
1a003e7a:	bf48      	it	mi
1a003e7c:	b292      	uxthmi	r2, r2
1a003e7e:	e7ef      	b.n	1a003e60 <_printf_i+0x168>
1a003e80:	460a      	mov	r2, r1
1a003e82:	e7b9      	b.n	1a003df8 <_printf_i+0x100>
1a003e84:	4605      	mov	r5, r0
1a003e86:	e7c1      	b.n	1a003e0c <_printf_i+0x114>
1a003e88:	681a      	ldr	r2, [r3, #0]
1a003e8a:	f8d4 c000 	ldr.w	ip, [r4]
1a003e8e:	6961      	ldr	r1, [r4, #20]
1a003e90:	1d15      	adds	r5, r2, #4
1a003e92:	601d      	str	r5, [r3, #0]
1a003e94:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003e98:	6813      	ldr	r3, [r2, #0]
1a003e9a:	d001      	beq.n	1a003ea0 <_printf_i+0x1a8>
1a003e9c:	6019      	str	r1, [r3, #0]
1a003e9e:	e003      	b.n	1a003ea8 <_printf_i+0x1b0>
1a003ea0:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a003ea4:	d0fa      	beq.n	1a003e9c <_printf_i+0x1a4>
1a003ea6:	8019      	strh	r1, [r3, #0]
1a003ea8:	2300      	movs	r3, #0
1a003eaa:	6123      	str	r3, [r4, #16]
1a003eac:	4605      	mov	r5, r0
1a003eae:	e7bd      	b.n	1a003e2c <_printf_i+0x134>
1a003eb0:	681a      	ldr	r2, [r3, #0]
1a003eb2:	1d11      	adds	r1, r2, #4
1a003eb4:	6019      	str	r1, [r3, #0]
1a003eb6:	6815      	ldr	r5, [r2, #0]
1a003eb8:	6862      	ldr	r2, [r4, #4]
1a003eba:	2100      	movs	r1, #0
1a003ebc:	4628      	mov	r0, r5
1a003ebe:	f000 fa27 	bl	1a004310 <memchr>
1a003ec2:	b108      	cbz	r0, 1a003ec8 <_printf_i+0x1d0>
1a003ec4:	1b40      	subs	r0, r0, r5
1a003ec6:	6060      	str	r0, [r4, #4]
1a003ec8:	6863      	ldr	r3, [r4, #4]
1a003eca:	6123      	str	r3, [r4, #16]
1a003ecc:	2300      	movs	r3, #0
1a003ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003ed2:	e7ab      	b.n	1a003e2c <_printf_i+0x134>
1a003ed4:	6923      	ldr	r3, [r4, #16]
1a003ed6:	462a      	mov	r2, r5
1a003ed8:	4639      	mov	r1, r7
1a003eda:	4630      	mov	r0, r6
1a003edc:	47c0      	blx	r8
1a003ede:	3001      	adds	r0, #1
1a003ee0:	d0ae      	beq.n	1a003e40 <_printf_i+0x148>
1a003ee2:	6823      	ldr	r3, [r4, #0]
1a003ee4:	079b      	lsls	r3, r3, #30
1a003ee6:	d413      	bmi.n	1a003f10 <_printf_i+0x218>
1a003ee8:	68e0      	ldr	r0, [r4, #12]
1a003eea:	9b03      	ldr	r3, [sp, #12]
1a003eec:	4298      	cmp	r0, r3
1a003eee:	bfb8      	it	lt
1a003ef0:	4618      	movlt	r0, r3
1a003ef2:	e7a7      	b.n	1a003e44 <_printf_i+0x14c>
1a003ef4:	2301      	movs	r3, #1
1a003ef6:	464a      	mov	r2, r9
1a003ef8:	4639      	mov	r1, r7
1a003efa:	4630      	mov	r0, r6
1a003efc:	47c0      	blx	r8
1a003efe:	3001      	adds	r0, #1
1a003f00:	d09e      	beq.n	1a003e40 <_printf_i+0x148>
1a003f02:	3501      	adds	r5, #1
1a003f04:	68e3      	ldr	r3, [r4, #12]
1a003f06:	9a03      	ldr	r2, [sp, #12]
1a003f08:	1a9b      	subs	r3, r3, r2
1a003f0a:	42ab      	cmp	r3, r5
1a003f0c:	dcf2      	bgt.n	1a003ef4 <_printf_i+0x1fc>
1a003f0e:	e7eb      	b.n	1a003ee8 <_printf_i+0x1f0>
1a003f10:	2500      	movs	r5, #0
1a003f12:	f104 0919 	add.w	r9, r4, #25
1a003f16:	e7f5      	b.n	1a003f04 <_printf_i+0x20c>
1a003f18:	1a00473d 	.word	0x1a00473d
1a003f1c:	1a00474e 	.word	0x1a00474e

1a003f20 <iprintf>:
1a003f20:	b40f      	push	{r0, r1, r2, r3}
1a003f22:	4b0a      	ldr	r3, [pc, #40]	; (1a003f4c <iprintf+0x2c>)
1a003f24:	b513      	push	{r0, r1, r4, lr}
1a003f26:	681c      	ldr	r4, [r3, #0]
1a003f28:	b124      	cbz	r4, 1a003f34 <iprintf+0x14>
1a003f2a:	69a3      	ldr	r3, [r4, #24]
1a003f2c:	b913      	cbnz	r3, 1a003f34 <iprintf+0x14>
1a003f2e:	4620      	mov	r0, r4
1a003f30:	f7ff fba6 	bl	1a003680 <__sinit>
1a003f34:	ab05      	add	r3, sp, #20
1a003f36:	9a04      	ldr	r2, [sp, #16]
1a003f38:	68a1      	ldr	r1, [r4, #8]
1a003f3a:	9301      	str	r3, [sp, #4]
1a003f3c:	4620      	mov	r0, r4
1a003f3e:	f7ff fd3d 	bl	1a0039bc <_vfiprintf_r>
1a003f42:	b002      	add	sp, #8
1a003f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003f48:	b004      	add	sp, #16
1a003f4a:	4770      	bx	lr
1a003f4c:	10000048 	.word	0x10000048

1a003f50 <_puts_r>:
1a003f50:	b570      	push	{r4, r5, r6, lr}
1a003f52:	460e      	mov	r6, r1
1a003f54:	4605      	mov	r5, r0
1a003f56:	b118      	cbz	r0, 1a003f60 <_puts_r+0x10>
1a003f58:	6983      	ldr	r3, [r0, #24]
1a003f5a:	b90b      	cbnz	r3, 1a003f60 <_puts_r+0x10>
1a003f5c:	f7ff fb90 	bl	1a003680 <__sinit>
1a003f60:	69ab      	ldr	r3, [r5, #24]
1a003f62:	68ac      	ldr	r4, [r5, #8]
1a003f64:	b913      	cbnz	r3, 1a003f6c <_puts_r+0x1c>
1a003f66:	4628      	mov	r0, r5
1a003f68:	f7ff fb8a 	bl	1a003680 <__sinit>
1a003f6c:	4b2c      	ldr	r3, [pc, #176]	; (1a004020 <_puts_r+0xd0>)
1a003f6e:	429c      	cmp	r4, r3
1a003f70:	d120      	bne.n	1a003fb4 <_puts_r+0x64>
1a003f72:	686c      	ldr	r4, [r5, #4]
1a003f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003f76:	07db      	lsls	r3, r3, #31
1a003f78:	d405      	bmi.n	1a003f86 <_puts_r+0x36>
1a003f7a:	89a3      	ldrh	r3, [r4, #12]
1a003f7c:	0598      	lsls	r0, r3, #22
1a003f7e:	d402      	bmi.n	1a003f86 <_puts_r+0x36>
1a003f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003f82:	f7ff fc3e 	bl	1a003802 <__retarget_lock_acquire_recursive>
1a003f86:	89a3      	ldrh	r3, [r4, #12]
1a003f88:	0719      	lsls	r1, r3, #28
1a003f8a:	d51d      	bpl.n	1a003fc8 <_puts_r+0x78>
1a003f8c:	6923      	ldr	r3, [r4, #16]
1a003f8e:	b1db      	cbz	r3, 1a003fc8 <_puts_r+0x78>
1a003f90:	3e01      	subs	r6, #1
1a003f92:	68a3      	ldr	r3, [r4, #8]
1a003f94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003f98:	3b01      	subs	r3, #1
1a003f9a:	60a3      	str	r3, [r4, #8]
1a003f9c:	bb39      	cbnz	r1, 1a003fee <_puts_r+0x9e>
1a003f9e:	2b00      	cmp	r3, #0
1a003fa0:	da38      	bge.n	1a004014 <_puts_r+0xc4>
1a003fa2:	4622      	mov	r2, r4
1a003fa4:	210a      	movs	r1, #10
1a003fa6:	4628      	mov	r0, r5
1a003fa8:	f000 f88c 	bl	1a0040c4 <__swbuf_r>
1a003fac:	3001      	adds	r0, #1
1a003fae:	d011      	beq.n	1a003fd4 <_puts_r+0x84>
1a003fb0:	250a      	movs	r5, #10
1a003fb2:	e011      	b.n	1a003fd8 <_puts_r+0x88>
1a003fb4:	4b1b      	ldr	r3, [pc, #108]	; (1a004024 <_puts_r+0xd4>)
1a003fb6:	429c      	cmp	r4, r3
1a003fb8:	d101      	bne.n	1a003fbe <_puts_r+0x6e>
1a003fba:	68ac      	ldr	r4, [r5, #8]
1a003fbc:	e7da      	b.n	1a003f74 <_puts_r+0x24>
1a003fbe:	4b1a      	ldr	r3, [pc, #104]	; (1a004028 <_puts_r+0xd8>)
1a003fc0:	429c      	cmp	r4, r3
1a003fc2:	bf08      	it	eq
1a003fc4:	68ec      	ldreq	r4, [r5, #12]
1a003fc6:	e7d5      	b.n	1a003f74 <_puts_r+0x24>
1a003fc8:	4621      	mov	r1, r4
1a003fca:	4628      	mov	r0, r5
1a003fcc:	f000 f8cc 	bl	1a004168 <__swsetup_r>
1a003fd0:	2800      	cmp	r0, #0
1a003fd2:	d0dd      	beq.n	1a003f90 <_puts_r+0x40>
1a003fd4:	f04f 35ff 	mov.w	r5, #4294967295
1a003fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003fda:	07da      	lsls	r2, r3, #31
1a003fdc:	d405      	bmi.n	1a003fea <_puts_r+0x9a>
1a003fde:	89a3      	ldrh	r3, [r4, #12]
1a003fe0:	059b      	lsls	r3, r3, #22
1a003fe2:	d402      	bmi.n	1a003fea <_puts_r+0x9a>
1a003fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003fe6:	f7ff fc0d 	bl	1a003804 <__retarget_lock_release_recursive>
1a003fea:	4628      	mov	r0, r5
1a003fec:	bd70      	pop	{r4, r5, r6, pc}
1a003fee:	2b00      	cmp	r3, #0
1a003ff0:	da04      	bge.n	1a003ffc <_puts_r+0xac>
1a003ff2:	69a2      	ldr	r2, [r4, #24]
1a003ff4:	429a      	cmp	r2, r3
1a003ff6:	dc06      	bgt.n	1a004006 <_puts_r+0xb6>
1a003ff8:	290a      	cmp	r1, #10
1a003ffa:	d004      	beq.n	1a004006 <_puts_r+0xb6>
1a003ffc:	6823      	ldr	r3, [r4, #0]
1a003ffe:	1c5a      	adds	r2, r3, #1
1a004000:	6022      	str	r2, [r4, #0]
1a004002:	7019      	strb	r1, [r3, #0]
1a004004:	e7c5      	b.n	1a003f92 <_puts_r+0x42>
1a004006:	4622      	mov	r2, r4
1a004008:	4628      	mov	r0, r5
1a00400a:	f000 f85b 	bl	1a0040c4 <__swbuf_r>
1a00400e:	3001      	adds	r0, #1
1a004010:	d1bf      	bne.n	1a003f92 <_puts_r+0x42>
1a004012:	e7df      	b.n	1a003fd4 <_puts_r+0x84>
1a004014:	6823      	ldr	r3, [r4, #0]
1a004016:	250a      	movs	r5, #10
1a004018:	1c5a      	adds	r2, r3, #1
1a00401a:	6022      	str	r2, [r4, #0]
1a00401c:	701d      	strb	r5, [r3, #0]
1a00401e:	e7db      	b.n	1a003fd8 <_puts_r+0x88>
1a004020:	1a0046e8 	.word	0x1a0046e8
1a004024:	1a004708 	.word	0x1a004708
1a004028:	1a0046c8 	.word	0x1a0046c8

1a00402c <puts>:
1a00402c:	4b02      	ldr	r3, [pc, #8]	; (1a004038 <puts+0xc>)
1a00402e:	4601      	mov	r1, r0
1a004030:	6818      	ldr	r0, [r3, #0]
1a004032:	f7ff bf8d 	b.w	1a003f50 <_puts_r>
1a004036:	bf00      	nop
1a004038:	10000048 	.word	0x10000048

1a00403c <__sread>:
1a00403c:	b510      	push	{r4, lr}
1a00403e:	460c      	mov	r4, r1
1a004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004044:	f7fd f974 	bl	1a001330 <_read_r>
1a004048:	2800      	cmp	r0, #0
1a00404a:	bfab      	itete	ge
1a00404c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00404e:	89a3      	ldrhlt	r3, [r4, #12]
1a004050:	181b      	addge	r3, r3, r0
1a004052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004056:	bfac      	ite	ge
1a004058:	6563      	strge	r3, [r4, #84]	; 0x54
1a00405a:	81a3      	strhlt	r3, [r4, #12]
1a00405c:	bd10      	pop	{r4, pc}

1a00405e <__swrite>:
1a00405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004062:	461f      	mov	r7, r3
1a004064:	898b      	ldrh	r3, [r1, #12]
1a004066:	05db      	lsls	r3, r3, #23
1a004068:	4605      	mov	r5, r0
1a00406a:	460c      	mov	r4, r1
1a00406c:	4616      	mov	r6, r2
1a00406e:	d505      	bpl.n	1a00407c <__swrite+0x1e>
1a004070:	2302      	movs	r3, #2
1a004072:	2200      	movs	r2, #0
1a004074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004078:	f7fd f955 	bl	1a001326 <_lseek_r>
1a00407c:	89a3      	ldrh	r3, [r4, #12]
1a00407e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004086:	81a3      	strh	r3, [r4, #12]
1a004088:	4632      	mov	r2, r6
1a00408a:	463b      	mov	r3, r7
1a00408c:	4628      	mov	r0, r5
1a00408e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004092:	f7fd b974 	b.w	1a00137e <_write_r>

1a004096 <__sseek>:
1a004096:	b510      	push	{r4, lr}
1a004098:	460c      	mov	r4, r1
1a00409a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00409e:	f7fd f942 	bl	1a001326 <_lseek_r>
1a0040a2:	1c43      	adds	r3, r0, #1
1a0040a4:	89a3      	ldrh	r3, [r4, #12]
1a0040a6:	bf15      	itete	ne
1a0040a8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0040aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0040ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0040b2:	81a3      	strheq	r3, [r4, #12]
1a0040b4:	bf18      	it	ne
1a0040b6:	81a3      	strhne	r3, [r4, #12]
1a0040b8:	bd10      	pop	{r4, pc}

1a0040ba <__sclose>:
1a0040ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0040be:	f7fd b91f 	b.w	1a001300 <_close_r>
1a0040c2:	Address 0x1a0040c2 is out of bounds.


1a0040c4 <__swbuf_r>:
1a0040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0040c6:	460e      	mov	r6, r1
1a0040c8:	4614      	mov	r4, r2
1a0040ca:	4605      	mov	r5, r0
1a0040cc:	b118      	cbz	r0, 1a0040d6 <__swbuf_r+0x12>
1a0040ce:	6983      	ldr	r3, [r0, #24]
1a0040d0:	b90b      	cbnz	r3, 1a0040d6 <__swbuf_r+0x12>
1a0040d2:	f7ff fad5 	bl	1a003680 <__sinit>
1a0040d6:	4b21      	ldr	r3, [pc, #132]	; (1a00415c <__swbuf_r+0x98>)
1a0040d8:	429c      	cmp	r4, r3
1a0040da:	d12b      	bne.n	1a004134 <__swbuf_r+0x70>
1a0040dc:	686c      	ldr	r4, [r5, #4]
1a0040de:	69a3      	ldr	r3, [r4, #24]
1a0040e0:	60a3      	str	r3, [r4, #8]
1a0040e2:	89a3      	ldrh	r3, [r4, #12]
1a0040e4:	071a      	lsls	r2, r3, #28
1a0040e6:	d52f      	bpl.n	1a004148 <__swbuf_r+0x84>
1a0040e8:	6923      	ldr	r3, [r4, #16]
1a0040ea:	b36b      	cbz	r3, 1a004148 <__swbuf_r+0x84>
1a0040ec:	6923      	ldr	r3, [r4, #16]
1a0040ee:	6820      	ldr	r0, [r4, #0]
1a0040f0:	1ac0      	subs	r0, r0, r3
1a0040f2:	6963      	ldr	r3, [r4, #20]
1a0040f4:	b2f6      	uxtb	r6, r6
1a0040f6:	4283      	cmp	r3, r0
1a0040f8:	4637      	mov	r7, r6
1a0040fa:	dc04      	bgt.n	1a004106 <__swbuf_r+0x42>
1a0040fc:	4621      	mov	r1, r4
1a0040fe:	4628      	mov	r0, r5
1a004100:	f7ff fa2a 	bl	1a003558 <_fflush_r>
1a004104:	bb30      	cbnz	r0, 1a004154 <__swbuf_r+0x90>
1a004106:	68a3      	ldr	r3, [r4, #8]
1a004108:	3b01      	subs	r3, #1
1a00410a:	60a3      	str	r3, [r4, #8]
1a00410c:	6823      	ldr	r3, [r4, #0]
1a00410e:	1c5a      	adds	r2, r3, #1
1a004110:	6022      	str	r2, [r4, #0]
1a004112:	701e      	strb	r6, [r3, #0]
1a004114:	6963      	ldr	r3, [r4, #20]
1a004116:	3001      	adds	r0, #1
1a004118:	4283      	cmp	r3, r0
1a00411a:	d004      	beq.n	1a004126 <__swbuf_r+0x62>
1a00411c:	89a3      	ldrh	r3, [r4, #12]
1a00411e:	07db      	lsls	r3, r3, #31
1a004120:	d506      	bpl.n	1a004130 <__swbuf_r+0x6c>
1a004122:	2e0a      	cmp	r6, #10
1a004124:	d104      	bne.n	1a004130 <__swbuf_r+0x6c>
1a004126:	4621      	mov	r1, r4
1a004128:	4628      	mov	r0, r5
1a00412a:	f7ff fa15 	bl	1a003558 <_fflush_r>
1a00412e:	b988      	cbnz	r0, 1a004154 <__swbuf_r+0x90>
1a004130:	4638      	mov	r0, r7
1a004132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004134:	4b0a      	ldr	r3, [pc, #40]	; (1a004160 <__swbuf_r+0x9c>)
1a004136:	429c      	cmp	r4, r3
1a004138:	d101      	bne.n	1a00413e <__swbuf_r+0x7a>
1a00413a:	68ac      	ldr	r4, [r5, #8]
1a00413c:	e7cf      	b.n	1a0040de <__swbuf_r+0x1a>
1a00413e:	4b09      	ldr	r3, [pc, #36]	; (1a004164 <__swbuf_r+0xa0>)
1a004140:	429c      	cmp	r4, r3
1a004142:	bf08      	it	eq
1a004144:	68ec      	ldreq	r4, [r5, #12]
1a004146:	e7ca      	b.n	1a0040de <__swbuf_r+0x1a>
1a004148:	4621      	mov	r1, r4
1a00414a:	4628      	mov	r0, r5
1a00414c:	f000 f80c 	bl	1a004168 <__swsetup_r>
1a004150:	2800      	cmp	r0, #0
1a004152:	d0cb      	beq.n	1a0040ec <__swbuf_r+0x28>
1a004154:	f04f 37ff 	mov.w	r7, #4294967295
1a004158:	e7ea      	b.n	1a004130 <__swbuf_r+0x6c>
1a00415a:	bf00      	nop
1a00415c:	1a0046e8 	.word	0x1a0046e8
1a004160:	1a004708 	.word	0x1a004708
1a004164:	1a0046c8 	.word	0x1a0046c8

1a004168 <__swsetup_r>:
1a004168:	4b32      	ldr	r3, [pc, #200]	; (1a004234 <__swsetup_r+0xcc>)
1a00416a:	b570      	push	{r4, r5, r6, lr}
1a00416c:	681d      	ldr	r5, [r3, #0]
1a00416e:	4606      	mov	r6, r0
1a004170:	460c      	mov	r4, r1
1a004172:	b125      	cbz	r5, 1a00417e <__swsetup_r+0x16>
1a004174:	69ab      	ldr	r3, [r5, #24]
1a004176:	b913      	cbnz	r3, 1a00417e <__swsetup_r+0x16>
1a004178:	4628      	mov	r0, r5
1a00417a:	f7ff fa81 	bl	1a003680 <__sinit>
1a00417e:	4b2e      	ldr	r3, [pc, #184]	; (1a004238 <__swsetup_r+0xd0>)
1a004180:	429c      	cmp	r4, r3
1a004182:	d10f      	bne.n	1a0041a4 <__swsetup_r+0x3c>
1a004184:	686c      	ldr	r4, [r5, #4]
1a004186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00418a:	b29a      	uxth	r2, r3
1a00418c:	0715      	lsls	r5, r2, #28
1a00418e:	d42c      	bmi.n	1a0041ea <__swsetup_r+0x82>
1a004190:	06d0      	lsls	r0, r2, #27
1a004192:	d411      	bmi.n	1a0041b8 <__swsetup_r+0x50>
1a004194:	2209      	movs	r2, #9
1a004196:	6032      	str	r2, [r6, #0]
1a004198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00419c:	81a3      	strh	r3, [r4, #12]
1a00419e:	f04f 30ff 	mov.w	r0, #4294967295
1a0041a2:	e03e      	b.n	1a004222 <__swsetup_r+0xba>
1a0041a4:	4b25      	ldr	r3, [pc, #148]	; (1a00423c <__swsetup_r+0xd4>)
1a0041a6:	429c      	cmp	r4, r3
1a0041a8:	d101      	bne.n	1a0041ae <__swsetup_r+0x46>
1a0041aa:	68ac      	ldr	r4, [r5, #8]
1a0041ac:	e7eb      	b.n	1a004186 <__swsetup_r+0x1e>
1a0041ae:	4b24      	ldr	r3, [pc, #144]	; (1a004240 <__swsetup_r+0xd8>)
1a0041b0:	429c      	cmp	r4, r3
1a0041b2:	bf08      	it	eq
1a0041b4:	68ec      	ldreq	r4, [r5, #12]
1a0041b6:	e7e6      	b.n	1a004186 <__swsetup_r+0x1e>
1a0041b8:	0751      	lsls	r1, r2, #29
1a0041ba:	d512      	bpl.n	1a0041e2 <__swsetup_r+0x7a>
1a0041bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0041be:	b141      	cbz	r1, 1a0041d2 <__swsetup_r+0x6a>
1a0041c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0041c4:	4299      	cmp	r1, r3
1a0041c6:	d002      	beq.n	1a0041ce <__swsetup_r+0x66>
1a0041c8:	4630      	mov	r0, r6
1a0041ca:	f7ff fb25 	bl	1a003818 <_free_r>
1a0041ce:	2300      	movs	r3, #0
1a0041d0:	6363      	str	r3, [r4, #52]	; 0x34
1a0041d2:	89a3      	ldrh	r3, [r4, #12]
1a0041d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0041d8:	81a3      	strh	r3, [r4, #12]
1a0041da:	2300      	movs	r3, #0
1a0041dc:	6063      	str	r3, [r4, #4]
1a0041de:	6923      	ldr	r3, [r4, #16]
1a0041e0:	6023      	str	r3, [r4, #0]
1a0041e2:	89a3      	ldrh	r3, [r4, #12]
1a0041e4:	f043 0308 	orr.w	r3, r3, #8
1a0041e8:	81a3      	strh	r3, [r4, #12]
1a0041ea:	6923      	ldr	r3, [r4, #16]
1a0041ec:	b94b      	cbnz	r3, 1a004202 <__swsetup_r+0x9a>
1a0041ee:	89a3      	ldrh	r3, [r4, #12]
1a0041f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0041f8:	d003      	beq.n	1a004202 <__swsetup_r+0x9a>
1a0041fa:	4621      	mov	r1, r4
1a0041fc:	4630      	mov	r0, r6
1a0041fe:	f000 f845 	bl	1a00428c <__smakebuf_r>
1a004202:	89a2      	ldrh	r2, [r4, #12]
1a004204:	f012 0301 	ands.w	r3, r2, #1
1a004208:	d00c      	beq.n	1a004224 <__swsetup_r+0xbc>
1a00420a:	2300      	movs	r3, #0
1a00420c:	60a3      	str	r3, [r4, #8]
1a00420e:	6963      	ldr	r3, [r4, #20]
1a004210:	425b      	negs	r3, r3
1a004212:	61a3      	str	r3, [r4, #24]
1a004214:	6923      	ldr	r3, [r4, #16]
1a004216:	b953      	cbnz	r3, 1a00422e <__swsetup_r+0xc6>
1a004218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00421c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004220:	d1ba      	bne.n	1a004198 <__swsetup_r+0x30>
1a004222:	bd70      	pop	{r4, r5, r6, pc}
1a004224:	0792      	lsls	r2, r2, #30
1a004226:	bf58      	it	pl
1a004228:	6963      	ldrpl	r3, [r4, #20]
1a00422a:	60a3      	str	r3, [r4, #8]
1a00422c:	e7f2      	b.n	1a004214 <__swsetup_r+0xac>
1a00422e:	2000      	movs	r0, #0
1a004230:	e7f7      	b.n	1a004222 <__swsetup_r+0xba>
1a004232:	bf00      	nop
1a004234:	10000048 	.word	0x10000048
1a004238:	1a0046e8 	.word	0x1a0046e8
1a00423c:	1a004708 	.word	0x1a004708
1a004240:	1a0046c8 	.word	0x1a0046c8

1a004244 <__swhatbuf_r>:
1a004244:	b570      	push	{r4, r5, r6, lr}
1a004246:	460e      	mov	r6, r1
1a004248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00424c:	2900      	cmp	r1, #0
1a00424e:	b096      	sub	sp, #88	; 0x58
1a004250:	4614      	mov	r4, r2
1a004252:	461d      	mov	r5, r3
1a004254:	da07      	bge.n	1a004266 <__swhatbuf_r+0x22>
1a004256:	2300      	movs	r3, #0
1a004258:	602b      	str	r3, [r5, #0]
1a00425a:	89b3      	ldrh	r3, [r6, #12]
1a00425c:	061a      	lsls	r2, r3, #24
1a00425e:	d410      	bmi.n	1a004282 <__swhatbuf_r+0x3e>
1a004260:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004264:	e00e      	b.n	1a004284 <__swhatbuf_r+0x40>
1a004266:	466a      	mov	r2, sp
1a004268:	f7fd f84f 	bl	1a00130a <_fstat_r>
1a00426c:	2800      	cmp	r0, #0
1a00426e:	dbf2      	blt.n	1a004256 <__swhatbuf_r+0x12>
1a004270:	9a01      	ldr	r2, [sp, #4]
1a004272:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004276:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00427a:	425a      	negs	r2, r3
1a00427c:	415a      	adcs	r2, r3
1a00427e:	602a      	str	r2, [r5, #0]
1a004280:	e7ee      	b.n	1a004260 <__swhatbuf_r+0x1c>
1a004282:	2340      	movs	r3, #64	; 0x40
1a004284:	2000      	movs	r0, #0
1a004286:	6023      	str	r3, [r4, #0]
1a004288:	b016      	add	sp, #88	; 0x58
1a00428a:	bd70      	pop	{r4, r5, r6, pc}

1a00428c <__smakebuf_r>:
1a00428c:	898b      	ldrh	r3, [r1, #12]
1a00428e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004290:	079d      	lsls	r5, r3, #30
1a004292:	4606      	mov	r6, r0
1a004294:	460c      	mov	r4, r1
1a004296:	d507      	bpl.n	1a0042a8 <__smakebuf_r+0x1c>
1a004298:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00429c:	6023      	str	r3, [r4, #0]
1a00429e:	6123      	str	r3, [r4, #16]
1a0042a0:	2301      	movs	r3, #1
1a0042a2:	6163      	str	r3, [r4, #20]
1a0042a4:	b002      	add	sp, #8
1a0042a6:	bd70      	pop	{r4, r5, r6, pc}
1a0042a8:	ab01      	add	r3, sp, #4
1a0042aa:	466a      	mov	r2, sp
1a0042ac:	f7ff ffca 	bl	1a004244 <__swhatbuf_r>
1a0042b0:	9900      	ldr	r1, [sp, #0]
1a0042b2:	4605      	mov	r5, r0
1a0042b4:	4630      	mov	r0, r6
1a0042b6:	f7ff fafd 	bl	1a0038b4 <_malloc_r>
1a0042ba:	b948      	cbnz	r0, 1a0042d0 <__smakebuf_r+0x44>
1a0042bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0042c0:	059a      	lsls	r2, r3, #22
1a0042c2:	d4ef      	bmi.n	1a0042a4 <__smakebuf_r+0x18>
1a0042c4:	f023 0303 	bic.w	r3, r3, #3
1a0042c8:	f043 0302 	orr.w	r3, r3, #2
1a0042cc:	81a3      	strh	r3, [r4, #12]
1a0042ce:	e7e3      	b.n	1a004298 <__smakebuf_r+0xc>
1a0042d0:	4b0d      	ldr	r3, [pc, #52]	; (1a004308 <__smakebuf_r+0x7c>)
1a0042d2:	62b3      	str	r3, [r6, #40]	; 0x28
1a0042d4:	89a3      	ldrh	r3, [r4, #12]
1a0042d6:	6020      	str	r0, [r4, #0]
1a0042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0042dc:	81a3      	strh	r3, [r4, #12]
1a0042de:	9b00      	ldr	r3, [sp, #0]
1a0042e0:	6163      	str	r3, [r4, #20]
1a0042e2:	9b01      	ldr	r3, [sp, #4]
1a0042e4:	6120      	str	r0, [r4, #16]
1a0042e6:	b15b      	cbz	r3, 1a004300 <__smakebuf_r+0x74>
1a0042e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0042ec:	4630      	mov	r0, r6
1a0042ee:	f7fd f811 	bl	1a001314 <_isatty_r>
1a0042f2:	b128      	cbz	r0, 1a004300 <__smakebuf_r+0x74>
1a0042f4:	89a3      	ldrh	r3, [r4, #12]
1a0042f6:	f023 0303 	bic.w	r3, r3, #3
1a0042fa:	f043 0301 	orr.w	r3, r3, #1
1a0042fe:	81a3      	strh	r3, [r4, #12]
1a004300:	89a3      	ldrh	r3, [r4, #12]
1a004302:	431d      	orrs	r5, r3
1a004304:	81a5      	strh	r5, [r4, #12]
1a004306:	e7cd      	b.n	1a0042a4 <__smakebuf_r+0x18>
1a004308:	1a003619 	.word	0x1a003619
1a00430c:	ffffffff 	.word	0xffffffff

1a004310 <memchr>:
1a004310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004314:	2a10      	cmp	r2, #16
1a004316:	db2b      	blt.n	1a004370 <memchr+0x60>
1a004318:	f010 0f07 	tst.w	r0, #7
1a00431c:	d008      	beq.n	1a004330 <memchr+0x20>
1a00431e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004322:	3a01      	subs	r2, #1
1a004324:	428b      	cmp	r3, r1
1a004326:	d02d      	beq.n	1a004384 <memchr+0x74>
1a004328:	f010 0f07 	tst.w	r0, #7
1a00432c:	b342      	cbz	r2, 1a004380 <memchr+0x70>
1a00432e:	d1f6      	bne.n	1a00431e <memchr+0xe>
1a004330:	b4f0      	push	{r4, r5, r6, r7}
1a004332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00433a:	f022 0407 	bic.w	r4, r2, #7
1a00433e:	f07f 0700 	mvns.w	r7, #0
1a004342:	2300      	movs	r3, #0
1a004344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004348:	3c08      	subs	r4, #8
1a00434a:	ea85 0501 	eor.w	r5, r5, r1
1a00434e:	ea86 0601 	eor.w	r6, r6, r1
1a004352:	fa85 f547 	uadd8	r5, r5, r7
1a004356:	faa3 f587 	sel	r5, r3, r7
1a00435a:	fa86 f647 	uadd8	r6, r6, r7
1a00435e:	faa5 f687 	sel	r6, r5, r7
1a004362:	b98e      	cbnz	r6, 1a004388 <memchr+0x78>
1a004364:	d1ee      	bne.n	1a004344 <memchr+0x34>
1a004366:	bcf0      	pop	{r4, r5, r6, r7}
1a004368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00436c:	f002 0207 	and.w	r2, r2, #7
1a004370:	b132      	cbz	r2, 1a004380 <memchr+0x70>
1a004372:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004376:	3a01      	subs	r2, #1
1a004378:	ea83 0301 	eor.w	r3, r3, r1
1a00437c:	b113      	cbz	r3, 1a004384 <memchr+0x74>
1a00437e:	d1f8      	bne.n	1a004372 <memchr+0x62>
1a004380:	2000      	movs	r0, #0
1a004382:	4770      	bx	lr
1a004384:	3801      	subs	r0, #1
1a004386:	4770      	bx	lr
1a004388:	2d00      	cmp	r5, #0
1a00438a:	bf06      	itte	eq
1a00438c:	4635      	moveq	r5, r6
1a00438e:	3803      	subeq	r0, #3
1a004390:	3807      	subne	r0, #7
1a004392:	f015 0f01 	tst.w	r5, #1
1a004396:	d107      	bne.n	1a0043a8 <memchr+0x98>
1a004398:	3001      	adds	r0, #1
1a00439a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00439e:	bf02      	ittt	eq
1a0043a0:	3001      	addeq	r0, #1
1a0043a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0043a6:	3001      	addeq	r0, #1
1a0043a8:	bcf0      	pop	{r4, r5, r6, r7}
1a0043aa:	3801      	subs	r0, #1
1a0043ac:	4770      	bx	lr
1a0043ae:	bf00      	nop

1a0043b0 <__malloc_lock>:
1a0043b0:	4801      	ldr	r0, [pc, #4]	; (1a0043b8 <__malloc_lock+0x8>)
1a0043b2:	f7ff ba26 	b.w	1a003802 <__retarget_lock_acquire_recursive>
1a0043b6:	bf00      	nop
1a0043b8:	10000304 	.word	0x10000304

1a0043bc <__malloc_unlock>:
1a0043bc:	4801      	ldr	r0, [pc, #4]	; (1a0043c4 <__malloc_unlock+0x8>)
1a0043be:	f7ff ba21 	b.w	1a003804 <__retarget_lock_release_recursive>
1a0043c2:	bf00      	nop
1a0043c4:	10000304 	.word	0x10000304
1a0043c8:	706d6554 	.word	0x706d6554
1a0043cc:	74617265 	.word	0x74617265
1a0043d0:	3a617275 	.word	0x3a617275
1a0043d4:	20642520 	.word	0x20642520
1a0043d8:	64617267 	.word	0x64617267
1a0043dc:	4320736f 	.word	0x4320736f
1a0043e0:	000a0d2e 	.word	0x000a0d2e
1a0043e4:	656d7548 	.word	0x656d7548
1a0043e8:	3a646164 	.word	0x3a646164
1a0043ec:	20642520 	.word	0x20642520
1a0043f0:	0d2e2520 	.word	0x0d2e2520
1a0043f4:	000a0d0a 	.word	0x000a0d0a
1a0043f8:	6f727245 	.word	0x6f727245
1a0043fc:	6c612072 	.word	0x6c612072
1a004400:	65656c20 	.word	0x65656c20
1a004404:	48442072 	.word	0x48442072
1a004408:	2e313154 	.word	0x2e313154
1a00440c:	000d0a0d 	.word	0x000d0a0d

1a004410 <InitClkStates>:
1a004410:	01010f01                                ....

1a004414 <pinmuxing>:
1a004414:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004424:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004434:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004444:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004454:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004464:	00d50301 00d50401 00160107 00560207     ..............V.
1a004474:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004484:	00570206                                ..W.

1a004488 <ExtRateIn>:
1a004488:	00000000                                ....

1a00448c <GpioButtons>:
1a00448c:	08000400 09010900                       ........

1a004494 <GpioLeds>:
1a004494:	01050005 0e000205 0c010b01              ............

1a0044a0 <GpioPorts>:
1a0044a0:	03030003 0f050403 05031005 07030603     ................
1a0044b0:	ffff0802                                ....

1a0044b4 <OscRateIn>:
1a0044b4:	00b71b00                                ....

1a0044b8 <InitClkStates>:
1a0044b8:	00010100 00010909 0001090a 01010701     ................
1a0044c8:	00010902 00010906 0101090c 0001090d     ................
1a0044d8:	0001090e 0001090f 00010910 00010911     ................
1a0044e8:	00010912 00010913 00011114 00011119     ................
1a0044f8:	0001111a 0001111b 08040201 0f0f0f03     ................
1a004508:	ffff00ff                                ....

1a00450c <periph_to_base>:
1a00450c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00451c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00452c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00453c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00454c:	01820013 00120182 01a201a2 01c20011     ................
1a00455c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00456c:	02220222 0223000d 001c0223              "."...#.#...

1a004578 <UART_BClock>:
1a004578:	01a201c2 01620182                       ......b.

1a004580 <UART_PClock>:
1a004580:	00820081 00a200a1                       ........

1a004588 <gpioPinsInit>:
1a004588:	02000104 00050701 05010d03 04080100     ................
1a004598:	02020002 02000304 00000403 04070002     ................
1a0045a8:	030c0300 09050402 05040103 04030208     ................
1a0045b8:	04020305 06040504 0802000c 03000b06     ................
1a0045c8:	00090607 07060503 060f0504 03030004     ................
1a0045d8:	02000404 00050404 06040502 04060200     ................
1a0045e8:	0c050408 05040a04 0003010e 14010a00     ................
1a0045f8:	010f0000 0d000012 00001101 0010010c     ................
1a004608:	07070300 000f0300 01000001 00000000     ................
1a004618:	000a0600 08060603 06100504 04030005     ................
1a004628:	03000106 04090400 04010d05 010b0000     ................
1a004638:	0200000f 00000001 00010104 02010800     ................
1a004648:	01090000 09010006 05040002 04010200     ................
1a004658:	02020105 02020504 0e00000a 01000b02     ................
1a004668:	000c020b ffff0c01                       ........

1a004670 <lpcUarts>:
1a004670:	40081000 06020406 00180205 40081000     ...@...........@
1a004680:	09070509 00180706 40082000 00000000     ......... .@....
1a004690:	00190000 400c1000 07060107 001a0602     .......@........
1a0046a0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0046b0:	02020302 001b0204 74617453 69745f65     ........State_ti
1a0046c0:	756f656d 00000d74                       meout...

1a0046c8 <__sf_fake_stderr>:
	...

1a0046e8 <__sf_fake_stdin>:
	...

1a004708 <__sf_fake_stdout>:
	...

1a004728 <_global_impure_ptr>:
1a004728:	1000004c 2b302d23 6c680020 6665004c     L...#-0+ .hlL.ef
1a004738:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004748:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004758:	64636261 ff006665                       abcdef..
